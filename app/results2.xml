<assemblies timestamp="07/12/2023 07:26:01">
  <assembly name="C:\Development\grafx\Source\Platform\Platform.API\Tests\CHILI.GraFx.Platform.API.Tests\bin\Debug\net6.0\CHILI.GraFx.Platform.API.Tests.dll" run-date="2023-07-12" run-time="07:26:01" total="775" passed="775" failed="0" skipped="0" time="21.328" errors="0">
    <errors />
    <collection total="33" passed="33" failed="0" skipped="0" name="Test collection for CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" time="0.547">
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetByIdAsyncMethod+WhenEnvironmentIsNotFound.ReturnsHttpNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetByIdAsyncMethod+WhenEnvironmentIsNotFound.ReturnsHttpNotFound(environmentManager: Mock&lt;IEnvironmentManager:32&gt;, handler: EnvironmentHandler { })" time="0.0051938" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest(groupBy: &quot;month&quot;, startDate: &quot;2024-01-01&quot;, endDate: &quot;2021-01-01&quot;, environmentGuid: cfd02db8-8ad7-42c4-b61d-72d6953874e9, handler: EnvironmentHandler { })" time="0.0987442" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest(groupBy: &quot;year&quot;, startDate: &quot;2022/01/01&quot;, endDate: &quot;2021/01/01&quot;, environmentGuid: cfd02db8-8ad7-42c4-b61d-72d6953874e9, handler: EnvironmentHandler { })" time="0.0002136" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest(groupBy: &quot;any&quot;, startDate: &quot;2021-01-01&quot;, endDate: &quot;2023-01-01&quot;, environmentGuid: cfd02db8-8ad7-42c4-b61d-72d6953874e9, handler: EnvironmentHandler { })" time="0.0000889" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest(groupBy: &quot;&quot;, startDate: &quot;2021-01-01&quot;, endDate: &quot;2023-01-01&quot;, environmentGuid: cfd02db8-8ad7-42c4-b61d-72d6953874e9, handler: EnvironmentHandler { })" time="0.0000167" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest(groupBy: &quot;year&quot;, startDate: &quot;&quot;, endDate: &quot;2021-0-01&quot;, environmentGuid: cfd02db8-8ad7-42c4-b61d-72d6953874e9, handler: EnvironmentHandler { })" time="0.0000478" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest(groupBy: &quot;year&quot;, startDate: &quot;2021-0-01&quot;, endDate: &quot;&quot;, environmentGuid: cfd02db8-8ad7-42c4-b61d-72d6953874e9, handler: EnvironmentHandler { })" time="0.0000381" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetByIdAsyncMethod+WhenEnvironmentIsFound.ReturnsHttpOkWithEnvironmentModel" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetByIdAsyncMethod+WhenEnvironmentIsFound.ReturnsHttpOkWithEnvironmentModel(isAuthRuleCheckSuccess: True, getExpectedResult: Func`2 { Method = Microsoft.AspNetCore.Http.IResult &lt;TestCases&gt;b__0_0(CHILI.GraFx.Platform.API.Modules.Environment.Models.EnvironmentModel), Target = &lt;&gt;c { } }, environmentManager: Mock&lt;IEnvironmentManager:81&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:119&gt;, environmentModel: EnvironmentModel { Id = 221, Name = &quot;Name0e223be0-fd42-436f-800d-847d69ca5c1e&quot;, Region = &quot;Region9e58fc44-ebcf-48fe-aeb5-3ced82a3776c&quot;, RenderCount = 63, StorageDetails = EnvironmentStorageInformationModel { UsedAssetStorage = 252, UsedBackupStorage = 242, UsedCacheStorage = 253, UsedDocumentsStorage = 234, UsedFontsStorage = 111, ... }, ... }, handler: EnvironmentHandler { })" time="0.0964499" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetByIdAsyncMethod+WhenEnvironmentIsFound.ReturnsHttpOkWithEnvironmentModel" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetByIdAsyncMethod+WhenEnvironmentIsFound.ReturnsHttpOkWithEnvironmentModel(isAuthRuleCheckSuccess: False, getExpectedResult: Func`2 { Method = Microsoft.AspNetCore.Http.IResult &lt;TestCases&gt;b__0_1(CHILI.GraFx.Platform.API.Modules.Environment.Models.EnvironmentModel), Target = &lt;&gt;c { } }, environmentManager: Mock&lt;IEnvironmentManager:81&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:119&gt;, environmentModel: EnvironmentModel { Id = 221, Name = &quot;Name0e223be0-fd42-436f-800d-847d69ca5c1e&quot;, Region = &quot;Region9e58fc44-ebcf-48fe-aeb5-3ced82a3776c&quot;, RenderCount = 63, StorageDetails = EnvironmentStorageInformationModel { UsedAssetStorage = 252, UsedBackupStorage = 242, UsedCacheStorage = 253, UsedDocumentsStorage = 234, UsedFontsStorage = 111, ... }, ... }, handler: EnvironmentHandler { })" time="0.0401484" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetByGuidAsyncMethod+WhenAuthRuleReturnsTrue+WhenEnvironmentIsFound.ReturnsHttpOkWithEnvironmentModel" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetByGuidAsyncMethod+WhenAuthRuleReturnsTrue+WhenEnvironmentIsFound.ReturnsHttpOkWithEnvironmentModel(environmentManager: Mock&lt;IEnvironmentManager:84&gt;, environmentGuid: 9852a4ae-7e67-4a52-94ea-6302c18f6a73, authRuleValidator: Mock&lt;IAuthRuleValidator:128&gt;, environmentModel: EnvironmentModel { Id = 90, Name = &quot;Name8cb78163-badc-4192-9c05-9e2c6c56d00b&quot;, Region = &quot;Region9310e145-00a0-4ad2-b23a-dc22789d477a&quot;, RenderCount = 175, StorageDetails = EnvironmentStorageInformationModel { UsedAssetStorage = 249, UsedBackupStorage = 102, UsedCacheStorage = 247, UsedDocumentsStorage = 51, UsedFontsStorage = 77, ... }, ... }, handler: EnvironmentHandler { })" time="0.0373020" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasNoPermissions.ReturnsHttpForbidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasNoPermissions.ReturnsHttpForbidResult(authRuleValidator: Mock&lt;IAuthRuleValidator:149&gt;, dataAccessor: Namee860aebf-897b-4b86-aa48-ba0743ffbce7, handler: EnvironmentHandler { })" time="0.0367655" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasPermissions.ReturnsHttpResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasPermissions.ReturnsHttpResultOk(expectedOkResult: OkObjectResult { ContentType = null, StatusCode = 200, Value = [EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }] }, groupBy: &quot;month&quot;, startDate: &quot;2023-01-19&quot;, endDate: &quot;2023-01-22&quot;, authRuleValidator: Mock&lt;IAuthRuleValidator:185&gt;, dataAccessor: Namefccbf287-3bb2-4da6-8489-2c2de915fba5, dateTimeProvider: Name39db54c9-aa55-4fc1-ba29-1e17bbc15db2, handler: EnvironmentHandler { })" time="0.0818942" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasPermissions.ReturnsHttpResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasPermissions.ReturnsHttpResultOk(expectedOkResult: OkObjectResult { ContentType = null, StatusCode = 200, Value = [EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, ...] }, groupBy: &quot;month&quot;, startDate: null, endDate: null, authRuleValidator: Mock&lt;IAuthRuleValidator:185&gt;, dataAccessor: Namefccbf287-3bb2-4da6-8489-2c2de915fba5, dateTimeProvider: Name39db54c9-aa55-4fc1-ba29-1e17bbc15db2, handler: EnvironmentHandler { })" time="0.0106456" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasPermissions.ReturnsHttpResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasPermissions.ReturnsHttpResultOk(expectedOkResult: OkObjectResult { ContentType = null, StatusCode = 200, Value = [EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, ...] }, groupBy: &quot;year&quot;, startDate: null, endDate: null, authRuleValidator: Mock&lt;IAuthRuleValidator:185&gt;, dataAccessor: Namefccbf287-3bb2-4da6-8489-2c2de915fba5, dateTimeProvider: Name39db54c9-aa55-4fc1-ba29-1e17bbc15db2, handler: EnvironmentHandler { })" time="0.0245167" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasPermissions.ReturnsHttpResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasPermissions.ReturnsHttpResultOk(expectedOkResult: OkObjectResult { ContentType = null, StatusCode = 200, Value = [EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }] }, groupBy: &quot;year&quot;, startDate: &quot;2022-10-10&quot;, endDate: &quot;2022-12-25&quot;, authRuleValidator: Mock&lt;IAuthRuleValidator:185&gt;, dataAccessor: Namefccbf287-3bb2-4da6-8489-2c2de915fba5, dateTimeProvider: Name39db54c9-aa55-4fc1-ba29-1e17bbc15db2, handler: EnvironmentHandler { })" time="0.0152353" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasPermissions.ReturnsHttpResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasPermissions.ReturnsHttpResultOk(expectedOkResult: OkObjectResult { ContentType = null, StatusCode = 200, Value = [EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }] }, groupBy: &quot;month&quot;, startDate: &quot;2023-01-19&quot;, endDate: &quot;2023-01-22&quot;, authRuleValidator: Mock&lt;IAuthRuleValidator:201&gt;, dataAccessor: Name2a6e77b3-97b6-40c7-90a5-51fd30a385ed, dateTimeProvider: Name04252ee1-cf4e-40ba-90b7-218bcaf341dd, handler: EnvironmentHandler { })" time="0.0255182" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasPermissions.ReturnsHttpResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasPermissions.ReturnsHttpResultOk(expectedOkResult: OkObjectResult { ContentType = null, StatusCode = 200, Value = [EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, ...] }, groupBy: &quot;month&quot;, startDate: null, endDate: null, authRuleValidator: Mock&lt;IAuthRuleValidator:201&gt;, dataAccessor: Name2a6e77b3-97b6-40c7-90a5-51fd30a385ed, dateTimeProvider: Name04252ee1-cf4e-40ba-90b7-218bcaf341dd, handler: EnvironmentHandler { })" time="0.0126626" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasPermissions.ReturnsHttpResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasPermissions.ReturnsHttpResultOk(expectedOkResult: OkObjectResult { ContentType = null, StatusCode = 200, Value = [EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, ...] }, groupBy: &quot;year&quot;, startDate: null, endDate: null, authRuleValidator: Mock&lt;IAuthRuleValidator:201&gt;, dataAccessor: Name2a6e77b3-97b6-40c7-90a5-51fd30a385ed, dateTimeProvider: Name04252ee1-cf4e-40ba-90b7-218bcaf341dd, handler: EnvironmentHandler { })" time="0.0080655" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasPermissions.ReturnsHttpResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasPermissions.ReturnsHttpResultOk(expectedOkResult: OkObjectResult { ContentType = null, StatusCode = 200, Value = [EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }, EnvironmentRenderModel { ... }] }, groupBy: &quot;year&quot;, startDate: &quot;2022-10-10&quot;, endDate: &quot;2022-12-25&quot;, authRuleValidator: Mock&lt;IAuthRuleValidator:201&gt;, dataAccessor: Name2a6e77b3-97b6-40c7-90a5-51fd30a385ed, dateTimeProvider: Name04252ee1-cf4e-40ba-90b7-218bcaf341dd, handler: EnvironmentHandler { })" time="0.0158854" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetSubscriptionEnvironmentsAsyncMethod+WhenAuthRuleValidatorReturnsTrue+WhenSubscriptionIsFound.ReturnsHttpOkWithListOfBasicEnvironmentModels" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetSubscriptionEnvironmentsAsyncMethod+WhenAuthRuleValidatorReturnsTrue+WhenSubscriptionIsFound.ReturnsHttpOkWithListOfBasicEnvironmentModels(environmentManager: Mock&lt;IEnvironmentManager:109&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:204&gt;, subscriptionGuid: 287ef645-02cc-4219-b223-60d758318ce6, environmentModels: [BasicEnvironmentModel { BackOfficeUri = http://b025cc9a-2f0e-4212-9a91-543dcaf645d5/, EnvironmentGuid = 36f4733e-ce57-43c0-b3ba-f7527ccdcd4b, Id = 78, Name = &quot;Name5fc6fccb-7d24-4b5a-b5e1-bda3ac8a501e&quot;, Region = &quot;Region99949190-18e9-4984-85f5-24d828fd29cf&quot;, ... }, BasicEnvironmentModel { BackOfficeUri = http://c3dee9a6-4b61-49bf-a261-09c1725d657c/, EnvironmentGuid = 35aaf47d-7f23-4a22-b645-2ffefd62be0c, Id = 253, Name = &quot;Namec3ca6a27-62b6-4d16-bdd8-4e5e5eab8ebf&quot;, Region = &quot;Region49ed5374-21e2-41d3-87fd-bbb14ad7c789&quot;, ... }, BasicEnvironmentModel { BackOfficeUri = http://4b9581eb-0c57-4868-afad-54692982dfa1/, EnvironmentGuid = 91ff3490-0fd0-4d93-94b0-9af631992ec2, Id = 9, Name = &quot;Name8321e2bd-63f8-4be9-a957-1fed9a052e29&quot;, Region = &quot;Region9e4a4f9c-49db-45a7-952d-e27a0df07779&quot;, ... }], handler: EnvironmentHandler { })" time="0.0102490" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasNoPermissions.ReturnsHttpForbidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsValid+WhenEnvironmentIsFound+WhenUserHasNoPermissions.ReturnsHttpForbidResult(authRuleValidator: Mock&lt;IAuthRuleValidator:215&gt;, dataAccessor: Nameadc072ae-b5e2-40e9-aa89-a290439a85f7, handler: EnvironmentHandler { })" time="0.0061452" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetSubscriptionEnvironmentsAsyncMethod+WhenAuthRuleValidatorReturnsFalse.ReturnsHttpForbidden" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetSubscriptionEnvironmentsAsyncMethod+WhenAuthRuleValidatorReturnsFalse.ReturnsHttpForbidden(subscriptionGuid: d70faea9-7884-4e31-b080-f7395390135b, handler: EnvironmentHandler { })" time="0.0014312" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest(groupBy: &quot;month&quot;, startDate: &quot;2024-01-01&quot;, endDate: &quot;2021-01-01&quot;, environmentId: 251, handler: EnvironmentHandler { })" time="0.0031862" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest(groupBy: &quot;year&quot;, startDate: &quot;2022/01/01&quot;, endDate: &quot;2021/01/01&quot;, environmentId: 251, handler: EnvironmentHandler { })" time="0.0000688" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest(groupBy: &quot;any&quot;, startDate: &quot;2021-01-01&quot;, endDate: &quot;2023-01-01&quot;, environmentId: 251, handler: EnvironmentHandler { })" time="0.0000195" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest(groupBy: &quot;&quot;, startDate: &quot;2021-01-01&quot;, endDate: &quot;2023-01-01&quot;, environmentId: 251, handler: EnvironmentHandler { })" time="0.0000148" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest(groupBy: &quot;year&quot;, startDate: &quot;&quot;, endDate: &quot;2021-0-01&quot;, environmentId: 251, handler: EnvironmentHandler { })" time="0.0000381" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsNotValid.ReturnsHttpStatusCodeBadRequest(groupBy: &quot;year&quot;, startDate: &quot;2021-0-01&quot;, endDate: &quot;&quot;, environmentId: 251, handler: EnvironmentHandler { })" time="0.0000351" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetByGuidAsyncMethod+WhenAuthRuleReturnsTrue+WhenEnvironmentIsNotFound.ReturnsHttpNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetByGuidAsyncMethod+WhenAuthRuleReturnsTrue+WhenEnvironmentIsNotFound.ReturnsHttpNotFound(authRuleValidator: Mock&lt;IAuthRuleValidator:233&gt;, environmentManager: Mock&lt;IEnvironmentManager:134&gt;, handler: EnvironmentHandler { })" time="0.0026398" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetByGuidAsyncMethod+WhenAuthRuleReturnsFalse.ReturnsHttpForbid" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetByGuidAsyncMethod+WhenAuthRuleReturnsFalse.ReturnsHttpForbid(environmentManager: Mock&lt;IEnvironmentManager:156&gt;, model: EnvironmentModel { Id = 68, Name = &quot;Name7109ecfc-1b5c-4e4f-a269-fbb6c6256103&quot;, Region = &quot;Regionbab1f4eb-08bf-44a8-952f-e63380186c7c&quot;, RenderCount = 118, StorageDetails = EnvironmentStorageInformationModel { UsedAssetStorage = 81, UsedBackupStorage = 163, UsedCacheStorage = 8, UsedDocumentsStorage = 13, UsedFontsStorage = 237, ... }, ... }, handler: EnvironmentHandler { })" time="0.0018856" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsValid+WhenEnvironmentIsNotFound.ReturnsHttpNotFoundResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersByGuidMethod+WhenRequestIsValid+WhenEnvironmentIsNotFound.ReturnsHttpNotFoundResult(environmentGuid: 0dce8400-1d52-4c47-9171-72c53b175aaa, handler: EnvironmentHandler { })" time="0.0041857" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetSubscriptionEnvironmentsAsyncMethod+WhenAuthRuleValidatorReturnsTrue+WhenSubscriptionIsNotFound.ReturnsHttpNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetSubscriptionEnvironmentsAsyncMethod+WhenAuthRuleValidatorReturnsTrue+WhenSubscriptionIsNotFound.ReturnsHttpNotFound(subscriptionGuid: 3d623707-d825-41c2-a7cb-c9333838ca5a, environmentManager: Mock&lt;IEnvironmentManager:172&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:270&gt;, handler: EnvironmentHandler { })" time="0.0033517" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers.EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsValid+WhenEnvironmentIsNotFound.ReturnsHttpNotFoundResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Handlers" method="EnvironmentHandlerTests+TheGetRendersMethod+WhenRequestIsValid+WhenEnvironmentIsNotFound.ReturnsHttpNotFoundResult(environmentId: 233, handler: EnvironmentHandler { })" time="0.0047547" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for CHILI.GraFx.Platform.API.Tests.Modules.Environment.Models" time="0.342">
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Models.EnvironmentModelTests+TheSerializationImplementation.SerializesTheData" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Models" method="EnvironmentModelTests+TheSerializationImplementation.SerializesTheData(model: EnvironmentModel { Id = 6, Name = &quot;Nameeaa22ea6-0529-4a04-87f3-e262e30c1b4e&quot;, Region = &quot;Region4f370c2c-6f16-4791-8033-9abf84e7c88b&quot;, RenderCount = 38, StorageDetails = EnvironmentStorageInformationModel { UsedAssetStorage = 14, UsedBackupStorage = 114, UsedCacheStorage = 39, UsedDocumentsStorage = 189, UsedFontsStorage = 170, ... }, ... })" time="0.3416515" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="55" passed="55" failed="0" skipped="0" name="Test collection for CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" time="0.417">
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheCheckIfAllEnvironmentsBelongToAnySubscriptionsAsyncMethod.ReturnsEnvironments" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheCheckIfAllEnvironmentsBelongToAnySubscriptionsAsyncMethod.ReturnsEnvironments(subscriptionIds: [3b7a6cb7-ff00-4fdb-b6a7-bda33ff39d4a, a1eb298d-2cb5-46ee-a2fc-9e0ccb646ccc], environmentIds: [02baef35-463a-4abd-b523-515650c0703f, a1bdb61f-1c7d-4d97-a398-9b522bd4681b], repositoryResult: [[02baef35-463a-4abd-b523-515650c0703f] = 3b7a6cb7-ff00-4fdb-b6a7-bda33ff39d4a, [a1bdb61f-1c7d-4d97-a398-9b522bd4681b] = a1eb298d-2cb5-46ee-a2fc-9e0ccb646ccc], expectedResult: SuccessResult`1 { IsError = False, IsSuccess = True }, environmentsRepository: Mock&lt;IEnvironmentsRepository:31&gt;, manager: EnvironmentManager { })" time="0.0230489" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheCheckIfAllEnvironmentsBelongToAnySubscriptionsAsyncMethod.ReturnsEnvironments" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheCheckIfAllEnvironmentsBelongToAnySubscriptionsAsyncMethod.ReturnsEnvironments(subscriptionIds: [3b7a6cb7-ff00-4fdb-b6a7-bda33ff39d4a, a1eb298d-2cb5-46ee-a2fc-9e0ccb646ccc], environmentIds: [02baef35-463a-4abd-b523-515650c0703f, 3db60ce7-0e5a-4415-a898-6b286e55819b], repositoryResult: [[02baef35-463a-4abd-b523-515650c0703f] = 3b7a6cb7-ff00-4fdb-b6a7-bda33ff39d4a], expectedResult: EntityNotFoundResult`1 { ErrorMessage = &quot;Some environments do not exist.&quot;, IsError = True, IsSuccess = False }, environmentsRepository: Mock&lt;IEnvironmentsRepository:31&gt;, manager: EnvironmentManager { })" time="0.0012971" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheCheckIfAllEnvironmentsBelongToAnySubscriptionsAsyncMethod.ReturnsEnvironments" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheCheckIfAllEnvironmentsBelongToAnySubscriptionsAsyncMethod.ReturnsEnvironments(subscriptionIds: [3b7a6cb7-ff00-4fdb-b6a7-bda33ff39d4a], environmentIds: [02baef35-463a-4abd-b523-515650c0703f, a1bdb61f-1c7d-4d97-a398-9b522bd4681b], repositoryResult: [[02baef35-463a-4abd-b523-515650c0703f] = 3b7a6cb7-ff00-4fdb-b6a7-bda33ff39d4a, [a1bdb61f-1c7d-4d97-a398-9b522bd4681b] = a1eb298d-2cb5-46ee-a2fc-9e0ccb646ccc], expectedResult: SuccessResult`1 { IsError = False, IsSuccess = True }, environmentsRepository: Mock&lt;IEnvironmentsRepository:31&gt;, manager: EnvironmentManager { })" time="0.0008962" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound+WhenTheDisplayNameIsEmpty.TheNameOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound+WhenTheDisplayNameIsEmpty.TheNameOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://255369b0-de2a-411d-a4d3-77e9a9f60364/, DisplayName = &quot;DisplayNamedcb47b0e-f47a-467f-b09a-7a5849f79950&quot;, EnvironmentSize = 140, Guid = 6cfe7934-3c21-49c1-b8d9-57ca04324588, Id = 177, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:34&gt;, manager: EnvironmentManager { })" time="0.0242875" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentsRepositoryTests+TheGetSubscriptionEnvironmentsMethod+WhenSubscriptionGuidIsFound.ResultIsNotNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentsRepositoryTests+TheGetSubscriptionEnvironmentsMethod+WhenSubscriptionGuidIsFound.ResultIsNotNull(databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:56&gt;, repository: EnvironmentsRepository { })" time="0.0180261" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentsRepositoryTests+TheGetEnvironmentToSubscriptionMapAsyncMethod.ReturnsCorrectResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentsRepositoryTests+TheGetEnvironmentToSubscriptionMapAsyncMethod.ReturnsCorrectResult(environmentIds: [9626f1a2-5103-4fe4-aedd-f311dc9521d9, 277e114c-0935-4df1-a85b-66cf132eb0b0, 0d955451-b0c8-423e-8c5c-3cf9b20c2561], expectedMap: [[9626f1a2-5103-4fe4-aedd-f311dc9521d9] = 315e8a55-ad83-4aa6-b45d-11db42ed40b0, [277e114c-0935-4df1-a85b-66cf132eb0b0] = 013ad0df-8d68-4401-83f4-d266b56cbc1c], repository: EnvironmentsRepository { })" time="0.0505142" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentsRepositoryTests+TheGetEnvironmentToSubscriptionMapAsyncMethod.ReturnsCorrectResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentsRepositoryTests+TheGetEnvironmentToSubscriptionMapAsyncMethod.ReturnsCorrectResult(environmentIds: [], expectedMap: [], repository: EnvironmentsRepository { })" time="0.0030113" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentsRepositoryTests+TheGetByIdAsyncMethod+WhenIdIsFound.ResultIsNotNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentsRepositoryTests+TheGetByIdAsyncMethod+WhenIdIsFound.ResultIsNotNull(dateTimeProvider: Mock&lt;IDateTimeProvider:82&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:72&gt;, repository: EnvironmentsRepository { })" time="0.0135766" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentsRepositoryTests+TheGetSubscriptionEnvironmentsMethod+WhenSubscriptionGuidIsNotFound.ResultIsNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentsRepositoryTests+TheGetSubscriptionEnvironmentsMethod+WhenSubscriptionGuidIsNotFound.ResultIsNull(repository: EnvironmentsRepository { })" time="0.0262090" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheIdOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheIdOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://90a77ed4-e83a-428b-b79e-25bbd3dd722f/, DisplayName = &quot;DisplayName3a703df9-f10b-43bd-986e-0c0b36109251&quot;, EnvironmentSize = 127, Guid = 61c8468a-d639-4e9a-a4a9-4505193852ae, Id = 153, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:50&gt;, manager: EnvironmentManager { })" time="0.0028936" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheGuidOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheGuidOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://0187ff79-b4fa-4fad-955c-d0738cbf8f1a/, DisplayName = &quot;DisplayName7864d581-5b56-4ada-ab0c-a15d71055fd8&quot;, EnvironmentSize = 152, Guid = d41ea46d-4fa9-4e93-85f1-67da268327e5, Id = 79, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:51&gt;, manager: EnvironmentManager { })" time="0.0025797" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheUsedAssetsStorageOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheUsedAssetsStorageOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://ce841058-19b2-4940-bf26-166f05d69765/, DisplayName = &quot;DisplayName442d0bcc-be39-4811-9aa3-7034f7bdfdc0&quot;, EnvironmentSize = 241, Guid = 7caa7f58-6a9a-401f-90fb-3adcede4562d, Id = 13, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:53&gt;, manager: EnvironmentManager { })" time="0.0091289" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheNameOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheNameOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://f4ef09bf-0d38-426a-aa84-79ca8a73e0d7/, DisplayName = &quot;DisplayName4f14e527-679f-464f-99ec-34142bc5e768&quot;, EnvironmentSize = 111, Guid = cb4d8db8-c75c-4060-a17d-684271357311, Id = 223, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:54&gt;, manager: EnvironmentManager { })" time="0.0024983" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheDisplayNameOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheDisplayNameOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://d38dfa6b-31ef-4d50-99d4-8c43063394d8/, DisplayName = &quot;DisplayNamed06db2e1-5f48-4aa4-a6da-593906d59a04&quot;, EnvironmentSize = 238, Guid = cf85a8c6-7036-4a1a-b751-b0a42706873f, Id = 26, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:57&gt;, manager: EnvironmentManager { })" time="0.0026645" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentsRepositoryTests+TheHasAllMethod.ReturnsTrueWhenAllTheUniaueIdsAreFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentsRepositoryTests+TheHasAllMethod.ReturnsTrueWhenAllTheUniaueIdsAreFound(environmentsIds: [(188, af0ae41e-96d1-4f3b-b1a0-6d23521730fc), (222, 68ecb337-7e0d-49b1-bfc4-58f9e4ed6b36), (212, 97c33210-6195-4761-b13a-383cea9ce146)])" time="0.0226805" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheTotalUsedStorageOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheTotalUsedStorageOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://807c1af7-d5e0-4af4-a08b-285b76b5c8cb/, DisplayName = &quot;DisplayName6bbea91f-41d4-4bb7-988d-066e0b6e086f&quot;, EnvironmentSize = 99, Guid = 39ad4c94-f036-4a38-badf-ebeae87c694a, Id = 206, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:59&gt;, manager: EnvironmentManager { })" time="0.0025464" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentsRepositoryTests+TheHasAllMethod.ReturnsFalseWhenNotAllTheIdsAreFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentsRepositoryTests+TheHasAllMethod.ReturnsFalseWhenNotAllTheIdsAreFound(environmentsIds: [(104, 247da40b-2bf0-4a04-b715-16af9d4ee4ab), (151, 2574facd-be06-46eb-901e-71ff5a58e974), (208, 4697f877-be62-4be6-94d3-8c4e29c764d4)])" time="0.0080918" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheTenantNameOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheTenantNameOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://462368aa-fbca-455a-8984-f1e0bca801d9/, DisplayName = &quot;DisplayName2341d671-976a-469d-98df-dbd4fe323b5f&quot;, EnvironmentSize = 218, Guid = 0c95cf59-1567-4af7-bbb3-79d51505e540, Id = 112, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:61&gt;, manager: EnvironmentManager { })" time="0.0024857" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsNotFound.NullIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsNotFound.NullIsReturned(environmentsRepository: Mock&lt;IEnvironmentsRepository:62&gt;, manager: EnvironmentManager { })" time="0.0112685" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheUsedOtherStorageOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheUsedOtherStorageOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://b3d0e24d-64e1-49b3-823f-8ebb708e3a73/, DisplayName = &quot;DisplayName44fbbd40-a0e5-4e5a-8eeb-bcf2d4113bd3&quot;, EnvironmentSize = 247, Guid = ba77e5ac-dc02-4d59-a843-9f6170129abe, Id = 233, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:63&gt;, manager: EnvironmentManager { })" time="0.0026711" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheTypeOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheTypeOfTheEnvironmentIsMapped(type: Sandbox, environmentsRepository: Mock&lt;IEnvironmentsRepository:64&gt;, manager: EnvironmentManager { })" time="0.0042883" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheTypeOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheTypeOfTheEnvironmentIsMapped(type: Production, environmentsRepository: Mock&lt;IEnvironmentsRepository:65&gt;, manager: EnvironmentManager { })" time="0.0007293" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheTotalAmountOfRendersIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheTotalAmountOfRendersIsMapped(environment: Environment { BackOfficeUri = http://f2737361-c9b9-42bd-964b-73b7778adeb5/, DisplayName = &quot;DisplayName16f6ad25-735d-446b-91d7-4d67b080b281&quot;, EnvironmentSize = 226, Guid = 8f04f82b-9cc1-4350-9085-f42b97b9d745, Id = 193, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:66&gt;, manager: EnvironmentManager { })" time="0.0029640" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheUsedDocumentsStorageOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheUsedDocumentsStorageOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://a745a910-5870-4b7f-ae2d-09dd52f094df/, DisplayName = &quot;DisplayName33146f1e-2dbf-4eb2-a092-0eedb179b977&quot;, EnvironmentSize = 94, Guid = f24abce8-ec56-469d-9563-cb7cf6e68a38, Id = 113, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:67&gt;, manager: EnvironmentManager { })" time="0.0025926" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheUsedFontsStorageOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheUsedFontsStorageOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://47e70387-3e7b-473f-9089-f74fb83d29a3/, DisplayName = &quot;DisplayName090a6117-8125-48f3-b47c-55dc504c46da&quot;, EnvironmentSize = 255, Guid = f101271e-52e3-4f53-9775-e2ae71c33de2, Id = 28, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:69&gt;, manager: EnvironmentManager { })" time="0.0142785" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheUsedBackupStorageOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheUsedBackupStorageOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://33164669-4e87-4c13-bd10-2c9c3b157fdb/, DisplayName = &quot;DisplayNamecd04f95b-5b3c-4db8-a5b1-942bdf429b1e&quot;, EnvironmentSize = 250, Guid = 6576d8a0-067f-4ac2-9002-86247e1f8acf, Id = 105, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:70&gt;, manager: EnvironmentManager { })" time="0.0025283" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheRegionOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheRegionOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://c6b55926-2d3a-4318-8536-53f61a2c1f43/, DisplayName = &quot;DisplayNamedfc3eda9-5af2-42bc-b6b2-e49e940a236b&quot;, EnvironmentSize = 140, Guid = cc89054b-cf38-4025-83c2-eaf61a955ae6, Id = 4, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:71&gt;, manager: EnvironmentManager { })" time="0.0035654" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheUsedCacheStorageOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsFound.TheUsedCacheStorageOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://8d8bf095-0169-4b1e-9627-3c0a4b2c6ee8/, DisplayName = &quot;DisplayName1a3720ca-66db-4ef4-9abf-565dc2373427&quot;, EnvironmentSize = 24, Guid = 6f8327ed-7846-447e-b0fd-479cd1b30e3b, Id = 13, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:73&gt;, manager: EnvironmentManager { })" time="0.0023580" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetSubscriptionEnvironmentsAsyncMethod+WhenSubscriptionIsFound.ReturnsEnvironments" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetSubscriptionEnvironmentsAsyncMethod+WhenSubscriptionIsFound.ReturnsEnvironments(environmentsRepository: Mock&lt;IEnvironmentsRepository:72&gt;, environments: [Environment { BackOfficeUri = http://0d27f92e-9291-4d7f-a8d0-1bdc58d72694/, DisplayName = &quot;DisplayName9be86969-f8bb-49d0-bd71-1c5f982e5db1&quot;, EnvironmentSize = 190, Guid = dc941dde-06f5-42d9-9f5e-da14c6d04c33, Id = 222, ... }, Environment { BackOfficeUri = http://61993275-f913-4311-8111-137ba3c3cbec/, DisplayName = &quot;DisplayNamed8554b18-015a-400f-8b88-598c3eef1ba0&quot;, EnvironmentSize = 13604, Guid = 65690a92-8f1b-4350-8783-9039fcd5ce96, Id = 133, ... }, Environment { BackOfficeUri = http://400c0246-ce89-42ed-a970-3d78128e1631/, DisplayName = &quot;DisplayName415c529e-125c-4764-b54f-c41c12337139&quot;, EnvironmentSize = 12227, Guid = 2b921942-4940-4880-afe6-128398b68ff6, Id = 8843, ... }], subscriptionGuid: 7246bfd0-2462-4f55-98ec-9821ceb01905, manager: EnvironmentManager { })" time="0.0188358" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenTheDatabaseIsEmpty.NullIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenTheDatabaseIsEmpty.NullIsReturned(environmentsRepository: Mock&lt;IEnvironmentsRepository:79&gt;, manager: EnvironmentManager { })" time="0.0018933" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound+WhenTheDisplayNameIsEmpty.TheNameOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound+WhenTheDisplayNameIsEmpty.TheNameOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://df5f9f15-c6b6-4a6b-9ab8-0d7d54bbf79c/, DisplayName = &quot;DisplayNamebb3ab0c1-2d23-452c-bd1b-e8a7f03a594b&quot;, EnvironmentSize = 131, Guid = 0e4a05f2-e41e-4c39-8419-fbd1c1544486, Id = 104, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:84&gt;, manager: EnvironmentManager { })" time="0.0083597" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentsRepositoryTests+TheGetAvailabilityOfContentAdministratorsAsyncMethod+WhenGuidsAreFound.ResultIsNotNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentsRepositoryTests+TheGetAvailabilityOfContentAdministratorsAsyncMethod+WhenGuidsAreFound.ResultIsNotNull(databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:155&gt;, repository: EnvironmentsRepository { }, environmentsCount: 31628)" time="0.0306195" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentsRepositoryTests+TheGetAvailabilityOfContentAdministratorsAsyncMethod+WhenGuidsAreFound.ResultIsNotNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentsRepositoryTests+TheGetAvailabilityOfContentAdministratorsAsyncMethod+WhenGuidsAreFound.ResultIsNotNull(databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:156&gt;, repository: EnvironmentsRepository { }, environmentsCount: 79)" time="0.0063542" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenTheDatabaseIsEmpty.NullIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenTheDatabaseIsEmpty.NullIsReturned(environmentsRepository: Mock&lt;IEnvironmentsRepository:90&gt;, manager: EnvironmentManager { })" time="0.0018690" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetSubscriptionEnvironmentsAsyncMethod+WhenSubscriptionIsFound+WhenEnvironmentDoesNotHaveDisplayName.ReturnsEnvironmentNameAsName" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetSubscriptionEnvironmentsAsyncMethod+WhenSubscriptionIsFound+WhenEnvironmentDoesNotHaveDisplayName.ReturnsEnvironmentNameAsName(environmentsRepository: Mock&lt;IEnvironmentsRepository:99&gt;, subscriptionGuid: a2926b77-d21a-45e0-9c40-d07ca339b4b2, manager: EnvironmentManager { })" time="0.0028560" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentsRepositoryTests+TheGetByIdAsyncMethod+WhenIdIsNotFound.ResultIsNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentsRepositoryTests+TheGetByIdAsyncMethod+WhenIdIsNotFound.ResultIsNull(repository: EnvironmentsRepository { })" time="0.0113557" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheUsedBackupStorageOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheUsedBackupStorageOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://790d2625-c85c-4b85-87eb-b0b295b27600/, DisplayName = &quot;DisplayNamec5482967-a945-4a96-85a5-7765263205dd&quot;, EnvironmentSize = 154, Guid = 696e2fb5-acaf-4c2a-ba35-5c5cffd8f2fe, Id = 147, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:110&gt;, manager: EnvironmentManager { })" time="0.0025517" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheRegionOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheRegionOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://13c532e4-ab45-4c21-bb29-e4a6d8748833/, DisplayName = &quot;DisplayName29d82d90-20c8-49d4-ad1c-8a93c1d5648a&quot;, EnvironmentSize = 125, Guid = 354406ee-037d-4066-89f4-e40c687113af, Id = 18, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:111&gt;, manager: EnvironmentManager { })" time="0.0025098" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheUsedOtherStorageOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheUsedOtherStorageOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://6f2efd58-ead7-4ed5-842c-c3b520f993a0/, DisplayName = &quot;DisplayName32a0e64c-b00f-4bf1-bb12-6f2582ebf15b&quot;, EnvironmentSize = 5, Guid = 3b1f33c3-6762-4ba2-a310-06b536b3219b, Id = 231, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:112&gt;, manager: EnvironmentManager { })" time="0.0026387" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheUsedCacheStorageOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheUsedCacheStorageOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://22f74f7d-89b5-4b3c-bf43-686d65bf67a1/, DisplayName = &quot;DisplayNamea718d991-43df-401d-8cda-94ff28bd8ff3&quot;, EnvironmentSize = 49, Guid = 0b03b535-1db1-496c-8d5e-17096e89eecb, Id = 225, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:113&gt;, manager: EnvironmentManager { })" time="0.0025220" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheTypeOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheTypeOfTheEnvironmentIsMapped(type: Sandbox, environmentsRepository: Mock&lt;IEnvironmentsRepository:114&gt;, manager: EnvironmentManager { })" time="0.0219758" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheTypeOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheTypeOfTheEnvironmentIsMapped(type: Production, environmentsRepository: Mock&lt;IEnvironmentsRepository:115&gt;, manager: EnvironmentManager { })" time="0.0007522" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheTenantNameOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheTenantNameOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://851a7604-4ca8-49d4-951b-4c424e0e2447/, DisplayName = &quot;DisplayName4d471a44-505d-439f-adc0-5d2bdc89cb7e&quot;, EnvironmentSize = 35, Guid = e800cb86-ece9-4259-bfbd-03c73a0d5244, Id = 56, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:116&gt;, manager: EnvironmentManager { })" time="0.0024188" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsNotFound.NullIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithIntOverload+WhenEnvironmentIsNotFound.NullIsReturned(environmentsRepository: Mock&lt;IEnvironmentsRepository:118&gt;, manager: EnvironmentManager { })" time="0.0017402" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheUsedDocumentsStorageOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheUsedDocumentsStorageOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://65cf978b-7746-4adf-a18d-41630093c57c/, DisplayName = &quot;DisplayNameb29f81a1-54ad-4d2e-93a4-314d8f6e5827&quot;, EnvironmentSize = 117, Guid = d2cd911e-acaf-486b-bac3-b6b118717bc5, Id = 203, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:119&gt;, manager: EnvironmentManager { })" time="0.0024267" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentsRepositoryTests+TheGetAvailabilityOfContentAdministratorsAsyncMethod+WhenGuidsAreNotFound.ResultIsNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentsRepositoryTests+TheGetAvailabilityOfContentAdministratorsAsyncMethod+WhenGuidsAreNotFound.ResultIsNull(repository: EnvironmentsRepository { })" time="0.0083315" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheUsedAssetsStorageOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheUsedAssetsStorageOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://37aae4b8-ed09-42ad-80bc-4e12859f3d89/, DisplayName = &quot;DisplayName995a3dfb-f40f-4d04-911a-b111ea9160c4&quot;, EnvironmentSize = 153, Guid = 797ab3c7-44f2-4cff-8343-63ec856b08d4, Id = 86, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:121&gt;, manager: EnvironmentManager { })" time="0.0024317" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheDisplayNameOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheDisplayNameOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://78980304-d018-457f-bc6b-638ee0d42f09/, DisplayName = &quot;DisplayNameee8b1062-cc79-4135-91a6-993b57aa7e35&quot;, EnvironmentSize = 172, Guid = 1148ff33-9cdf-458c-9341-c72e55eef78e, Id = 107, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:122&gt;, manager: EnvironmentManager { })" time="0.0024819" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheTotalAmountOfRendersIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheTotalAmountOfRendersIsMapped(environment: Environment { BackOfficeUri = http://8666ee80-39c9-4d95-9fad-f1c08f36c70d/, DisplayName = &quot;DisplayName12ec653a-bec4-4764-afa3-eb43200ebe45&quot;, EnvironmentSize = 149, Guid = 8de71513-ae23-41ad-b5fc-0f7f09487e34, Id = 25, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:133&gt;, manager: EnvironmentManager { })" time="0.0029802" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetSubscriptionEnvironmentsAsyncMethod+WhenSubscriptionIsFound+WhenEnvironmentHasDisplayName.ReturnsEnvironmentDisplayNameAsName" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetSubscriptionEnvironmentsAsyncMethod+WhenSubscriptionIsFound+WhenEnvironmentHasDisplayName.ReturnsEnvironmentDisplayNameAsName(environmentsRepository: Mock&lt;IEnvironmentsRepository:134&gt;, subscriptionGuid: 53059f6e-cdbc-4755-8cc5-55a215d35de8, manager: EnvironmentManager { })" time="0.0030098" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheUsedFontsStorageOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheUsedFontsStorageOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://4bc2e5a3-bd0f-475b-91aa-975dcb907d7f/, DisplayName = &quot;DisplayName6650381a-b405-418b-a0e5-1a9cf3e63da2&quot;, EnvironmentSize = 114, Guid = bd3aa122-a2dc-460e-953c-7bbe50d63915, Id = 23, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:135&gt;, manager: EnvironmentManager { })" time="0.0027772" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheIdOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheIdOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://7b9f960a-510e-4316-869f-d5d55cba448c/, DisplayName = &quot;DisplayName6b9b2fb0-6e70-41de-b986-30f0961b02d3&quot;, EnvironmentSize = 219, Guid = 0bde9042-7ec0-456e-90ca-764dd376cb39, Id = 61, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:136&gt;, manager: EnvironmentManager { })" time="0.0028554" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheTotalUsedStorageOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheTotalUsedStorageOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://89e9e28f-2498-456a-abc4-c1a1627dee2f/, DisplayName = &quot;DisplayName99853a81-0859-4030-a916-85adfcc1e54d&quot;, EnvironmentSize = 213, Guid = ab53b55d-1ca9-4d1f-b494-913fbbf2f53f, Id = 57, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:137&gt;, manager: EnvironmentManager { })" time="0.0029408" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheNameOfTheEnvironmentIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetAsyncMethodWithGuidOverload+WhenEnvironmentIsFound.TheNameOfTheEnvironmentIsMapped(environment: Environment { BackOfficeUri = http://06e8d497-d44d-4f83-a2a5-2cc3c3a22c1f/, DisplayName = &quot;DisplayName33f0c123-0569-4c79-a1b9-6ccf65d9fd35&quot;, EnvironmentSize = 239, Guid = 02606521-6fed-463f-a353-1c110f4cb7e6, Id = 68, ... }, environmentsRepository: Mock&lt;IEnvironmentsRepository:138&gt;, manager: EnvironmentManager { })" time="0.0024813" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services.EnvironmentManagerTests+TheGetSubscriptionEnvironmentsAsyncMethod+WhenSubscriptionIsNotFound.ReturnsNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Environment.Services" method="EnvironmentManagerTests+TheGetSubscriptionEnvironmentsAsyncMethod+WhenSubscriptionIsNotFound.ReturnsNull(manager: EnvironmentManager { })" time="0.0012537" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for CHILI.GraFx.Platform.API.Tests.Modules.Integration.Extensions" time="0.226">
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Extensions.ServicesCollectionExtensionsTests+TheAddApplicationManagementSupportFunction+WhenTheApplicationIsRunningInProduction.Auth0IsUsedAsTheStorageProviderForApplications" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Extensions" method="ServicesCollectionExtensionsTests+TheAddApplicationManagementSupportFunction+WhenTheApplicationIsRunningInProduction.Auth0IsUsedAsTheStorageProviderForApplications" time="0.2094337" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Extensions.ServicesCollectionExtensionsTests+TheAddApplicationManagementSupportFunction+WhenTheApplicationIsRunningInProduction.Auth0IsUsedAsTheStorageProviderForApi" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Extensions" method="ServicesCollectionExtensionsTests+TheAddApplicationManagementSupportFunction+WhenTheApplicationIsRunningInProduction.Auth0IsUsedAsTheStorageProviderForApi" time="0.0047498" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Extensions.ServicesCollectionExtensionsTests+TheAddApplicationManagementSupportFunction.AnInMemoryApiStorageIsAdded" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Extensions" method="ServicesCollectionExtensionsTests+TheAddApplicationManagementSupportFunction.AnInMemoryApiStorageIsAdded" time="0.0109623" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Extensions.ServicesCollectionExtensionsTests+TheAddApplicationManagementSupportFunction.AnInMemoryApplicationStorageIsAdded" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Extensions" method="ServicesCollectionExtensionsTests+TheAddApplicationManagementSupportFunction.AnInMemoryApplicationStorageIsAdded" time="0.0010556" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="113" passed="113" failed="0" skipped="0" name="Test collection for CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" time="2.747">
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsNotValid.ReturnsBadRequest(model: null)" time="0.0424958" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsNotValid.ReturnsBadRequest(model: UpdateIntegrationModel { Description = null, Name = null })" time="0.0034800" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsNotValid.ReturnsBadRequest(model: UpdateIntegrationModel { Description = null, Name = &quot;name&quot; })" time="0.0027398" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsNotValid.ReturnsBadRequest(model: UpdateIntegrationModel { Description = &quot;description&quot;, Name = null })" time="0.0026636" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheStoreWasUnableToFetchTheApplication.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheStoreWasUnableToFetchTheApplication.ReturnsProblem(clientId: &quot;clientId783e76bd-3729-494d-855b-d9962f576f49&quot;)" time="0.0322094" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsNotValid.ReturnsBadRequest(model: UpdateIntegrationModel { Description = &quot;new&quot;, Name = &quot;&quot; })" time="0.0182745" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsNotValid.ReturnsBadRequest(model: UpdateIntegrationModel { Description = &quot;new&quot;, Name = &quot;--------------------------------------------------&quot;... })" time="0.0038186" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsNotValid.ReturnsBadRequest(model: UpdateIntegrationModel { Description = &quot;--------------------------------------------------&quot;..., Name = &quot;name&quot; })" time="0.0033042" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationIsNotExist.ReturnsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationIsNotExist.ReturnsNotFound(clientId: &quot;clientId58697974-679b-4be8-b7fe-b532db0646de&quot;)" time="0.1361864" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsNotInTheDatabase.ReturnsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsNotInTheDatabase.ReturnsNotFound(application: M2MApplication { Key = valuee2824acd-14d5-45bb-810a-fcfb1890294a })" time="0.0634313" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenMoreThanOnePermissionWereReturned.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenMoreThanOnePermissionWereReturned.ReturnsProblem(environment: Environment { BackOfficeUri = http://4eb51f67-7eb6-4151-bf60-2a7126f4acc7/, DisplayName = &quot;DisplayName24f15d53-ef9c-418d-b07e-41ac868caefb&quot;, EnvironmentSize = 149, Guid = 839d3fe6-bdd1-47c6-931f-28e014d8fb84, Id = 94, ... })" time="0.0659387" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasNoPermissions.ReturnsForbid" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasNoPermissions.ReturnsForbid(environments: [Environment { BackOfficeUri = http://3c6fedf4-77da-489d-a6cd-471c4bbbd98f/, DisplayName = &quot;DisplayName820a392f-a54f-416e-90ad-ee554f3ec5f9&quot;, EnvironmentSize = 107, Guid = 72403fd8-4de9-4281-9b00-65e2be2bc60a, Id = 70, ... }, Environment { BackOfficeUri = http://dd89ed98-999a-4e81-8c70-9d5370cc3c61/, DisplayName = &quot;DisplayNamedf009fa6-7a2d-4475-a99b-b39e6604ddf3&quot;, EnvironmentSize = 847, Guid = bef215d7-c129-4de8-82b5-7fcd78a7021f, Id = 246, ... }, Environment { BackOfficeUri = http://96c95efc-3285-4a82-9151-aa2f3ca3df10/, DisplayName = &quot;DisplayNamec3142655-df34-46dd-81e0-15ad9104f2a6&quot;, EnvironmentSize = 24819, Guid = 4d04b351-52f1-47cd-9e2a-caa94afe90f6, Id = 3781, ... }])" time="0.0179255" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsNotInTheDatabase.ReturnsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsNotInTheDatabase.ReturnsNotFound(application: M2MApplication { Key = valueb0c0905f-650e-475e-971c-7f1ec4631a3a })" time="0.0463249" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdIsNotValid.ReturnsBadRequest(clientId: null)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdIsNotValid.ReturnsBadRequest(clientId: null)" time="0.0100304" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdIsNotValid.ReturnsBadRequest(clientId: &quot; &quot;)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdIsNotValid.ReturnsBadRequest(clientId: &quot; &quot;)" time="0.0024210" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdIsNotValid.ReturnsBadRequest(clientId: &quot;&quot;)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdIsNotValid.ReturnsBadRequest(clientId: &quot;&quot;)" time="0.0020787" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheStoreWasUnableToFetchTheApplication.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheStoreWasUnableToFetchTheApplication.ReturnsProblem(clientId: &quot;clientIda180eb08-0b96-4ec9-977e-a71287ed5a69&quot;)" time="0.0057937" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsValid+WhenTheIntegrationIsFound+WhenIntegrationEnvironmentIsFound+WhenTheUserHasNoPermissions.ResultShouldBeForbid" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsValid+WhenTheIntegrationIsFound+WhenIntegrationEnvironmentIsFound+WhenTheUserHasNoPermissions.ResultShouldBeForbid(environments: [Environment { BackOfficeUri = http://70a726d8-aa2e-498d-899b-0a5e9d8e00fa/, DisplayName = &quot;DisplayName6afbbda9-4f52-4747-8bae-9a7d46401344&quot;, EnvironmentSize = 92, Guid = 00d8ad10-9d42-4b80-813e-211013a7680d, Id = 87, ... }, Environment { BackOfficeUri = http://9244ecb1-8c80-4fec-9cf8-4f529928b226/, DisplayName = &quot;DisplayName70076609-17c1-4af0-af7e-25b612884162&quot;, EnvironmentSize = 29552, Guid = 2a468226-59b1-44d7-9597-3a5307c0150c, Id = 223, ... }, Environment { BackOfficeUri = http://e21e1a5b-fa97-4961-a40e-6dc9daa055fc/, DisplayName = &quot;DisplayNamed489c1e6-6b21-4da3-8374-c5caaaf3ad71&quot;, EnvironmentSize = 13910, Guid = ffdeb331-9161-46bd-a0aa-3ad1dc464aef, Id = 27731, ... }])" time="0.0345442" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsValid+WhenTheIntegrationIsNotFound.ReturnsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsValid+WhenTheIntegrationIsNotFound.ReturnsNotFound" time="0.0255503" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsNotInTheDatabase.ReturnsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsNotInTheDatabase.ReturnsNotFound(application: M2MApplication { Key = value2120329e-c324-4bcb-8cd6-93abe9ed7670 })" time="0.0161222" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsNotValid.ReturnsBadRequest(model: null)" time="0.0234716" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenApplicationPermissionsAlreadyExist+WhenApplicationPermissionsCouldNotBeUpdated.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenApplicationPermissionsAlreadyExist+WhenApplicationPermissionsCouldNotBeUpdated.ReturnsProblem(getPermissionsException: Kwality.UVault.Auth0.Exceptions.ManagementApiException: Exception of type 'Kwality.UVault.Auth0.Exceptions.ManagementApiException' was thrown., environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = 4b951411-bbd5-4d74-843c-bec52a6d052b, Id = 1, ... })" time="0.0295568" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenApplicationPermissionsAlreadyExist+WhenApplicationPermissionsCouldNotBeUpdated.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenApplicationPermissionsAlreadyExist+WhenApplicationPermissionsCouldNotBeUpdated.ReturnsProblem(getPermissionsException: Kwality.UVault.Exceptions.ReadException&#xD;&#xA; ---&gt; System.ArgumentException&#xD;&#xA;   --- End of inner exception stack trace ---, environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = 4b951411-bbd5-4d74-843c-bec52a6d052b, Id = 1, ... })" time="0.0179871" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsNotValid.ReturnsBadRequest(model: CreateIntegrationModel { Description = &quot;&quot;, EnvironmentId = 00000000-0000-0000-0000-000000000000, Name = &quot;&quot; })" time="0.0894089" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsNotValid.ReturnsBadRequest(model: CreateIntegrationModel { Description = &quot;new&quot;, EnvironmentId = 6809327f-9f0c-42ba-b867-2e5d59416160, Name = &quot;&quot; })" time="0.0032952" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsNotValid.ReturnsBadRequest(model: CreateIntegrationModel { Description = &quot;new&quot;, EnvironmentId = b1f2fa08-c831-4cfc-9077-211402128381, Name = &quot;--------------------------------------------------&quot;... })" time="0.0024404" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsNotValid.ReturnsBadRequest(model: CreateIntegrationModel { Description = &quot;--------------------------------------------------&quot;..., EnvironmentId = 6c14fcf7-6ca2-4996-92da-807b30c7a172, Name = &quot;name&quot; })" time="0.0024951" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrations+WhenTheEnvironmentIsNotFound.ReturnsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrations+WhenTheEnvironmentIsNotFound.ReturnsNotFound(environmentId: 6789bf24-e7f1-4b24-a09a-c0b7bd8c2bf3)" time="0.0247795" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentIsNotExist.ReturnsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentIsNotExist.ReturnsNotFound(application: M2MApplication { Key = value660a427e-6d45-472d-a57f-39a24b0518b1 })" time="0.0213624" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsValid+WhenTheIntegrationIsFound+WhenIntegrationEnvironmentIsFound+WhenTheUserHasPermissions+WhenTheUpdateIsSuccessful.ResultShouldBeOkWithTheCorrectData" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsValid+WhenTheIntegrationIsFound+WhenIntegrationEnvironmentIsFound+WhenTheUserHasPermissions+WhenTheUpdateIsSuccessful.ResultShouldBeOkWithTheCorrectData(updateIntegrationModel: UpdateIntegrationModel { Description = &quot;&quot;, Name = &quot;new&quot; })" time="0.2826222" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsValid+WhenTheStoreWasUnableToFetchTheApplication.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsValid+WhenTheStoreWasUnableToFetchTheApplication.ReturnsProblem" time="0.0313589" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: null)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: null)" time="0.0042623" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: &quot; &quot;)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: &quot; &quot;)" time="0.0021813" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: &quot;&quot;)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: &quot;&quot;)" time="0.0021135" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions+WhenTheStoreWasUnableToDeleteTheApplication.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions+WhenTheStoreWasUnableToDeleteTheApplication.ReturnsProblem(deleteException: Kwality.UVault.Auth0.Exceptions.ManagementApiException: Exception of type 'Kwality.UVault.Auth0.Exceptions.ManagementApiException' was thrown., environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = 7a983b8e-91bb-43b9-8d96-2f567df39c28, Id = 1, ... })" time="0.0586276" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions+WhenTheStoreWasUnableToDeleteTheApplication.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions+WhenTheStoreWasUnableToDeleteTheApplication.ReturnsProblem(deleteException: Kwality.UVault.Exceptions.ReadException&#xD;&#xA; ---&gt; System.ArgumentException&#xD;&#xA;   --- End of inner exception stack trace ---, environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = 7a983b8e-91bb-43b9-8d96-2f567df39c28, Id = 1, ... })" time="0.0078651" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsValid+WhenTheIntegrationIsFound+WhenIntegrationEnvironmentIsFound+WhenTheUserHasPermissions+WhenTheUpdateIsSuccessful.ResultShouldBeOkWithTheCorrectData" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsValid+WhenTheIntegrationIsFound+WhenIntegrationEnvironmentIsFound+WhenTheUserHasPermissions+WhenTheUpdateIsSuccessful.ResultShouldBeOkWithTheCorrectData(updateIntegrationModel: UpdateIntegrationModel { Description = &quot;new Description&quot;, Name = &quot;new name&quot; })" time="0.2098747" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions+WhenTheApplicationWasAlreadyDeleted.ReturnsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions+WhenTheApplicationWasAlreadyDeleted.ReturnsNotFound(environment: Environment { BackOfficeUri = http://1d4b25cf-89ab-4a3a-959f-39d19e90e976/, DisplayName = &quot;DisplayName706125ee-76f2-4c7b-929f-bba060637f0c&quot;, EnvironmentSize = 186, Guid = 50b81960-55f1-43e7-8395-48dbe6b0e18c, Id = 251, ... })" time="0.0101875" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsNotFound.ReturnsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsNotFound.ReturnsNotFound(clientId: &quot;clientIdeb9f683f-994b-4523-a17d-41a4cf0c67d2&quot;)" time="0.0046174" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasNoPermissions.ReturnsForbid" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasNoPermissions.ReturnsForbid(environments: [Environment { BackOfficeUri = http://6bf3631a-64f0-4370-bbfc-1bb5c3459abb/, DisplayName = &quot;DisplayName3d34d85a-9388-4b99-849b-4bf55f6a08dd&quot;, EnvironmentSize = 38, Guid = 2b5030d3-e163-40ad-baea-864bcf904b0a, Id = 12, ... }, Environment { BackOfficeUri = http://0e637ec5-a021-4487-a73c-0fbcd9956a13/, DisplayName = &quot;DisplayName5febfa25-b920-4b55-8a20-cc6ccebb3c49&quot;, EnvironmentSize = 1329, Guid = 1843708b-6ecb-4cad-be48-fbf7b4f70082, Id = 62, ... }, Environment { BackOfficeUri = http://8ed3f395-16b6-412b-94c4-fc4d4fa869ea/, DisplayName = &quot;DisplayName3e8b6127-9c93-4735-8e4e-bd99271b1871&quot;, EnvironmentSize = 12909, Guid = 1cca45db-27cc-47b0-a26a-51679d817f8d, Id = 20023, ... }])" time="0.0099561" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: &quot;&quot;)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: &quot;&quot;)" time="0.0042584" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: &quot; &quot;)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: &quot; &quot;)" time="0.0020422" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: null)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: null)" time="0.0111780" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions+WhenTheStoreDeletedApplicationSuccessfully.ReturnsOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions+WhenTheStoreDeletedApplicationSuccessfully.ReturnsOk(environments: [Environment { BackOfficeUri = http://c1a7df66-541c-400b-b41f-3ae2647f18be/, DisplayName = &quot;DisplayName544245cf-626f-4f0a-85c3-3e783cdf7ede&quot;, EnvironmentSize = 90, Guid = d16b5078-8c9f-43d2-8516-be6d6fb1d192, Id = 9, ... }, Environment { BackOfficeUri = http://8506a560-3b48-460e-ac12-d3a6c1fc4061/, DisplayName = &quot;DisplayName1f42aee6-467f-4ed4-899c-ba06c2014ea0&quot;, EnvironmentSize = 8374, Guid = 15886923-edf5-4de8-9ca6-9b4947dd2657, Id = 101, ... }, Environment { BackOfficeUri = http://8eba47b5-5931-4391-b437-138bd9ad33d4/, DisplayName = &quot;DisplayName2f41fbe3-711c-4c55-9040-8817299fad3b&quot;, EnvironmentSize = 9967, Guid = 27d16490-5148-4e3f-a743-57883ce95af2, Id = 23004, ... }])" time="0.0211452" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions+WhenTheApplicationWasNotFoundDuringRotate.ReturnsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions+WhenTheApplicationWasNotFoundDuringRotate.ReturnsNotFound(environment: Environment { BackOfficeUri = http://53e38135-42ff-42b2-af5a-fd05bb005e64/, DisplayName = &quot;DisplayNamee29e6210-1f3b-443d-a1d6-78522a4e9a49&quot;, EnvironmentSize = 209, Guid = 65af9130-4b8a-444e-bd4e-3119f5c72049, Id = 194, ... })" time="0.0329156" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenCouldNotGetIntegrationPermissionsDueToInternalError.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenCouldNotGetIntegrationPermissionsDueToInternalError.ReturnsProblem(getPermissionsException: Kwality.UVault.Auth0.Exceptions.ManagementApiException: Exception of type 'Kwality.UVault.Auth0.Exceptions.ManagementApiException' was thrown., environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = 1e4fac75-8e3d-4cdb-a260-e5cd2b4c6e8e, Id = 1, ... })" time="0.0222033" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenCouldNotGetIntegrationPermissionsDueToInternalError.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenCouldNotGetIntegrationPermissionsDueToInternalError.ReturnsProblem(getPermissionsException: Kwality.UVault.Exceptions.ReadException&#xD;&#xA; ---&gt; System.ArgumentException&#xD;&#xA;   --- End of inner exception stack trace ---, environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = 1e4fac75-8e3d-4cdb-a260-e5cd2b4c6e8e, Id = 1, ... })" time="0.0197060" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenFetchOfAvailablePermissionsFailed.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenFetchOfAvailablePermissionsFailed.ReturnsProblem(getAvailablePermissionsException: Kwality.UVault.Auth0.Exceptions.ManagementApiException: Exception of type 'Kwality.UVault.Auth0.Exceptions.ManagementApiException' was thrown., environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = ca3acf0e-3b29-4785-b5ad-bc5c28b3b4a9, Id = 1, ... })" time="0.0248274" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenFetchOfAvailablePermissionsFailed.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenFetchOfAvailablePermissionsFailed.ReturnsProblem(getAvailablePermissionsException: Kwality.UVault.Exceptions.ReadException&#xD;&#xA; ---&gt; System.ArgumentException&#xD;&#xA;   --- End of inner exception stack trace ---, environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = ca3acf0e-3b29-4785-b5ad-bc5c28b3b4a9, Id = 1, ... })" time="0.0240961" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrations+WhenTheEnvironmentIsFound+WhenTheUserHasNoPermissions.ReturnsForbid" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrations+WhenTheEnvironmentIsFound+WhenTheUserHasNoPermissions.ReturnsForbid(environments: [Environment { BackOfficeUri = http://2462f86c-529d-4929-84fb-63e651266f89/, DisplayName = &quot;DisplayNamebdf5fbc8-e9e2-426f-9814-80e68cb00475&quot;, EnvironmentSize = 24, Guid = 08c24ab1-928b-4491-b04c-465ece7dc46e, Id = 66, ... }, Environment { BackOfficeUri = http://07c7f557-f710-4330-8909-b7628e154934/, DisplayName = &quot;DisplayName3addbefc-68ad-4a74-89e1-62fe4f678c94&quot;, EnvironmentSize = 20422, Guid = 87603ab2-c26c-4ff2-bae4-7da4fa309b24, Id = 42, ... }, Environment { BackOfficeUri = http://52f06d20-1136-4a5b-a74a-52707366062e/, DisplayName = &quot;DisplayName725338e3-1475-418e-81e4-c8910a2389c4&quot;, EnvironmentSize = 24849, Guid = 3d10e418-7072-4078-bb07-aff59f265ebd, Id = 4347, ... }])" time="0.0459471" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesExist+WhenTheUserHasPermissions+WhenTheStoreWasUnableToCreateTheApplication.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesExist+WhenTheUserHasPermissions+WhenTheStoreWasUnableToCreateTheApplication.ReturnsProblem(createException: Kwality.UVault.Auth0.Exceptions.ManagementApiException: Exception of type 'Kwality.UVault.Auth0.Exceptions.ManagementApiException' was thrown., environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = 73073420-c619-46b7-8bdf-7e1be2d3fc50, Id = 1, ... })" time="0.0384024" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesExist+WhenTheUserHasPermissions+WhenTheStoreWasUnableToCreateTheApplication.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesExist+WhenTheUserHasPermissions+WhenTheStoreWasUnableToCreateTheApplication.ReturnsProblem(createException: Kwality.UVault.Exceptions.CreateException&#xD;&#xA; ---&gt; System.ArgumentException&#xD;&#xA;   --- End of inner exception stack trace ---, environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = 73073420-c619-46b7-8bdf-7e1be2d3fc50, Id = 1, ... })" time="0.0171365" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsNotFound.ReturnsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsNotFound.ReturnsNotFound(clientId: &quot;clientIdb9f0aba6-b259-41f1-b546-9c4faaed0bf7&quot;)" time="0.0184997" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenApplicationPermissionsAlreadyExist+WhenApplicationPermissionsAreUpdated.ReturnsOkResultWithPermissions" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenApplicationPermissionsAlreadyExist+WhenApplicationPermissionsAreUpdated.ReturnsOkResultWithPermissions(application: M2MApplication { Key = value95dea6ec-6acf-4fe9-8b6b-3296e1f2f37c }, environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = 3a63a8e1-e3d7-49f0-b8af-ae280f625921, Id = 1, ... }, updatePermissionsModel: [[&quot;template&quot;] = [&quot;read&quot;, &quot;write&quot;]])" time="0.0798365" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenApplicationPermissionsAlreadyExist+WhenApplicationPermissionsAreUpdated.ReturnsOkResultWithPermissions" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenApplicationPermissionsAlreadyExist+WhenApplicationPermissionsAreUpdated.ReturnsOkResultWithPermissions(application: M2MApplication { Key = value95dea6ec-6acf-4fe9-8b6b-3296e1f2f37c }, environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = 3a63a8e1-e3d7-49f0-b8af-ae280f625921, Id = 1, ... }, updatePermissionsModel: [[&quot;template&quot;] = []])" time="0.0272571" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenCouldNotGetIntegrationPermissionsDueToInternalError.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenCouldNotGetIntegrationPermissionsDueToInternalError.ReturnsProblem(getPermissionsException: Kwality.UVault.Auth0.Exceptions.ManagementApiException: Exception of type 'Kwality.UVault.Auth0.Exceptions.ManagementApiException' was thrown., environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = 525e6d74-1aa0-4137-9e5a-6550f75ddd86, Id = 1, ... })" time="0.0212936" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenCouldNotGetIntegrationPermissionsDueToInternalError.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenCouldNotGetIntegrationPermissionsDueToInternalError.ReturnsProblem(getPermissionsException: Kwality.UVault.Exceptions.ReadException&#xD;&#xA; ---&gt; System.ArgumentException&#xD;&#xA;   --- End of inner exception stack trace ---, environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = 525e6d74-1aa0-4137-9e5a-6550f75ddd86, Id = 1, ... })" time="0.0171727" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenIntegrationPermissionsAreGot.ReturnsOkResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenIntegrationPermissionsAreGot.ReturnsOkResult(application: M2MApplication { Key = value152ceff2-8267-4b63-8d67-73ef247fbd78 }, permissions: [M2MPermissions { Key = value0a0664e6-80ec-4326-8534-25973b2324e4 }, M2MPermissions { Key = valuec31e8700-60c8-487f-93f5-a0d3662bf1a6 }], environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = e99b15da-2a6e-4c1f-85eb-4cba2b9ccbea, Id = 1, ... }, expectedPermissionsOrder: [[&quot;media&quot;] = [&quot;read&quot;], [&quot;template&quot;] = [&quot;list&quot;]])" time="0.0335014" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenIntegrationPermissionsAreGot.ReturnsOkResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenIntegrationPermissionsAreGot.ReturnsOkResult(application: M2MApplication { Key = value152ceff2-8267-4b63-8d67-73ef247fbd78 }, permissions: [M2MPermissions { Key = value60dc001c-0361-4c72-8e45-3b1b2983d91f }, M2MPermissions { Key = valuec0d22fa1-ab5b-4489-af2a-b3ad3200eae3 }], environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = e99b15da-2a6e-4c1f-85eb-4cba2b9ccbea, Id = 1, ... }, expectedPermissionsOrder: [])" time="0.0074454" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions.ReturnsOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions.ReturnsOk(environments: [Environment { BackOfficeUri = http://006e9c89-5dd4-4775-a90e-b2d7e373b3dd/, DisplayName = &quot;DisplayName0f6a3c55-dc5a-4e18-a57d-bba67655548b&quot;, EnvironmentSize = 72, Guid = b0723449-4413-4233-a3c8-add59124c068, Id = 144, ... }, Environment { BackOfficeUri = http://d89034a7-62aa-47b5-8ad9-3507bd88b8d6/, DisplayName = &quot;DisplayName93a37e7d-839f-412a-bfb2-39f76e9ac1d0&quot;, EnvironmentSize = 23530, Guid = 9c66bf40-89bf-4596-8a96-f3d011a27446, Id = 100, ... }, Environment { BackOfficeUri = http://683a9de6-fd7e-44e1-89a8-37e8e48ac2d1/, DisplayName = &quot;DisplayNamefceb34a1-509c-456d-b93a-b0b935b2bb6a&quot;, EnvironmentSize = 9677, Guid = 7230a033-1543-40ce-a9ab-60c329c16690, Id = 8432, ... }])" time="0.0094271" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: null)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: null)" time="0.0042449" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: &quot; &quot;)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: &quot; &quot;)" time="0.0019027" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: &quot;&quot;)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: &quot;&quot;)" time="0.0020769" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsNotValid.ReturnsBadRequest(environments: [Environment { BackOfficeUri = http://2faecadb-d381-41f7-b027-8e0c21cbf61c/, DisplayName = &quot;DisplayName1a32ca14-b9c8-4769-9522-b60625646097&quot;, EnvironmentSize = 180, Guid = 5e116cf2-5ac5-4a42-80fb-f6311798646b, Id = 179, ... }, Environment { BackOfficeUri = http://d7a68186-a27c-4bfa-8767-0186c1c4ccc6/, DisplayName = &quot;DisplayName0a9235d7-6f6e-421d-b9da-6cf1010a7240&quot;, EnvironmentSize = 24927, Guid = 05ef2567-e6f4-4cf3-b782-862804d0d801, Id = 176, ... }, Environment { BackOfficeUri = http://790f6ec3-ecb3-4683-972f-dc87c23200f6/, DisplayName = &quot;DisplayName2bcaae9a-ec25-44be-a472-fb22e22c0c70&quot;, EnvironmentSize = 351, Guid = dd8c8737-27ca-4e83-90ed-e043e94a7f94, Id = 9868, ... }])" time="0.0251245" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrations+WhenTheEnvironmentIsFound+WhenTheUserHasPermissions+WhenTheStoreContainsAnApplicationWithTheEnvironmentId.ReturnsOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrations+WhenTheEnvironmentIsFound+WhenTheUserHasPermissions+WhenTheStoreContainsAnApplicationWithTheEnvironmentId.ReturnsOk(environments: [Environment { BackOfficeUri = http://6f28160c-b250-4d31-95a6-f0f50dc1d966/, DisplayName = &quot;DisplayNameb223a7f7-13fe-49d7-b459-ef711ecf503c&quot;, EnvironmentSize = 100, Guid = d511f838-d8ac-4b94-93b2-f0a3d3deb367, Id = 250, ... }, Environment { BackOfficeUri = http://c52bcb9d-2332-4578-88d8-05e483860e4e/, DisplayName = &quot;DisplayName95583036-7446-4399-b131-9fb89c344c26&quot;, EnvironmentSize = 14589, Guid = f5052fef-46af-4d0c-9620-e4d4badb49b1, Id = 236, ... }, Environment { BackOfficeUri = http://2d72fa74-c0f4-4596-8ccb-f32f59885aed/, DisplayName = &quot;DisplayNamea16a2925-584e-4d24-9357-256b0803812c&quot;, EnvironmentSize = 20068, Guid = 1a7ade6a-7c0c-4996-ba26-3048c55764f2, Id = 32424, ... }])" time="0.0462947" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesExist+WhenTheUserHasNoPermissions.ReturnsForbid" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesExist+WhenTheUserHasNoPermissions.ReturnsForbid(environments: [Environment { BackOfficeUri = http://78dd7d31-3973-4bd3-bf68-dc32105f5774/, DisplayName = &quot;DisplayNamec695fcd0-3faa-4d18-95b2-a3c872654f4d&quot;, EnvironmentSize = 119, Guid = 8fea4c89-c941-4b17-85d7-c59c55475c7e, Id = 123, ... }, Environment { BackOfficeUri = http://1510c129-c7d4-42eb-b893-f42ed054cb15/, DisplayName = &quot;DisplayName259c665f-1c91-4c88-bc85-78c72427fbd2&quot;, EnvironmentSize = 12064, Guid = 5454e5cb-080e-423d-8399-d66b06951dc5, Id = 149, ... }, Environment { BackOfficeUri = http://92cd693f-850a-43ed-924c-b636e581271c/, DisplayName = &quot;DisplayNamec061d099-4b00-4fea-80f2-b95730205553&quot;, EnvironmentSize = 23758, Guid = 94fa3dce-e98d-48cf-b3b0-90d52feea054, Id = 24759, ... }])" time="0.0507677" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions+WhenTheStoreWasUnableToRotateTheClientSecretOfTheApplication.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions+WhenTheStoreWasUnableToRotateTheClientSecretOfTheApplication.ReturnsProblem(rotateSecretException: Kwality.UVault.Auth0.Exceptions.ManagementApiException: Exception of type 'Kwality.UVault.Auth0.Exceptions.ManagementApiException' was thrown., environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = 4f8230f3-ae94-429a-a56f-820b330f95a7, Id = 1, ... })" time="0.0181217" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions+WhenTheStoreWasUnableToRotateTheClientSecretOfTheApplication.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions+WhenTheStoreWasUnableToRotateTheClientSecretOfTheApplication.ReturnsProblem(rotateSecretException: Kwality.UVault.Exceptions.ReadException&#xD;&#xA; ---&gt; System.ArgumentException&#xD;&#xA;   --- End of inner exception stack trace ---, environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = 4f8230f3-ae94-429a-a56f-820b330f95a7, Id = 1, ... })" time="0.0252820" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsNotValid.ReturnsBadRequest(clientId: &quot;&quot;)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsNotValid.ReturnsBadRequest(clientId: &quot;&quot;)" time="0.0044011" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsNotValid.ReturnsBadRequest(clientId: null)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsNotValid.ReturnsBadRequest(clientId: null)" time="0.0091232" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsNotValid.ReturnsBadRequest(clientId: &quot; &quot;)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsNotValid.ReturnsBadRequest(clientId: &quot; &quot;)" time="0.0028408" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsValid+WhenTheIntegrationIsFound+WhenIntegrationEnvironmentIsNotFound.ResultShouldBeNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsValid+WhenTheIntegrationIsFound+WhenIntegrationEnvironmentIsNotFound.ResultShouldBeNotFound" time="0.0159766" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetAvailablePermissions+WhenTheUserHasPermissions+WhenTheApiIsFound+WhenTheStoreWasAbleToFetchTheApplication.ReturnsOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetAvailablePermissions+WhenTheUserHasPermissions+WhenTheApiIsFound+WhenTheStoreWasAbleToFetchTheApplication.ReturnsOk(apiModel: Auth0Api { Identifier = &quot;identifier&quot;, Key = key, Scopes = [&quot;template:read&quot;, &quot;template:write&quot;, &quot;template:list&quot;, &quot;media:read&quot;, &quot;media:write&quot;, ...] }, expectedResult: [[&quot;media&quot;] = [&quot;list&quot;, &quot;read&quot;, &quot;write&quot;], [&quot;template&quot;] = [&quot;list&quot;, &quot;read&quot;, &quot;write&quot;]])" time="0.0096975" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetAvailablePermissions+WhenTheUserHasPermissions+WhenTheApiIsFound+WhenTheStoreWasAbleToFetchTheApplication.ReturnsOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetAvailablePermissions+WhenTheUserHasPermissions+WhenTheApiIsFound+WhenTheStoreWasAbleToFetchTheApplication.ReturnsOk(apiModel: Auth0Api { Identifier = &quot;identifier&quot;, Key = key, Scopes = [&quot;media:read&quot;, &quot;media:list&quot;, &quot;template:read:read&quot;, &quot;template&quot;] }, expectedResult: [[&quot;media&quot;] = [&quot;list&quot;, &quot;read&quot;]])" time="0.0026224" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenApplicationPermissionsAreNotExist+WhenApplicationPermissionsCouldNotBeCreated.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenApplicationPermissionsAreNotExist+WhenApplicationPermissionsCouldNotBeCreated.ReturnsProblem(getPermissionsException: Kwality.UVault.Auth0.Exceptions.ManagementApiException: Exception of type 'Kwality.UVault.Auth0.Exceptions.ManagementApiException' was thrown., environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = d0576d68-5f13-492b-b40c-072b9807691c, Id = 1, ... })" time="0.0470266" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenApplicationPermissionsAreNotExist+WhenApplicationPermissionsCouldNotBeCreated.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenApplicationPermissionsAreNotExist+WhenApplicationPermissionsCouldNotBeCreated.ReturnsProblem(getPermissionsException: Kwality.UVault.Exceptions.ReadException&#xD;&#xA; ---&gt; System.ArgumentException&#xD;&#xA;   --- End of inner exception stack trace ---, environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = d0576d68-5f13-492b-b40c-072b9807691c, Id = 1, ... })" time="0.0571647" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenApplicationPermissionsAreNotExist+WhenApplicationPermissionsAreCreated.ReturnsOkResultWithPermissions" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenApplicationPermissionsAreNotExist+WhenApplicationPermissionsAreCreated.ReturnsOkResultWithPermissions(application: M2MApplication { Key = valuebe96434a-1f71-475a-b548-894af09cc656 }, environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = a66eef66-bb35-4b86-9c78-d2483cf77616, Id = 1, ... }, updatePermissionsModel: [[&quot;template&quot;] = [&quot;read&quot;, &quot;write&quot;]])" time="0.0391496" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenApplicationPermissionsAreNotExist+WhenApplicationPermissionsAreCreated.ReturnsOkResultWithPermissions" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenPermissionListIsValid+WhenApplicationPermissionsAreNotExist+WhenApplicationPermissionsAreCreated.ReturnsOkResultWithPermissions(application: M2MApplication { Key = valuebe96434a-1f71-475a-b548-894af09cc656 }, environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = a66eef66-bb35-4b86-9c78-d2483cf77616, Id = 1, ... }, updatePermissionsModel: [[&quot;template&quot;] = []])" time="0.0148371" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrations+WhenTheEnvironmentIsFound+WhenTheUserHasPermissions+WhenTheStoreWasUnableToFetchTheApplication.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrations+WhenTheEnvironmentIsFound+WhenTheUserHasPermissions+WhenTheStoreWasUnableToFetchTheApplication.ReturnsProblem(environments: [Environment { BackOfficeUri = http://f2ccd468-85db-4523-b134-a35796404166/, DisplayName = &quot;DisplayNamea32c8533-e13d-4950-b5ab-8f165d071463&quot;, EnvironmentSize = 226, Guid = 9a6c380d-4d26-4921-ba04-e795ca27ee39, Id = 233, ... }, Environment { BackOfficeUri = http://038ba6ee-86bc-4af6-81b9-bce80891fc33/, DisplayName = &quot;DisplayNameb408655a-b906-4d4a-bf7c-648bfe3edf95&quot;, EnvironmentSize = 31673, Guid = 5de292b4-2d5d-4dee-b92f-a8f0069dca00, Id = 214, ... }, Environment { BackOfficeUri = http://9276512d-0d5e-48a5-b907-774713729ce0/, DisplayName = &quot;DisplayNamea4a1fad1-510e-43d2-872c-b297cc9905e6&quot;, EnvironmentSize = 26493, Guid = 73060bee-5ee3-4eb5-9546-b9efa2db8f1a, Id = 24412, ... }])" time="0.0237869" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrations+WhenTheEnvironmentIsFound+WhenTheUserHasPermissions+WhenTheStoreContainsApplicationsButNoneHaveTheEnvironmentId.ReturnsOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrations+WhenTheEnvironmentIsFound+WhenTheUserHasPermissions+WhenTheStoreContainsApplicationsButNoneHaveTheEnvironmentId.ReturnsOk(environments: [Environment { BackOfficeUri = http://0c33d340-30c4-4e56-bad3-d52b574d5c19/, DisplayName = &quot;DisplayNameeff1c523-9946-4467-9edf-a2d841a6bd74&quot;, EnvironmentSize = 66, Guid = 583a85d5-a580-4640-be93-0fb2c873b207, Id = 172, ... }, Environment { BackOfficeUri = http://56253eba-7491-4fd5-a0a0-957921a07bc8/, DisplayName = &quot;DisplayName1b1744bd-6c6d-42ee-ad16-4dd7576384a7&quot;, EnvironmentSize = 26671, Guid = 435b5349-3a73-4c40-bf5d-61119f28f17c, Id = 131, ... }, Environment { BackOfficeUri = http://b3792be6-751f-429a-a099-c87194952b92/, DisplayName = &quot;DisplayName57a07751-9f22-4f76-beae-f59ba512bbdf&quot;, EnvironmentSize = 515, Guid = e5866c68-e90e-4354-933a-e0f4cc125dbb, Id = 29933, ... }])" time="0.0940559" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions+WhenTheStoreRotatedClientSecretSuccessfully.ReturnsOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasPermissions+WhenTheStoreRotatedClientSecretSuccessfully.ReturnsOk(environments: [Environment { BackOfficeUri = http://e9d537e2-9cce-42a4-9228-32d61fa2bce0/, DisplayName = &quot;DisplayNamef38df2d4-9783-426f-9384-df2b53da1141&quot;, EnvironmentSize = 20, Guid = 007b618e-ce37-449d-87c5-8192ae54460c, Id = 229, ... }, Environment { BackOfficeUri = http://456f1e71-94fc-499e-b400-2bb0c1de76fd/, DisplayName = &quot;DisplayName3066dfab-9c01-4a95-8344-bde03574fddd&quot;, EnvironmentSize = 14370, Guid = acfc7978-11d4-4eea-8c03-6aac8b05df2f, Id = 82, ... }, Environment { BackOfficeUri = http://c964204a-fad1-49b0-aafe-84234986a7f2/, DisplayName = &quot;DisplayName7d7b875a-a7e0-4ed9-a921-aeba9f41403c&quot;, EnvironmentSize = 6584, Guid = 3ee94a25-0120-4114-b4d5-9bdc0f917ad6, Id = 28080, ... }])" time="0.0117609" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetAvailablePermissions+WhenTheUserHasPermissions+WhenTheApiIsFound+WhenTheStoreWasUnableToFetchTheApplication.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetAvailablePermissions+WhenTheUserHasPermissions+WhenTheApiIsFound+WhenTheStoreWasUnableToFetchTheApplication.ReturnsProblem" time="0.0132306" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesExist+WhenTheUserHasPermissions+WhenTheStoreWasAbleToCreateTheApplication+WhenTheStoreWasUnableToCreateInitialPermissions.ReturnsOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesExist+WhenTheUserHasPermissions+WhenTheStoreWasAbleToCreateTheApplication+WhenTheStoreWasUnableToCreateInitialPermissions.ReturnsOk(createModel: CreateIntegrationModel { Description = &quot;new integration description&quot;, EnvironmentId = 4315b43e-4613-4aaf-9f36-2b56e8a143ee, Name = &quot;new integration&quot; }, updatePermissionsException: Kwality.UVault.Auth0.Exceptions.ManagementApiException: Exception of type 'Kwality.UVault.Auth0.Exceptions.ManagementApiException' was thrown., integrationEnvironment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = 4315b43e-4613-4aaf-9f36-2b56e8a143ee, Id = 1, ... })" time="0.0142387" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesExist+WhenTheUserHasPermissions+WhenTheStoreWasAbleToCreateTheApplication+WhenTheStoreWasUnableToCreateInitialPermissions.ReturnsOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesExist+WhenTheUserHasPermissions+WhenTheStoreWasAbleToCreateTheApplication+WhenTheStoreWasUnableToCreateInitialPermissions.ReturnsOk(createModel: CreateIntegrationModel { Description = &quot;new integration description&quot;, EnvironmentId = 4315b43e-4613-4aaf-9f36-2b56e8a143ee, Name = &quot;new integration&quot; }, updatePermissionsException: Kwality.UVault.Exceptions.ReadException&#xD;&#xA; ---&gt; System.ArgumentException&#xD;&#xA;   --- End of inner exception stack trace ---, integrationEnvironment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = 4315b43e-4613-4aaf-9f36-2b56e8a143ee, Id = 1, ... })" time="0.0175778" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesNotExist.ReturnsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesNotExist.ReturnsNotFound" time="0.0187982" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasNoPermissions.ReturnsForbid" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasNoPermissions.ReturnsForbid(environments: [Environment { BackOfficeUri = http://8116dbdd-1c5c-45af-90ea-0355a8bc09c3/, DisplayName = &quot;DisplayName1ac684cf-ae36-438e-8fdd-dbbc4b73c1f7&quot;, EnvironmentSize = 205, Guid = e00969b9-11a5-4b2b-8104-eff3befdbbb8, Id = 235, ... }, Environment { BackOfficeUri = http://b2d26068-3488-4c71-8373-4a7bcf159d57/, DisplayName = &quot;DisplayName06727d32-68fe-4bdf-9c63-bb3f7e0ef895&quot;, EnvironmentSize = 18757, Guid = bef554ff-6f83-4141-9811-aaa8d04c2c19, Id = 220, ... }, Environment { BackOfficeUri = http://887d031a-901d-4570-a911-8db1a2fde4ad/, DisplayName = &quot;DisplayNamed96bd3b4-c67b-4f7d-b38d-4cfe9dc32c11&quot;, EnvironmentSize = 1685, Guid = e2f6de20-9ce7-4962-81bc-c2649e7bb7ec, Id = 25122, ... }])" time="0.0171301" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsValid+WhenTheIntegrationIsNotFound.ReturnsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsValid+WhenTheIntegrationIsNotFound.ReturnsNotFound(clientId: &quot;clientId684291c5-f6ef-47cf-aba9-7c342c6b3c87&quot;)" time="0.0045102" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: &quot; &quot;)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: &quot; &quot;)" time="0.0043811" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: &quot;&quot;)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: &quot;&quot;)" time="0.0020009" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: null)" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+DeleteIntegration+WhenTheClientIdIsNotValid.ReturnsBadRequest(clientId: null)" time="0.0545684" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsValid+WhenIntegrationExists+WhenIntegrationEnvironmentIsNotExist.ReturnsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsValid+WhenIntegrationExists+WhenIntegrationEnvironmentIsNotExist.ReturnsNotFound(application: M2MApplication { Key = value5cb451da-b87e-45bc-b5b9-5e57651f0db9 })" time="0.0075764" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrations+WhenTheEnvironmentIsFound+WhenTheUserHasPermissions+WhenTheStoreContainsNoApplications.ReturnsOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrations+WhenTheEnvironmentIsFound+WhenTheUserHasPermissions+WhenTheStoreContainsNoApplications.ReturnsOk(environments: [Environment { BackOfficeUri = http://a730ff73-7b8d-47a9-92b2-80cd1ebbb777/, DisplayName = &quot;DisplayName5d6bdade-eab4-48cf-b188-fdc6beea566f&quot;, EnvironmentSize = 166, Guid = 30d1478f-963e-433a-b9a2-24413915db34, Id = 173, ... }, Environment { BackOfficeUri = http://d018d4bb-c503-4425-bb1e-c4836fc65bbb/, DisplayName = &quot;DisplayName252f06e7-e015-4615-b6aa-8eccc633ec8b&quot;, EnvironmentSize = 29078, Guid = 46ae57b1-430c-41b5-9efa-dec9e8c1617c, Id = 177, ... }, Environment { BackOfficeUri = http://2a472358-1ff9-4335-ac1e-d26b58211b5c/, DisplayName = &quot;DisplayNamebc3cc202-e950-47d8-a302-2499461e529f&quot;, EnvironmentSize = 14640, Guid = 1a695692-85c7-4303-b621-83846667adec, Id = 29878, ... }])" time="0.0096361" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetAvailablePermissions+WhenTheUserHasPermissions+WhenTheApiIsNotFound.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetAvailablePermissions+WhenTheUserHasPermissions+WhenTheApiIsNotFound.ReturnsProblem" time="0.0104415" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenMoreThanOnePermissionWereReturned.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasPermissions+WhenMoreThanOnePermissionWereReturned.ReturnsProblem(environment: Environment { BackOfficeUri = http://5e3ba3fb-0152-4085-894b-59610ddd8e72/, DisplayName = &quot;DisplayNamed8e1128e-c349-4a3c-a00c-b9c94ef457ca&quot;, EnvironmentSize = 203, Guid = 27043574-0d61-4d18-bb65-f8876d29736b, Id = 71, ... })" time="0.0218037" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest(updateModel: null)" time="0.0046908" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest(updateModel: [])" time="0.0026261" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest(updateModel: [[&quot; &quot;] = [&quot;read&quot;]])" time="0.0117788" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest(updateModel: [[&quot;media&quot;] = [&quot; &quot;]])" time="0.0030638" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest(updateModel: [[&quot;media&quot;] = [&quot;scope&quot;, &quot;scope&quot;]])" time="0.0024258" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest(updateModel: [[&quot;media&quot;] = [&quot;scope &quot;]])" time="0.0026164" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest(updateModel: [[&quot; media&quot;] = [&quot;scope&quot;]])" time="0.0089228" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest(updateModel: [[&quot;&quot;] = [&quot;read&quot;]])" time="0.0024700" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenUpdateModelIsNotValid.ReturnsBadRequest(updateModel: [[&quot;media&quot;] = [&quot;read&quot;, &quot; &quot;]])" time="0.0026105" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesExist+WhenTheUserHasPermissions+WhenTheStoreWasAbleToCreateTheApplication+WhenTheStoreWasAbleToCreateInitialPermissions.ReturnsOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesExist+WhenTheUserHasPermissions+WhenTheStoreWasAbleToCreateTheApplication+WhenTheStoreWasAbleToCreateInitialPermissions.ReturnsOk(createModel: CreateIntegrationModel { Description = &quot;new integration description&quot;, EnvironmentId = a0a8d201-88aa-41b8-baae-89bcfc632d61, Name = &quot;new integration&quot; }, integrationEnvironment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = a0a8d201-88aa-41b8-baae-89bcfc632d61, Id = 1, ... })" time="0.0199114" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesExist+WhenTheUserHasPermissions+WhenTheStoreWasAbleToCreateTheApplication+WhenTheStoreWasAbleToCreateInitialPermissions.ReturnsOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesExist+WhenTheUserHasPermissions+WhenTheStoreWasAbleToCreateTheApplication+WhenTheStoreWasAbleToCreateInitialPermissions.ReturnsOk(createModel: CreateIntegrationModel { Description = null, EnvironmentId = a0a8d201-88aa-41b8-baae-89bcfc632d61, Name = &quot;new integration&quot; }, integrationEnvironment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = a0a8d201-88aa-41b8-baae-89bcfc632d61, Id = 1, ... })" time="0.0212258" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesExist+WhenTheUserHasPermissions+WhenTheStoreWasAbleToCreateTheApplication+WhenTheStoreWasAbleToCreateInitialPermissions.ReturnsOk" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+CreateIntegration+WhenTheCreationModelIsValid+WhenTheEnvironmentDoesExist+WhenTheUserHasPermissions+WhenTheStoreWasAbleToCreateTheApplication+WhenTheStoreWasAbleToCreateInitialPermissions.ReturnsOk(createModel: CreateIntegrationModel { Description = &quot;&quot;, EnvironmentId = a0a8d201-88aa-41b8-baae-89bcfc632d61, Name = &quot;new integration&quot; }, integrationEnvironment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = a0a8d201-88aa-41b8-baae-89bcfc632d61, Id = 1, ... })" time="0.0165184" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasNoPermissions.ReturnsForbid" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegration+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheIntegrationOfTheEnvironmentIsInTheDatabase+WhenTheUserHasNoPermissions.ReturnsForbid(environments: [Environment { BackOfficeUri = http://c97fc8e0-56c0-4444-a657-e9407e278a65/, DisplayName = &quot;DisplayName9690f35c-951f-40ad-b5c5-e3aeb6fed1f7&quot;, EnvironmentSize = 162, Guid = ddb1f296-684b-4344-84e3-792c028b4fa4, Id = 229, ... }, Environment { BackOfficeUri = http://7a7f2f7c-78bf-4f25-bbb6-d0ed7192d5a3/, DisplayName = &quot;DisplayName0405a6bd-4927-4c05-9b54-9cedf27c08e5&quot;, EnvironmentSize = 3214, Guid = b4479c24-c59c-47cc-ad42-ae92e74280bc, Id = 113, ... }, Environment { BackOfficeUri = http://56d8ffc7-3c09-440d-be06-56b549071b3e/, DisplayName = &quot;DisplayNameb7f0bf33-5906-42b2-a192-723e4f163f97&quot;, EnvironmentSize = 4856, Guid = 67d78088-1936-46a1-af41-b67f3c0c7d96, Id = 21677, ... }])" time="0.0171632" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetAvailablePermissions+WhenTheUserHasNoPermissions.ReturnsForbid" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetAvailablePermissions+WhenTheUserHasNoPermissions.ReturnsForbid" time="0.0126048" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsValid+WhenTheIntegrationIsFound+WhenIntegrationEnvironmentIsFound+WhenTheUserHasPermissions+WhenIntegrationUpdateFailed.ResultShouldBeProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsValid+WhenTheIntegrationIsFound+WhenIntegrationEnvironmentIsFound+WhenTheUserHasPermissions+WhenIntegrationUpdateFailed.ResultShouldBeProblem(updateException: Kwality.UVault.Auth0.Exceptions.ManagementApiException: Exception of type 'Kwality.UVault.Auth0.Exceptions.ManagementApiException' was thrown., environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = c7b418be-9624-477a-bfe3-f655e703fd60, Id = 1, ... })" time="0.0214243" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsValid+WhenTheIntegrationIsFound+WhenIntegrationEnvironmentIsFound+WhenTheUserHasPermissions+WhenIntegrationUpdateFailed.ResultShouldBeProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegration+WhenTheUpdateModelIsValid+WhenTheIntegrationIsFound+WhenIntegrationEnvironmentIsFound+WhenTheUserHasPermissions+WhenIntegrationUpdateFailed.ResultShouldBeProblem(updateException: Kwality.UVault.Exceptions.UpdateException&#xD;&#xA; ---&gt; System.ArgumentException&#xD;&#xA;   --- End of inner exception stack trace ---, environment: Environment { BackOfficeUri = null, DisplayName = null, EnvironmentSize = 0, Guid = c7b418be-9624-477a-bfe3-f655e703fd60, Id = 1, ... })" time="0.0085235" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsValid+WhenIntegrationIsNotExist.ReturnsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+GetIntegrationPermissions+WhenClientIdIsValid+WhenIntegrationIsNotExist.ReturnsNotFound(clientId: &quot;clientId772cab4f-7ca7-47bf-ab6d-57338d0465a5&quot;)" time="0.0046351" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasNoPermissions.ReturnsForbid" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+UpdateIntegrationPermissions+WhenClientIdAndUpdateModelAreValid+WhenIntegrationExists+WhenIntegrationEnvironmentExists+WhenUserHasNoPermissions.ReturnsForbid(environments: [Environment { BackOfficeUri = http://af2fc527-597c-42a8-bf8c-46e12d32f141/, DisplayName = &quot;DisplayName6afa2d49-c5ec-4734-8731-0ee49e7ae42b&quot;, EnvironmentSize = 63, Guid = 587362a2-fa46-4903-a170-d608751c887b, Id = 90, ... }, Environment { BackOfficeUri = http://fc92d5ba-06ad-4344-bfac-5efbb739ddc2/, DisplayName = &quot;DisplayName52eddb51-bf37-4df9-bf92-cf981fc5bd03&quot;, EnvironmentSize = 2801, Guid = 2d8acba4-ffa0-4c94-8f72-0e46d27c0723, Id = 67, ... }, Environment { BackOfficeUri = http://ac1d3e3f-8f18-4782-ba2d-f1c310d56478/, DisplayName = &quot;DisplayName861f1a5d-c355-48f9-94aa-4f87d20fe53b&quot;, EnvironmentSize = 6923, Guid = f481ea10-e72b-4d2b-9469-37c24782639d, Id = 28811, ... }])" time="0.0085924" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers.IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheStoreWasUnableToFetchTheApplication.ReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Handlers" method="IntegrationHandlerTests+RotateClientSecret+WhenTheClientIdIsValid+WhenTheIntegrationIsFound+WhenTheStoreWasUnableToFetchTheApplication.ReturnsProblem(clientId: &quot;clientId864a35b2-979b-4bd6-b9a1-5476dfa4ff6b&quot;)" time="0.0207451" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="25" passed="25" failed="0" skipped="0" name="Test collection for CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" time="0.541">
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MPermissionsCreateOperationMapperTests+Create+WhenPermissionsCanNotBeMapped.RaisesCreateException" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MPermissionsCreateOperationMapperTests+Create+WhenPermissionsCanNotBeMapped.RaisesCreateException" time="0.0582516" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MApplicationCreateOperationMapperTests+Create+WhenTheApplicationCanBeMappedToM2MApplication.ReturnsM2MApplication" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MApplicationCreateOperationMapperTests+Create+WhenTheApplicationCanBeMappedToM2MApplication.ReturnsM2MApplication" time="0.1096942" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MPermissionsGetAllFilterTests+Create+WhenTheDestinationIsForTheInMemoryStore.ReturnsCorrectFilter" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MPermissionsGetAllFilterTests+Create+WhenTheDestinationIsForTheInMemoryStore.ReturnsCorrectFilter(clientId: &quot;clientId54047fcd-2aa2-4b12-8105-69fd603ab8e8&quot;, audience: &quot;audienceafe2454b-b288-4560-8ed4-14d31ed6c53a&quot;)" time="0.0507195" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MApplicationMapperTests+Map+WhenTheClientCanBeMapped.ReturnsM2MModel" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MApplicationMapperTests+Map+WhenTheClientCanBeMapped.ReturnsM2MModel(environmentId: 38c40853-37a8-4df4-8169-8bf96ba57f53)" time="0.0320218" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MPermissionsMapperTests+Map.ReturnsM2MModel" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MPermissionsMapperTests+Map.ReturnsM2MModel(grant: ClientGrant { Audience = &quot;Audiencedc517269-86c9-4aff-acd3-60510837fa2e&quot;, ClientId = &quot;ClientId070cb853-3aef-4079-b017-ab0dbdf6d0a1&quot;, Id = &quot;Id891abfec-1655-48e8-b876-3bc04929b757&quot;, Scope = [&quot;2b0bcae3-2bdb-4597-bc9d-1e8fcc7c5305&quot;, &quot;4dd36510-d3c5-4f2a-bd71-931eac77eba3&quot;, &quot;57bca5ff-f2b4-4bdf-bcd5-5a2555ca5bed&quot;] })" time="0.0029797" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MPermissionsGetAllFilterTests+Create+WhenTheFilterCanNotBeCreated.RaisesCreateException" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MPermissionsGetAllFilterTests+Create+WhenTheFilterCanNotBeCreated.RaisesCreateException" time="0.0159757" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MPermissionsUpdateOperationMapperTests+TheCreateMethod+WhenTheDestinationIsForTheAuth0Store.ReturnsClientGrantUpdateRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MPermissionsUpdateOperationMapperTests+TheCreateMethod+WhenTheDestinationIsForTheAuth0Store.ReturnsClientGrantUpdateRequest" time="0.0030591" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MPermissionsGetAllFilterTests+Create+WhenTheDestinationIsForTheAuth0Store.ReturnsCorrectFilter" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MPermissionsGetAllFilterTests+Create+WhenTheDestinationIsForTheAuth0Store.ReturnsCorrectFilter(clientId: &quot;clientId368efbeb-34e7-4b8e-b443-ed6b23df341b&quot;, audience: &quot;audience5a2d1c97-c4e9-4471-a684-b067e7faa65c&quot;)" time="0.0051799" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MPermissionsCreateOperationMapperTests+Create+WhenTheDestinationIsForTheAuth0Store.ReturnsClientGrantCreateRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MPermissionsCreateOperationMapperTests+Create+WhenTheDestinationIsForTheAuth0Store.ReturnsClientGrantCreateRequest(audience: &quot;audience5d3c2db6-7713-49d0-ad57-39ee54398e52&quot;)" time="0.0022003" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MApplicationUpdateOperationMapperTests+TheCreateMethod+WhenTheApplicationCanBeMappedToM2MApplication.ReturnsM2MApplication" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MApplicationUpdateOperationMapperTests+TheCreateMethod+WhenTheApplicationCanBeMappedToM2MApplication.ReturnsM2MApplication" time="0.0096941" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MApplicationGetAllFilterTests+Create+WhenTheDestinationIsForTheAuth0Store.ReturnsCorrectFilter" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MApplicationGetAllFilterTests+Create+WhenTheDestinationIsForTheAuth0Store.ReturnsCorrectFilter" time="0.0127791" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MApplicationMapperTests+Map+WhenTheClientHasAnInvalidEnvironmentIdInTheMetaData.RaisesInvalidDataException" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MApplicationMapperTests+Map+WhenTheClientHasAnInvalidEnvironmentIdInTheMetaData.RaisesInvalidDataException" time="0.0242227" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MPermissionsUpdateOperationMapperTests+TheCreateMethod+WhenPermissionsCanNotBeMapped.ThrowsCreateException" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MPermissionsUpdateOperationMapperTests+TheCreateMethod+WhenPermissionsCanNotBeMapped.ThrowsCreateException" time="0.0175877" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MApplicationMapperTests+Map+WhenTheClientHasNoMetaData.RaisesInvalidDataException" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MApplicationMapperTests+Map+WhenTheClientHasNoMetaData.RaisesInvalidDataException" time="0.0140453" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MPermissionsUpdateOperationMapperTests+TheCreateMethod+WhenTheDestinationIsForTheInMemoryStore.ReturnsM2MApplication" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MPermissionsUpdateOperationMapperTests+TheCreateMethod+WhenTheDestinationIsForTheInMemoryStore.ReturnsM2MApplication" time="0.0020661" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MApplicationGetAllFilterTests+Create+WhenTheFilterCanNotBeCreated.RaisesCreateException" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MApplicationGetAllFilterTests+Create+WhenTheFilterCanNotBeCreated.RaisesCreateException" time="0.0188066" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MApplicationCreateOperationMapperTests+Create+WhenTheApplicationCanBeMappedToClientCreateRequest.ReturnsClientCreateRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MApplicationCreateOperationMapperTests+Create+WhenTheApplicationCanBeMappedToClientCreateRequest.ReturnsClientCreateRequest" time="0.0250802" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MApplicationUpdateOperationMapperTests+TheCreateMethod+WhenTheApplicationCanNotBeMapped.ThrowsCreateException" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MApplicationUpdateOperationMapperTests+TheCreateMethod+WhenTheApplicationCanNotBeMapped.ThrowsCreateException" time="0.0052692" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MApplicationCreateOperationMapperTests+Create+WhenTheApplicationCanNotBeMapped.RaisesCreateException" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MApplicationCreateOperationMapperTests+Create+WhenTheApplicationCanNotBeMapped.RaisesCreateException" time="0.0211901" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MApplicationGetAllFilterTests+Create+WhenTheDestinationIsForTheInMemoryStore.ReturnsCorrectFilter" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MApplicationGetAllFilterTests+Create+WhenTheDestinationIsForTheInMemoryStore.ReturnsCorrectFilter" time="0.0047802" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MPermissionsCreateOperationMapperTests+Create+WhenTheDestinationIsForTheInMemoryStore.ReturnsM2MPermissions" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MPermissionsCreateOperationMapperTests+Create+WhenTheDestinationIsForTheInMemoryStore.ReturnsM2MPermissions" time="0.0101389" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MApplicationUpdateOperationMapperTests+TheCreateMethod+WhenTheApplicationCanBeMappedToClientUpdateRequest.ReturnsClientCreateRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MApplicationUpdateOperationMapperTests+TheCreateMethod+WhenTheApplicationCanBeMappedToClientUpdateRequest.ReturnsClientCreateRequest" time="0.0036178" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.Auth0ApiMapperTests+Map.ReturnsApiModel" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="Auth0ApiMapperTests+Map.ReturnsApiModel" time="0.0070969" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MApplicationMapperTests+Map+WhenClientIsNotM2M.RaisesInvalidDataException" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MApplicationMapperTests+Map+WhenClientIsNotM2M.RaisesInvalidDataException" time="0.0621674" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers.M2MApplicationMapperTests+Map+WhenTheClientHasNoEnvironmentIdInTheMetaData.RaisesInvalidDataException" type="CHILI.GraFx.Platform.API.Tests.Modules.Integration.Mappers" method="M2MApplicationMapperTests+Map+WhenTheClientHasNoEnvironmentIdInTheMetaData.RaisesInvalidDataException" time="0.0228043" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for CHILI.GraFx.Platform.API.Tests.Modules.Roles.Handlers" time="0.004">
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Roles.Handlers.RolesHandlerTests+TheGetRolesFunction.ReturnsListOfEnvironmentRoles" type="CHILI.GraFx.Platform.API.Tests.Modules.Roles.Handlers" method="RolesHandlerTests+TheGetRolesFunction.ReturnsListOfEnvironmentRoles" time="0.0034465" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Roles.Handlers.RolesHandlerTests+TheGetEnvironmentRolesFunction.ReturnsListOfEnvironmentRoles" type="CHILI.GraFx.Platform.API.Tests.Modules.Roles.Handlers" method="RolesHandlerTests+TheGetEnvironmentRolesFunction.ReturnsListOfEnvironmentRoles(handler: RolesHandler { })" time="0.0008855" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for CHILI.GraFx.Platform.API.Tests.Modules.ServerInfo.Handlers" time="0.002">
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.ServerInfo.Handlers.InfoHandlerTests+TheGetInfoFunction.TheResultShouldEqualsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.ServerInfo.Handlers" method="InfoHandlerTests+TheGetInfoFunction.TheResultShouldEqualsBadRequest(assemblyVersionReaderMock: Mock&lt;IAssemblyVersionReader:1&gt;, assemblyVersion: &quot;assemblyVersione246f5b0-178f-41ca-a61e-e3e85a4495b&quot;..., handler: InfoHandler { })" time="0.0021671" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="49" passed="49" failed="0" skipped="0" name="Test collection for CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" time="0.516">
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfOnlyOneDateIsProvided.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfOnlyOneDateIsProvided.ReturnsHttpBadRequest(startDate: null, endDate: &quot;2002-01-30&quot;, groupBy: &quot;month&quot;, subscriptionId: 13, handler: SubscriptionHandler { })" time="0.0207618" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfOnlyOneDateIsProvided.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfOnlyOneDateIsProvided.ReturnsHttpBadRequest(startDate: &quot;2002-01-30&quot;, endDate: null, groupBy: &quot;year&quot;, subscriptionId: 12, handler: SubscriptionHandler { })" time="0.0001477" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsFound+WhenAuthenticatedUserHasNoAccessToSubscription.ReturnsHttpForbidden" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsFound+WhenAuthenticatedUserHasNoAccessToSubscription.ReturnsHttpForbidden(authSubscriptionManager: Mock&lt;IAuthenticatedSubscriptionManager:15&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:47&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:65&gt;, id: 16407116-d5be-4445-ba15-82b1c0e1c80c, testUsers: [UserModel { AvatarLink = &quot;AvatarLink8d3bdcc1-6f9d-4864-9a1b-0e412c878fc6&quot;, Email = &quot;Email8444e2b3-d4f3-4802-ad53-83637f74502b&quot;, FirstName = &quot;FirstName2187fc35-1865-41f5-8e3d-9c6cbb5258ee&quot;, HasFullAccess = True, Id = &quot;Id11c4ed65-1747-4a73-90b9-8ad574efec4a&quot;, ... }, UserModel { AvatarLink = &quot;AvatarLinkd07f5977-17bd-425e-b605-20721dca7a1f&quot;, Email = &quot;Emaila87f9646-e011-441b-9fe0-a82e48ee6d29&quot;, FirstName = &quot;FirstNamef835017a-01da-41c0-93ce-dce1392a7d0f&quot;, HasFullAccess = False, Id = &quot;Id67bbe7cc-b891-489d-8b4f-1968241ff669&quot;, ... }, UserModel { AvatarLink = &quot;AvatarLink846fc12b-748d-4ec5-a72a-a5059add0b2e&quot;, Email = &quot;Email0b5bb8bc-bfec-491d-9c62-27fdd4723e5c&quot;, FirstName = &quot;FirstNamea0bb8903-133a-4b02-b979-57791805cda6&quot;, HasFullAccess = True, Id = &quot;Idca605db1-db12-4b16-a5c3-26e53cb1ce39&quot;, ... }], handler: SubscriptionHandler { })" time="0.0405721" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsNotFoundInSubscriptionToEnvironmentsMap.ReturnsHttpNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsNotFoundInSubscriptionToEnvironmentsMap.ReturnsHttpNotFound(authSubscriptionManager: Mock&lt;IAuthenticatedSubscriptionManager:17&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:51&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:73&gt;, id: af72a66c-b5f8-4100-b4ca-5cf338ef8ed9, testUsers: [UserModel { AvatarLink = &quot;AvatarLink5ac8ea0f-7845-4bd4-ba33-8223ba647732&quot;, Email = &quot;Emaila250ea15-1432-4578-9cca-4a7cef8fa56a&quot;, FirstName = &quot;FirstName80dbeb09-b4a9-48d7-adca-25e6ddf229cd&quot;, HasFullAccess = True, Id = &quot;Id9f79a22e-0f9a-4d88-9b85-1ebbb3ac89bd&quot;, ... }, UserModel { AvatarLink = &quot;AvatarLinka41a1491-5e66-41b0-985d-2f9b18c25502&quot;, Email = &quot;Email055afda7-714a-4baf-bbb3-961329a66e8e&quot;, FirstName = &quot;FirstNamee3028866-5ae9-4f63-b797-0fede9fcc09c&quot;, HasFullAccess = False, Id = &quot;Id6652bb33-eee6-4cd3-ae3e-e60dc8ff9e99&quot;, ... }, UserModel { AvatarLink = &quot;AvatarLinkd58d7c75-b8b0-4189-bce1-1a25513d6707&quot;, Email = &quot;Email2d18d5e5-bc9f-43a1-80f7-14987ca54d0f&quot;, FirstName = &quot;FirstNamedd18a64c-1091-4910-94a4-c1acb154fac9&quot;, HasFullAccess = True, Id = &quot;Id9b63d73e-0c0d-4b48-976e-213e9bc0fdbf&quot;, ... }], handler: SubscriptionHandler { })" time="0.0145497" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetByIdAsyncMethod+WhenSubscriptionIsFound+WhenUserHasRequiredPermissions.ReturnsHttpOkWithSubscription" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetByIdAsyncMethod+WhenSubscriptionIsFound+WhenUserHasRequiredPermissions.ReturnsHttpOkWithSubscription(subscriptionId: 176, subscriptionModel: SubscriptionModel { BillingClientContact = &quot;BillingClientContact69bd2e84-eb43-43f1-a2a7-337e26&quot;..., ClientName = &quot;ClientName47c02671-2ee5-4593-aa7a-0eaaae98ab38&quot;, EndDate = Thursday, 30 September 2021, Environments = [SubscriptionEnvironmentModel { ... }, SubscriptionEnvironmentModel { ... }, SubscriptionEnvironmentModel { ... }], Id = 22, ... }, authRuleValidator: Mock&lt;IAuthRuleValidator:42&gt;, subscriptionManagerMocked: Mock&lt;ISubscriptionManager:49&gt;, handler: SubscriptionHandler { })" time="0.0797013" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsFound+WhenSubscriptionIsAccessible+WhenTheGroupByIsYear.ReturnsHttpOkWithSubscriptionRendersGroupedByMonth" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsFound+WhenSubscriptionIsAccessible+WhenTheGroupByIsYear.ReturnsHttpOkWithSubscriptionRendersGroupedByMonth(startDate: null, endDate: null, top: 5, subscriptionId: 58, authRuleValidator: Mock&lt;IAuthRuleValidator:45&gt;, subscriptionRendersModels: [SubscriptionRendersModel { DateTime = 2025-03-08T07:23:47.8062207, Environments = [...], TotalRenders = 32 }, SubscriptionRendersModel { DateTime = 2022-03-20T05:05:06.9294227, Environments = [...], TotalRenders = 187 }, SubscriptionRendersModel { DateTime = 2024-08-03T11:15:42.1410091, Environments = [...], TotalRenders = 232 }], subscriptionManagerMocked: Mock&lt;ISubscriptionManager:52&gt;, handler: SubscriptionHandler { })" time="0.0403540" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsFound+WhenSubscriptionIsAccessible+WhenTheGroupByIsYear.ReturnsHttpOkWithSubscriptionRendersGroupedByMonth" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsFound+WhenSubscriptionIsAccessible+WhenTheGroupByIsYear.ReturnsHttpOkWithSubscriptionRendersGroupedByMonth(startDate: &quot;2001-01-01&quot;, endDate: &quot;2002-01-01&quot;, top: null, subscriptionId: 192, authRuleValidator: Mock&lt;IAuthRuleValidator:46&gt;, subscriptionRendersModels: [SubscriptionRendersModel { DateTime = 2022-10-06T15:31:58.7920711, Environments = [...], TotalRenders = 135 }, SubscriptionRendersModel { DateTime = 2023-09-19T08:23:35.6831665, Environments = [...], TotalRenders = 78 }, SubscriptionRendersModel { DateTime = 2023-10-25T03:31:22.9816618, Environments = [...], TotalRenders = 30 }], subscriptionManagerMocked: Mock&lt;ISubscriptionManager:53&gt;, handler: SubscriptionHandler { })" time="0.0046162" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsNotFoundWhenGettingSubscriptionDetails.ReturnsHttpNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsNotFoundWhenGettingSubscriptionDetails.ReturnsHttpNotFound(authenticatedUser: Mock&lt;IAuthenticatedUser:76&gt;, manager: Mock&lt;IAuthenticatedSubscriptionManager:20&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:55&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:47&gt;, handler: SubscriptionHandler { }, id: c9bc20f4-08af-4ffc-b50a-3683be11d9f0)" time="0.0060183" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetSubscriptionEnvironmentRolesMethod+WhenAuthenticatedUserHasAccessToSubscription.ReturnsCorrectResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetSubscriptionEnvironmentRolesMethod+WhenAuthenticatedUserHasAccessToSubscription.ReturnsCorrectResult(subscriptionEnvironments: SuccessResult`1 { IsError = False, IsSuccess = True }, expectedType: typeof(Microsoft.AspNetCore.Http.Result.OkObjectResult), expectedResult: OkObjectResult { ContentType = null, StatusCode = 200, Value = [EA, EU] }, manager: Mock&lt;ISubscriptionManager:56&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:49&gt;, subscriptionId: 34804990-bdad-48c1-ac9c-ee9b39825f10, handler: SubscriptionHandler { })" time="0.0266751" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetSubscriptionEnvironmentRolesMethod+WhenAuthenticatedUserHasAccessToSubscription.ReturnsCorrectResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetSubscriptionEnvironmentRolesMethod+WhenAuthenticatedUserHasAccessToSubscription.ReturnsCorrectResult(subscriptionEnvironments: EntityNotFoundResult`1 { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, expectedType: typeof(Microsoft.AspNetCore.Http.Result.NotFoundObjectResult), expectedResult: NotFoundObjectResult { ContentType = null, StatusCode = 404, Value = ProblemDetails { Detail = &quot;&quot;, Extensions = [...], Instance = null, Status = null, Title = null, ... } }, manager: Mock&lt;ISubscriptionManager:56&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:49&gt;, subscriptionId: 34804990-bdad-48c1-ac9c-ee9b39825f10, handler: SubscriptionHandler { })" time="0.0092409" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetSubscriptionEnvironmentRolesMethod+WhenAuthenticatedUserHasAccessToSubscription.ReturnsCorrectResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetSubscriptionEnvironmentRolesMethod+WhenAuthenticatedUserHasAccessToSubscription.ReturnsCorrectResult(subscriptionEnvironments: ServiceErrorResult`1 { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, expectedType: typeof(Microsoft.AspNetCore.Http.Result.ObjectResult), expectedResult: ObjectResult { ContentType = &quot;application/problem+json&quot;, StatusCode = null, Value = ProblemDetails { Detail = null, Extensions = [...], Instance = null, Status = null, Title = null, ... } }, manager: Mock&lt;ISubscriptionManager:56&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:49&gt;, subscriptionId: 34804990-bdad-48c1-ac9c-ee9b39825f10, handler: SubscriptionHandler { })" time="0.0035270" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsNotFoundWhenGettingSubscriptionDetails.ReturnsHttpNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsNotFoundWhenGettingSubscriptionDetails.ReturnsHttpNotFound(authenticatedUser: Mock&lt;IAuthenticatedUser:95&gt;, manager: Mock&lt;IAuthenticatedSubscriptionManager:22&gt;, handler: SubscriptionHandler { }, id: 96)" time="0.0045874" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetSubscriptionUserAsyncMethod+WhenAuthenticatedUserHasNoAccessToSubscription.ReturnsErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetSubscriptionUserAsyncMethod+WhenAuthenticatedUserHasNoAccessToSubscription.ReturnsErrorResult(expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.ForbidResult), subscriptionManagerResult: SuccessResult`1 { IsError = False, IsSuccess = True }, id: 15ea5b7b-720b-4d17-8fc1-97d5c54b5411, userId: &quot;userId6bebe608-3a0b-4a98-b81a-85344969ae34&quot;, authRuleValidator: Mock&lt;IAuthRuleValidator:70&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:67&gt;, handler: SubscriptionHandler { })" time="0.0167416" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetSubscriptionUserAsyncMethod+WhenAuthenticatedUserHasNoAccessToSubscription.ReturnsErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetSubscriptionUserAsyncMethod+WhenAuthenticatedUserHasNoAccessToSubscription.ReturnsErrorResult(expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.NotFoundObjectResult), subscriptionManagerResult: EntityNotFoundResult`1 { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, id: 15ea5b7b-720b-4d17-8fc1-97d5c54b5411, userId: &quot;userId6bebe608-3a0b-4a98-b81a-85344969ae34&quot;, authRuleValidator: Mock&lt;IAuthRuleValidator:70&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:67&gt;, handler: SubscriptionHandler { })" time="0.0016482" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetSubscriptionUserAsyncMethod+WhenAuthenticatedUserHasNoAccessToSubscription.ReturnsErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetSubscriptionUserAsyncMethod+WhenAuthenticatedUserHasNoAccessToSubscription.ReturnsErrorResult(expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.ObjectResult), subscriptionManagerResult: ServiceErrorResult`1 { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, id: 15ea5b7b-720b-4d17-8fc1-97d5c54b5411, userId: &quot;userId6bebe608-3a0b-4a98-b81a-85344969ae34&quot;, authRuleValidator: Mock&lt;IAuthRuleValidator:70&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:67&gt;, handler: SubscriptionHandler { })" time="0.0011348" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetSubscriptionUserAsyncMethod+WhenAuthenticatedUserHasAccessToSubscription+WhenSubscriptionIsFound.ReturnsOkResultWithUserInfo" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetSubscriptionUserAsyncMethod+WhenAuthenticatedUserHasAccessToSubscription+WhenSubscriptionIsFound.ReturnsOkResultWithUserInfo(userModelResult: SubscriptionUserModel { AvatarLink = null, CreatedAt = null, Email = &quot;example@mail.com&quot;, EnvironmentRoles = null, FirstName = null, ... }, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.OkObjectResult), expectedResult: OkObjectResult { ContentType = null, StatusCode = 200, Value = SubscriptionUserModel { AvatarLink = null, CreatedAt = null, Email = &quot;example@mail.com&quot;, EnvironmentRoles = null, FirstName = null, ... } }, authenticatedUser: Mock&lt;IAuthenticatedUser:112&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:81&gt;, authSubscriptionManager: Mock&lt;IAuthenticatedSubscriptionManager:24&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:73&gt;, handler: SubscriptionHandler { }, id: dd051d26-5b98-4797-88be-984d0d073dc3, userId: &quot;userId78abf309-4341-4b99-8f5c-3f05518a6ef1&quot;)" time="0.0320189" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfEndDateBeforeStartDate.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfEndDateBeforeStartDate.ReturnsHttpBadRequest(startDate: &quot;2002-01-01&quot;, endDate: &quot;2001-01-01&quot;, groupBy: &quot;year&quot;, top: 5, subscriptionId: 217, handler: SubscriptionHandler { })" time="0.0013280" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfEndDateBeforeStartDate.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfEndDateBeforeStartDate.ReturnsHttpBadRequest(startDate: &quot;2002-01-01&quot;, endDate: &quot;2001-01-01&quot;, groupBy: &quot;month&quot;, top: null, subscriptionId: 220, handler: SubscriptionHandler { })" time="0.0000534" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsFound+WhenAuthenticatedUserHasNoAccessToSubscription.ReturnsHttpForbidden" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsFound+WhenAuthenticatedUserHasNoAccessToSubscription.ReturnsHttpForbidden(authSubscriptionManager: Mock&lt;IAuthenticatedSubscriptionManager:27&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:115&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:145&gt;, id: 017a46df-5249-4724-a53b-3fb0f18f07b1, testUsers: [UserModel { AvatarLink = &quot;AvatarLinkd9b81145-61ad-474c-b7d4-c47a0788710b&quot;, Email = &quot;Email5c4c7753-f570-45d0-8e52-04487339a544&quot;, FirstName = &quot;FirstName1a437dd0-9efc-419f-91a3-4c4b59f99801&quot;, HasFullAccess = True, Id = &quot;Idf2de9a67-e922-458e-b4e7-9d4d0a365409&quot;, ... }, UserModel { AvatarLink = &quot;AvatarLink87ab3010-b287-462f-98f5-821328ae51a7&quot;, Email = &quot;Emaileeb5a54b-afe5-481f-800d-563a9c0da653&quot;, FirstName = &quot;FirstNameb80db6d8-d4a5-4ea8-839f-9cf17b4c0de7&quot;, HasFullAccess = False, Id = &quot;Id5c2e6f50-8e76-444c-a5d1-de52a7932e4f&quot;, ... }, UserModel { AvatarLink = &quot;AvatarLinkc2c37668-e03d-448e-82f4-6a05843537eb&quot;, Email = &quot;Email8077284a-37f1-43c3-bf69-c9d53e422303&quot;, FirstName = &quot;FirstName6b338b18-8de8-4145-8bb3-382b999c5786&quot;, HasFullAccess = True, Id = &quot;Id07000a6a-99b6-4e77-be53-791da75f6a2b&quot;, ... }], handler: SubscriptionHandler { })" time="0.0047062" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetByIdAsyncMethod+WhenSubscriptionIsNotFound.ReturnsHttpNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetByIdAsyncMethod+WhenSubscriptionIsNotFound.ReturnsHttpNotFound(subscriptionId: 45, subscriptionManagerMocked: Mock&lt;ISubscriptionManager:119&gt;, handler: SubscriptionHandler { })" time="0.0209579" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetAsyncMethod+WhenUserHasRequiredPermissions.ReturnsHttpOkWithListOfBasicSubscriptionsModels" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetAsyncMethod+WhenUserHasRequiredPermissions.ReturnsHttpOkWithListOfBasicSubscriptionsModels(basicSubscriptionModels: [BasicSubscriptionModel { ClientId = 3457f32d-e68b-485a-b24f-3e56bfba4155, ClientName = &quot;ClientName13318de9-93ff-4262-862a-d86d87c2b730&quot;, Guid = 7fd35367-347b-44d8-a374-fda7bff58536, Id = 214, IsActive = True, ... }, BasicSubscriptionModel { ClientId = 1195e462-91dc-44af-9df5-6d997e06af48, ClientName = &quot;ClientName66fc612f-1810-465c-89f1-91768ef6bbf6&quot;, Guid = b76ce1c2-2d73-4288-a71b-8947c791b680, Id = 247, IsActive = False, ... }, BasicSubscriptionModel { ClientId = aa97570d-db33-415d-844b-4e7206ded8cc, ClientName = &quot;ClientName883bfa3f-05e0-4b9b-847d-524e5fcf04d0&quot;, Guid = 7e294289-81dc-42c0-90c2-4da856c565b7, Id = 63, IsActive = True, ... }], authRuleValidator: Mock&lt;IAuthRuleValidator:120&gt;, subscriptionManagerMocked: Mock&lt;ISubscriptionManager:122&gt;, handler: SubscriptionHandler { })" time="0.0307022" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsFound+WhenSubscriptionIsNotAccessible.ReturnsHttpStatusForbid" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsFound+WhenSubscriptionIsNotAccessible.ReturnsHttpStatusForbid(startDate: null, endDate: null, top: 5, subscriptionId: 126, subscriptionRendersModels: [SubscriptionRendersModel { DateTime = 2024-08-09T10:15:04.1834844, Environments = [...], TotalRenders = 216 }, SubscriptionRendersModel { DateTime = 2024-02-09T08:38:28.6966375, Environments = [...], TotalRenders = 82 }, SubscriptionRendersModel { DateTime = 2022-06-13T23:10:51.5439594, Environments = [...], TotalRenders = 122 }], subscriptionManagerMocked: Mock&lt;ISubscriptionManager:138&gt;, handler: SubscriptionHandler { })" time="0.0166618" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenTheGroupByIsNotValid.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenTheGroupByIsNotValid.ReturnsHttpBadRequest(handler: SubscriptionHandler { })" time="0.0012098" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsFound+WhenSubscriptionIsAccessible+WhenTheGroupByIsMonth.ReturnsHttpOkWithSubscriptionRendersGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsFound+WhenSubscriptionIsAccessible+WhenTheGroupByIsMonth.ReturnsHttpOkWithSubscriptionRendersGroupedByDay(startDate: null, endDate: null, top: 5, subscriptionId: 216, authRuleValidator: Mock&lt;IAuthRuleValidator:166&gt;, subscriptionRendersModels: [SubscriptionRendersModel { DateTime = 2024-04-28T16:37:24.2228896, Environments = [...], TotalRenders = 234 }, SubscriptionRendersModel { DateTime = 2024-12-24T23:19:10.1749267, Environments = [...], TotalRenders = 13 }, SubscriptionRendersModel { DateTime = 2021-11-17T18:59:43.8445098, Environments = [...], TotalRenders = 215 }], subscriptionManagerMocked: Mock&lt;ISubscriptionManager:147&gt;, handler: SubscriptionHandler { })" time="0.0134620" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsFound+WhenSubscriptionIsAccessible+WhenTheGroupByIsMonth.ReturnsHttpOkWithSubscriptionRendersGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsFound+WhenSubscriptionIsAccessible+WhenTheGroupByIsMonth.ReturnsHttpOkWithSubscriptionRendersGroupedByDay(startDate: &quot;2001-01-01&quot;, endDate: &quot;2002-01-01&quot;, top: null, subscriptionId: 197, authRuleValidator: Mock&lt;IAuthRuleValidator:167&gt;, subscriptionRendersModels: [SubscriptionRendersModel { DateTime = 2021-10-26T12:04:28.4352870, Environments = [...], TotalRenders = 210 }, SubscriptionRendersModel { DateTime = 2025-03-10T08:05:40.6814140, Environments = [...], TotalRenders = 33 }, SubscriptionRendersModel { DateTime = 2024-09-25T21:40:18.6471395, Environments = [...], TotalRenders = 156 }], subscriptionManagerMocked: Mock&lt;ISubscriptionManager:149&gt;, handler: SubscriptionHandler { })" time="0.0018828" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetByIdAsyncMethod+WhenSubscriptionIsFound+WhenUserDoesNotHavePermissions.ReturnsHttpForbid" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetByIdAsyncMethod+WhenSubscriptionIsFound+WhenUserDoesNotHavePermissions.ReturnsHttpForbid(subscriptionId: 242, subscriptionModel: SubscriptionModel { BillingClientContact = &quot;BillingClientContact98bbf42d-38ae-4a5a-b4ca-7819fd&quot;..., ClientName = &quot;ClientName4a522360-78e1-49ca-862b-f26aaa3756db&quot;, EndDate = Monday, 8 January 2024, Environments = [SubscriptionEnvironmentModel { ... }, SubscriptionEnvironmentModel { ... }, SubscriptionEnvironmentModel { ... }], Id = 71, ... }, subscriptionManagerMocked: Mock&lt;ISubscriptionManager:161&gt;, handler: SubscriptionHandler { })" time="0.0025917" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsFound+WhenSubscriptionIsAccessible+WhenTheDateRangeIsProvidedAndIsValid.ReturnsHttpOkWithSubscriptionRendersForSpecifiedDateRange" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsFound+WhenSubscriptionIsAccessible+WhenTheDateRangeIsProvidedAndIsValid.ReturnsHttpOkWithSubscriptionRendersForSpecifiedDateRange(groupBy: &quot;year&quot;, startDate: &quot;2001-01-01&quot;, endDate: &quot;2002-01-01&quot;, subscriptionId: 2, authRuleValidator: Mock&lt;IAuthRuleValidator:178&gt;, subscriptionRendersModels: [SubscriptionRendersModel { DateTime = 2021-11-01T10:15:12.3598466, Environments = [...], TotalRenders = 110 }, SubscriptionRendersModel { DateTime = 2022-03-01T09:57:31.0608690, Environments = [...], TotalRenders = 189 }, SubscriptionRendersModel { DateTime = 2025-04-01T09:59:09.0369305, Environments = [...], TotalRenders = 24 }], subscriptionManagerMocked: Mock&lt;ISubscriptionManager:160&gt;, handler: SubscriptionHandler { })" time="0.0199372" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsFound+WhenSubscriptionIsAccessible+WhenTheDateRangeIsProvidedAndIsValid.ReturnsHttpOkWithSubscriptionRendersForSpecifiedDateRange" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsFound+WhenSubscriptionIsAccessible+WhenTheDateRangeIsProvidedAndIsValid.ReturnsHttpOkWithSubscriptionRendersForSpecifiedDateRange(groupBy: &quot;month&quot;, startDate: &quot;2001-01-01&quot;, endDate: &quot;2002-01-01&quot;, subscriptionId: 123, authRuleValidator: Mock&lt;IAuthRuleValidator:182&gt;, subscriptionRendersModels: [SubscriptionRendersModel { DateTime = 2022-05-10T21:53:53.8937640, Environments = [...], TotalRenders = 222 }, SubscriptionRendersModel { DateTime = 2024-10-18T14:55:35.5437339, Environments = [...], TotalRenders = 55 }, SubscriptionRendersModel { DateTime = 2021-10-27T23:15:46.1393386, Environments = [...], TotalRenders = 77 }], subscriptionManagerMocked: Mock&lt;ISubscriptionManager:164&gt;, handler: SubscriptionHandler { })" time="0.0049019" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfAnyDateHasInvalidFormat.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfAnyDateHasInvalidFormat.ReturnsHttpBadRequest(startDate: &quot;01-01-2002&quot;, endDate: &quot;01-30-2002&quot;, groupBy: &quot;year&quot;, subscriptionId: 142, handler: SubscriptionHandler { })" time="0.0012655" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfAnyDateHasInvalidFormat.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfAnyDateHasInvalidFormat.ReturnsHttpBadRequest(startDate: &quot;&quot;, endDate: &quot;01-30-2002&quot;, groupBy: &quot;year&quot;, subscriptionId: 108, handler: SubscriptionHandler { })" time="0.0000528" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfAnyDateHasInvalidFormat.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfAnyDateHasInvalidFormat.ReturnsHttpBadRequest(startDate: &quot;&quot;, endDate: &quot;01-30-2002&quot;, groupBy: &quot;year&quot;, subscriptionId: 241, handler: SubscriptionHandler { })" time="0.0000200" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfAnyDateHasInvalidFormat.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfAnyDateHasInvalidFormat.ReturnsHttpBadRequest(startDate: &quot;01-01-2002&quot;, endDate: &quot;&quot;, groupBy: &quot;month&quot;, subscriptionId: 166, handler: SubscriptionHandler { })" time="0.0000159" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfAnyDateHasInvalidFormat.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfAnyDateHasInvalidFormat.ReturnsHttpBadRequest(startDate: &quot;01-01-2002&quot;, endDate: &quot;&quot;, groupBy: &quot;month&quot;, subscriptionId: 193, handler: SubscriptionHandler { })" time="0.0000158" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfAnyDateHasInvalidFormat.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfAnyDateHasInvalidFormat.ReturnsHttpBadRequest(startDate: &quot; &quot;, endDate: &quot;2002-01-30&quot;, groupBy: &quot;month&quot;, subscriptionId: 17, handler: SubscriptionHandler { })" time="0.0000181" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfAnyDateHasInvalidFormat.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenTheDateRangeIsNotValid+IfAnyDateHasInvalidFormat.ReturnsHttpBadRequest(startDate: &quot; &quot;, endDate: &quot;2002-01-30&quot;, groupBy: &quot;month&quot;, subscriptionId: 242, handler: SubscriptionHandler { })" time="0.0000155" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsNotFound.ReturnsHttpNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsNotFound.ReturnsHttpNotFound(groupBy: &quot;year&quot;, subscriptionId: 151, subscriptionManagerMocked: Mock&lt;ISubscriptionManager:175&gt;, handler: SubscriptionHandler { })" time="0.0083667" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsNotFound.ReturnsHttpNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetRendersMethod+WhenSubscriptionIsNotFound.ReturnsHttpNotFound(groupBy: &quot;month&quot;, subscriptionId: 113, subscriptionManagerMocked: Mock&lt;ISubscriptionManager:176&gt;, handler: SubscriptionHandler { })" time="0.0003381" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheIsEnvironmentUnderSubscriptionAsyncMethod+WhenUserHasNoPermissions.ReturnsHttpForbidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheIsEnvironmentUnderSubscriptionAsyncMethod+WhenUserHasNoPermissions.ReturnsHttpForbidResult(subscriptionGuid: 769c4f61-2f7b-403c-9a73-abea1572c2fd, environmentGuid: ee6fb3fc-e334-4176-93d7-9ceb010605ce, handler: SubscriptionHandler { })" time="0.0099147" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsFound+WhenAuthenticatedUserHasAccessToSubscription.ReturnsHttpOkWithUsersCollection" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsFound+WhenAuthenticatedUserHasAccessToSubscription.ReturnsHttpOkWithUsersCollection(manager: Mock&lt;IAuthenticatedSubscriptionManager:47&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:178&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:203&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:255&gt;, subscription: Subscription { Customer = Customer { BillingContactEmail = &quot;BillingContactEmail6f655773-2fd7-4915-a352-998c33c&quot;..., ExactName = &quot;ExactName624d6d74-4939-40f3-91b1-e0e3a30f67f7&quot;, Guid = 018db368-25c6-40f5-b573-043942ddb93c, Id = 254, SalesForceName = &quot;SalesForceName3d0545ad-da7d-4b0c-b192-9415baef0ff5&quot;, ... }, EndDate = Friday, 8 March 2024, Environments = [Environment { ... }, Environment { ... }, Environment { ... }], Guid = 29ba943c-169a-4de8-a617-0c9b5f1d6d31, HasContentAdministrators = True, ... }, testUsers: [UserModel { AvatarLink = &quot;AvatarLinkea47c595-bd96-470f-b9e7-f9b8455b3c38&quot;, Email = &quot;Email5a4820df-ceeb-4a7e-bc1a-af62f8f8cb2f&quot;, FirstName = &quot;FirstName56a1be4b-57ed-49fb-a239-d2b4922117d1&quot;, HasFullAccess = False, Id = &quot;Idba452ab1-beec-4f8d-be81-57f70e34af9b&quot;, ... }, UserModel { AvatarLink = &quot;AvatarLink38310b2d-4c57-4b36-90d7-57ff8004f5ab&quot;, Email = &quot;Email940f6e2e-4548-46ab-a630-b5911a691e9f&quot;, FirstName = &quot;FirstName939c3c17-5593-4ebc-9eea-d5fc1ab627ac&quot;, HasFullAccess = True, Id = &quot;Id8e23e361-ed3a-4edf-bc9a-651e6d4647bf&quot;, ... }, UserModel { AvatarLink = &quot;AvatarLinkb3a6df6a-d51f-41c4-aedd-18d6372d2227&quot;, Email = &quot;Email66b5503c-de09-47b2-9c87-8750f6b79747&quot;, FirstName = &quot;FirstName56129067-ea17-44fd-ada2-f5a31bf4c978&quot;, HasFullAccess = False, Id = &quot;Id4257c715-deef-40de-aad7-0c28c3b4844e&quot;, ... }], handler: SubscriptionHandler { })" time="0.0167721" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsFound+WhenGettingGuidsOfAssociatedEnvironmentsFailed.ReturnsHttpProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsFound+WhenGettingGuidsOfAssociatedEnvironmentsFailed.ReturnsHttpProblem(authSubscriptionManager: Mock&lt;IAuthenticatedSubscriptionManager:48&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:180&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:265&gt;, id: c311ca2f-4bbc-4a92-9132-b6e9d7f46f9d, testUsers: [UserModel { AvatarLink = &quot;AvatarLinkddd54e37-08f2-456c-96dc-89cfe0e920f6&quot;, Email = &quot;Emailcd4aefc6-5c53-462d-a197-6ec97bd36184&quot;, FirstName = &quot;FirstName0b77cb58-858b-4b0d-b61e-ae0c323bd5a6&quot;, HasFullAccess = True, Id = &quot;Id0b2997a8-9b00-4a73-9d50-1cd0e83d3929&quot;, ... }, UserModel { AvatarLink = &quot;AvatarLink88d7598a-c1af-4b6e-b256-6941478ab844&quot;, Email = &quot;Email4a64c12b-03d3-4ac5-ba7d-fdcf3d5d1725&quot;, FirstName = &quot;FirstNamee6503e7a-c38e-40aa-b0e2-dbfe49c53a30&quot;, HasFullAccess = False, Id = &quot;Id83c026a7-c4b0-4ae0-9bbd-1c72d06c0414&quot;, ... }, UserModel { AvatarLink = &quot;AvatarLink39d1950d-1fc8-4e47-ada3-0bdb069d87dc&quot;, Email = &quot;Email91399f74-775b-40e0-9413-272c0688f257&quot;, FirstName = &quot;FirstName317673e0-db4d-4b27-9da0-04fdd84ba987&quot;, HasFullAccess = True, Id = &quot;Id210d34d5-28ab-481b-af42-19b5c9caf698&quot;, ... }], handler: SubscriptionHandler { })" time="0.0045247" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsFound+WhenAuthenticatedUserHasAccessToSubscription.ReturnsHttpOkWithUsersCollection" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsFound+WhenAuthenticatedUserHasAccessToSubscription.ReturnsHttpOkWithUsersCollection(manager: Mock&lt;IAuthenticatedSubscriptionManager:49&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:195&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:227&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:279&gt;, subscription: Subscription { Customer = Customer { BillingContactEmail = &quot;BillingContactEmailb19b5c80-ffa8-45c3-9b56-a441914&quot;..., ExactName = &quot;ExactName8baad5cd-7917-4e66-b833-9f414cc2e83c&quot;, Guid = d31b7690-0736-4532-b78c-11d939af46c6, Id = 38, SalesForceName = &quot;SalesForceName2de1a9dc-45f0-4db1-841a-b1b12106b07a&quot;, ... }, EndDate = Thursday, 17 March 2022, Environments = [Environment { ... }, Environment { ... }, Environment { ... }], Guid = 102a9797-258a-4f73-9a90-932b691b5395, HasContentAdministrators = True, ... }, testUsers: [UserModel { AvatarLink = &quot;AvatarLinkf3442095-7aa2-4df5-a0b5-f16d2cafdf87&quot;, Email = &quot;Email033f0aee-243c-4609-9415-abfc5a30b7de&quot;, FirstName = &quot;FirstName5d64d3f5-6b3b-4d94-b1f8-05b2037b59b2&quot;, HasFullAccess = False, Id = &quot;Id6e6ca015-d2db-4f91-8770-e97d7e678179&quot;, ... }, UserModel { AvatarLink = &quot;AvatarLink95251d11-295f-4d10-acd9-b20417f456ee&quot;, Email = &quot;Email17e35d5b-4bad-4736-948b-27a131805843&quot;, FirstName = &quot;FirstName88d18d40-80a4-43d5-a5f8-20ffdfa2c7ab&quot;, HasFullAccess = True, Id = &quot;Idae4f1c92-6f61-404b-bf9f-435e32f160a0&quot;, ... }, UserModel { AvatarLink = &quot;AvatarLink807445dd-1b70-41c4-97fc-b8f84b947b53&quot;, Email = &quot;Email3ac350d8-5276-4508-b4c9-2af4a5316781&quot;, FirstName = &quot;FirstName4894b18c-b0a0-4ae2-b82e-b23b334fbec5&quot;, HasFullAccess = False, Id = &quot;Id9a3de379-efba-4541-8e8f-81449b9bf9d2&quot;, ... }], handler: SubscriptionHandler { })" time="0.0159433" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetAsyncMethod+WhenUserDoesNotHavePermissions.ReturnsHttpForbid" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetAsyncMethod+WhenUserDoesNotHavePermissions.ReturnsHttpForbid(handler: SubscriptionHandler { })" time="0.0012270" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetSubscriptionEnvironmentRolesMethod+WhenAuthenticatedUserHasNoAccessToSubscription.ReturnsErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetSubscriptionEnvironmentRolesMethod+WhenAuthenticatedUserHasNoAccessToSubscription.ReturnsErrorResult(expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.ForbidResult), subscriptionManagerResult: SuccessResult`1 { IsError = False, IsSuccess = True }, id: 61719d6a-305e-44de-b9a3-4cc33b7003c4, authRuleValidator: Mock&lt;IAuthRuleValidator:287&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:240&gt;, handler: SubscriptionHandler { })" time="0.0079466" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetSubscriptionEnvironmentRolesMethod+WhenAuthenticatedUserHasNoAccessToSubscription.ReturnsErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetSubscriptionEnvironmentRolesMethod+WhenAuthenticatedUserHasNoAccessToSubscription.ReturnsErrorResult(expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.NotFoundObjectResult), subscriptionManagerResult: EntityNotFoundResult`1 { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, id: 61719d6a-305e-44de-b9a3-4cc33b7003c4, authRuleValidator: Mock&lt;IAuthRuleValidator:287&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:240&gt;, handler: SubscriptionHandler { })" time="0.0012112" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetSubscriptionEnvironmentRolesMethod+WhenAuthenticatedUserHasNoAccessToSubscription.ReturnsErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetSubscriptionEnvironmentRolesMethod+WhenAuthenticatedUserHasNoAccessToSubscription.ReturnsErrorResult(expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.ObjectResult), subscriptionManagerResult: ServiceErrorResult`1 { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, id: 61719d6a-305e-44de-b9a3-4cc33b7003c4, authRuleValidator: Mock&lt;IAuthRuleValidator:287&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:240&gt;, handler: SubscriptionHandler { })" time="0.0010284" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsFound+WhenGettingGuidsOfAssociatedEnvironmentsFailed.ReturnsHttpProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsFound+WhenGettingGuidsOfAssociatedEnvironmentsFailed.ReturnsHttpProblem(authSubscriptionManager: Mock&lt;IAuthenticatedSubscriptionManager:52&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:246&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:364&gt;, id: 45762963-f7e5-403c-b551-fc635e041417, testUsers: [UserModel { AvatarLink = &quot;AvatarLinka4ef66f2-d372-4dbd-a1ff-af80c65109e2&quot;, Email = &quot;Email36c57792-0160-46b5-9574-6243ca5f587e&quot;, FirstName = &quot;FirstName8dde2423-0785-4c17-9e4f-36888987a4d2&quot;, HasFullAccess = True, Id = &quot;Id19edc7c8-1077-460e-a648-d0125a63021a&quot;, ... }, UserModel { AvatarLink = &quot;AvatarLinkb086c53c-3587-4b97-8238-8556628f11b9&quot;, Email = &quot;Email3ad140ba-da51-4a19-a93c-12c0e54abe36&quot;, FirstName = &quot;FirstName034ec887-7486-4c55-b931-1437724c601b&quot;, HasFullAccess = False, Id = &quot;Id4821c55f-6d95-47f2-8c5b-654abedf4c8d&quot;, ... }, UserModel { AvatarLink = &quot;AvatarLinkf368548c-0e4c-4958-acd0-56f0461130d7&quot;, Email = &quot;Email4204dce0-0085-4439-ae15-b96545551fd0&quot;, FirstName = &quot;FirstName61c8fe79-5c72-434a-8992-61b96f064a39&quot;, HasFullAccess = True, Id = &quot;Idef989450-c9df-4a1c-b51d-39c348224d69&quot;, ... }], handler: SubscriptionHandler { })" time="0.0052791" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheIsEnvironmentUnderSubscriptionAsyncMethod+WhenUserHasRequiredPermissions.ReturnsHttpOkWithBooleanResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheIsEnvironmentUnderSubscriptionAsyncMethod+WhenUserHasRequiredPermissions.ReturnsHttpOkWithBooleanResult(subscriptionGuid: 13dd3f65-4ec6-4ae5-a993-b0deb62e3b8e, environmentGuid: a95f6352-c8b2-412c-9d8e-d654a1d776ab, expectedResult: True, authRuleValidator: Mock&lt;IAuthRuleValidator:310&gt;, subscriptionManagerMocked: Mock&lt;ISubscriptionManager:248&gt;, handler: SubscriptionHandler { })" time="0.0050679" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetSubscriptionUserAsyncMethod+WhenAuthenticatedUserHasAccessToSubscription+WhenSubscriptionIsNotFound.ReturnsHttpNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetSubscriptionUserAsyncMethod+WhenAuthenticatedUserHasAccessToSubscription+WhenSubscriptionIsNotFound.ReturnsHttpNotFound(authenticatedUser: Mock&lt;IAuthenticatedUser:385&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:324&gt;, authSubscriptionManager: Mock&lt;IAuthenticatedSubscriptionManager:54&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:258&gt;, handler: SubscriptionHandler { }, id: 7fcc68a4-c8c2-4c3a-9942-30f449486ea6, userId: &quot;userId29985143-3a66-49a9-b5e0-16e52ee33f59&quot;)" time="0.0066637" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers.SubscriptionHandlerTests+TheGetUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsNotFoundInSubscriptionToEnvironmentsMap.ReturnsHttpNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Handlers" method="SubscriptionHandlerTests+TheGetUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsNotFoundInSubscriptionToEnvironmentsMap.ReturnsHttpNotFound(authenticatedUser: Mock&lt;IAuthenticatedUser:386&gt;, manager: Mock&lt;IAuthenticatedSubscriptionManager:55&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:259&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:325&gt;, handler: SubscriptionHandler { }, id: fef2aa58-180d-48a1-bc7d-682a6a99706b)" time="0.0097168" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Models" time="0.521">
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Models.SubscriptionModelTests+TheIncorrectSubscriptionTypeSerialization.SerializesTheData" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Models" method="SubscriptionModelTests+TheIncorrectSubscriptionTypeSerialization.SerializesTheData(model: SubscriptionModel { BillingClientContact = null, ClientName = null, EndDate = null, Environments = [], Id = 0, ... })" time="0.3268096" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Models.SubscriptionModelTests+TheIncorrectSubscriptionLicenseTypeSerialization.SerializesTheData" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Models" method="SubscriptionModelTests+TheIncorrectSubscriptionLicenseTypeSerialization.SerializesTheData(model: SubscriptionModel { BillingClientContact = null, ClientName = null, EndDate = null, Environments = [], Id = 0, ... })" time="0.1636443" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Models.SubscriptionModelTests+TheSerializationImplementation.SerializesTheData" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Models" method="SubscriptionModelTests+TheSerializationImplementation.SerializesTheData(model: SubscriptionModel { BillingClientContact = null, ClientName = null, EndDate = null, Environments = [], Id = 0, ... }, expectedJsonData: [&quot;{&quot;, &quot;  \&quot;id\&quot;: 0,&quot;, &quot;  \&quot;name\&quot;: null,&quot;, &quot;  \&quot;usedRenders\&quot;: null,&quot;, &quot;  \&quot;maxRenders\&quot;: null,&quot;, ...])" time="0.0209564" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Models.SubscriptionModelTests+TheSerializationImplementation.SerializesTheData" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Models" method="SubscriptionModelTests+TheSerializationImplementation.SerializesTheData(model: SubscriptionModel { BillingClientContact = &quot;ann@chili-publish.com&quot;, ClientName = &quot;ABC Media&quot;, EndDate = Monday, 6 May 3022, Environments = [SubscriptionEnvironmentModel { ... }, SubscriptionEnvironmentModel { ... }, SubscriptionEnvironmentModel { ... }], Id = 0, ... }, expectedJsonData: [&quot;{&quot;, &quot;  \&quot;id\&quot;: 0,&quot;, &quot;  \&quot;name\&quot;: \&quot;CHILI Publish\&quot;,&quot;, &quot;  \&quot;usedRenders\&quot;: 1000,&quot;, &quot;  \&quot;maxRenders\&quot;: 1024,&quot;, ...])" time="0.0100371" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="170" passed="170" failed="0" skipped="0" name="Test collection for CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" time="17.942">
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsNotFound.ReturnsNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsNotFound.ReturnsNull(authenticatedUser: Mock&lt;IAuthenticatedUser:62&gt;, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:26&gt;, manager: AuthenticatedSubscriptionManager { }, id: 95c15822-d421-44cb-848a-be1fee63ef5c)" time="0.0275913" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsNotFound.ReturnsNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsNotFound.ReturnsNull(top: 5, dateTimeProvider: Mock&lt;IDateTimeProvider:51&gt;, repository: SubscriptionsRepository { })" time="0.0876923" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetByIdWithLastDaysRendersAsyncMethod+WhenSubscriptionIsNotFound.ReturnsNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetByIdWithLastDaysRendersAsyncMethod+WhenSubscriptionIsNotFound.ReturnsNull(subscriptionId: 32, days: 101)" time="0.1501319" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsNotFound.ReturnsNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsNotFound.ReturnsNull(top: null, dateTimeProvider: Mock&lt;IDateTimeProvider:52&gt;, repository: SubscriptionsRepository { })" time="0.0018672" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetRendersGroupedByMonthMethod+WhenTheSubscriptionIsFound+IfDateRangeIsNotNull+IfTopIsNotProvided.MapsTheRenders" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetRendersGroupedByMonthMethod+WhenTheSubscriptionIsFound+IfDateRangeIsNotNull+IfTopIsNotProvided.MapsTheRenders(subscriptionId: 38, renders: [SubscriptionRenderInfo { }, SubscriptionRenderInfo { }, SubscriptionRenderInfo { }], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:31&gt;, dateTimeProviderMocked: Namef1b03944-49b8-4e48-bf18-b61317aa244f, subscriptionManager: SubscriptionManager { })" time="0.0420682" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserAccessibleInTheSubscription.ReturnsSubscriptionUser" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserAccessibleInTheSubscription.ReturnsSubscriptionUser(fetchedUser: UserModel { AvatarLink = &quot;example.com/simple.png&quot;, CreationDate = 2023-07-12T09:26:14.3980992+02:00, CustomerGuid = null, DeactivatedSubscriptions = [], Email = &quot;userSa@chili-publish.com&quot;, ... }, expectedSubscriptionRoles: [&quot;SA&quot;], expectedEnvironmentRoles: null, expectedFullAccessValue: False, expectedCreationDateTimestamp: 1689146774, expectedUserStatus: Active, authenticatedUser: Mock&lt;IAuthenticatedUser:70&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:30&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:60&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0744737" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserAccessibleInTheSubscription.ReturnsSubscriptionUser" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserAccessibleInTheSubscription.ReturnsSubscriptionUser(fetchedUser: UserModel { AvatarLink = &quot;example.com/simple.png&quot;, CreationDate = 2023-07-12T09:26:14.3981166+02:00, CustomerGuid = null, DeactivatedSubscriptions = [], Email = &quot;userNoRoles@chili-publish.com&quot;, ... }, expectedSubscriptionRoles: null, expectedEnvironmentRoles: null, expectedFullAccessValue: False, expectedCreationDateTimestamp: 1689146774, expectedUserStatus: Active, authenticatedUser: Mock&lt;IAuthenticatedUser:70&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:30&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:60&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0030486" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserAccessibleInTheSubscription.ReturnsSubscriptionUser" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserAccessibleInTheSubscription.ReturnsSubscriptionUser(fetchedUser: UserModel { AvatarLink = &quot;example.com/simple.png&quot;, CreationDate = 2011-01-12T00:00:00.0000000, CustomerGuid = null, DeactivatedSubscriptions = [], Email = &quot;userEaEnv1@chili-publish.com&quot;, ... }, expectedSubscriptionRoles: null, expectedEnvironmentRoles: [[1672a527-1f0a-4f29-9b5a-5decfd32d3f0] = [&quot;EA&quot;]], expectedFullAccessValue: False, expectedCreationDateTimestamp: 1294786800, expectedUserStatus: Blocked, authenticatedUser: Mock&lt;IAuthenticatedUser:71&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:30&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:60&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0163887" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserAccessibleInTheSubscription.ReturnsSubscriptionUser" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserAccessibleInTheSubscription.ReturnsSubscriptionUser(fetchedUser: UserModel { AvatarLink = &quot;example.com/simple.png&quot;, CreationDate = 2023-01-01T00:00:00.0000000, CustomerGuid = null, DeactivatedSubscriptions = [], Email = &quot;userEuEnv1EuEnv2@chili-publish.com&quot;, ... }, expectedSubscriptionRoles: null, expectedEnvironmentRoles: [[1672a527-1f0a-4f29-9b5a-5decfd32d3f0] = [&quot;EU&quot;], [4dfef654-fa31-4b42-be3a-e08718f293e6] = [&quot;EU&quot;]], expectedFullAccessValue: False, expectedCreationDateTimestamp: 1672527600, expectedUserStatus: Active, authenticatedUser: Mock&lt;IAuthenticatedUser:71&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:30&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:60&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0018830" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserAccessibleInTheSubscription.ReturnsSubscriptionUser" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserAccessibleInTheSubscription.ReturnsSubscriptionUser(fetchedUser: UserModel { AvatarLink = &quot;example.com/simple.png&quot;, CreationDate = null, CustomerGuid = null, DeactivatedSubscriptions = [], Email = &quot;userFa@chili-publish.com&quot;, ... }, expectedSubscriptionRoles: null, expectedEnvironmentRoles: null, expectedFullAccessValue: True, expectedCreationDateTimestamp: null, expectedUserStatus: Active, authenticatedUser: Mock&lt;IAuthenticatedUser:70&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:30&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:60&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0011165" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserAccessibleInTheSubscription.ReturnsSubscriptionUser" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserAccessibleInTheSubscription.ReturnsSubscriptionUser(fetchedUser: UserModel { AvatarLink = &quot;example.com/simple.png&quot;, CreationDate = 2023-01-01T00:00:00.0000000, CustomerGuid = null, DeactivatedSubscriptions = [], Email = &quot;userEuEnv1EuEnv2@chili-publish.com&quot;, ... }, expectedSubscriptionRoles: null, expectedEnvironmentRoles: [[1672a527-1f0a-4f29-9b5a-5decfd32d3f0] = [&quot;EU&quot;]], expectedFullAccessValue: False, expectedCreationDateTimestamp: 1672527600, expectedUserStatus: Active, authenticatedUser: Mock&lt;IAuthenticatedUser:72&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:30&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:60&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0014798" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserAccessibleInTheSubscription.ReturnsSubscriptionUser" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserAccessibleInTheSubscription.ReturnsSubscriptionUser(fetchedUser: UserModel { AvatarLink = &quot;example.com/simple.png&quot;, CreationDate = 2023-07-12T09:26:14.3980992+02:00, CustomerGuid = null, DeactivatedSubscriptions = [], Email = &quot;userSa@chili-publish.com&quot;, ... }, expectedSubscriptionRoles: [&quot;SA&quot;], expectedEnvironmentRoles: null, expectedFullAccessValue: False, expectedCreationDateTimestamp: 1689146774, expectedUserStatus: Active, authenticatedUser: Mock&lt;IAuthenticatedUser:72&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:30&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:60&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0015414" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetSubscriptionToEnvironmentsMapAsyncMethod+WhenAllSubscriptionsAreFound.CorrectResultIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetSubscriptionToEnvironmentsMapAsyncMethod+WhenAllSubscriptionsAreFound.CorrectResultIsReturned(repositoryResult: [[d4903267-4ec7-40dc-8de3-ca449adaa358] = [d7a1f824-e81e-4ac4-a992-ca19f177541f], [d948a4b3-de28-402b-a5e7-366f45cb0c36] = [3a3bee14-57b2-4c12-8a80-55cedbb0c649]], expectedResult: SuccessResult`1 { IsError = False, IsSuccess = True }, subscriptionIds: [d4903267-4ec7-40dc-8de3-ca449adaa358, d948a4b3-de28-402b-a5e7-366f45cb0c36], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:35&gt;, subscriptionManager: SubscriptionManager { })" time="0.0254274" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserAccessibleInTheSubscription.ReturnsSubscriptionUser" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserAccessibleInTheSubscription.ReturnsSubscriptionUser(fetchedUser: UserModel { AvatarLink = &quot;example.com/simple.png&quot;, CreationDate = 2023-07-12T09:26:14.3981186+02:00, CustomerGuid = null, DeactivatedSubscriptions = [d1fe5a7f-b56a-45eb-a914-8b976c3daae4], Email = &quot;userSaDeactivated@chili-publish.com&quot;, ... }, expectedSubscriptionRoles: [&quot;SA&quot;], expectedEnvironmentRoles: null, expectedFullAccessValue: False, expectedCreationDateTimestamp: 1689146774, expectedUserStatus: Inactive, authenticatedUser: Mock&lt;IAuthenticatedUser:70&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:30&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:60&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0013591" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided+WhenTopParameterIsLessThanEnvironmentCounts.ReturnsFirstTopSubscriptionEnvironmentRendersGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided+WhenTopParameterIsLessThanEnvironmentCounts.ReturnsFirstTopSubscriptionEnvironmentRendersGroupedByDay(topEnvironments: 2, daysBack: 2, dateTimeProvider: Mock&lt;IDateTimeProvider:49&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:38&gt;, subscriptionRepository: SubscriptionsRepository { })" time="0.1792715" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetManyMethod.ReturnsSubscriptionsWithCustomerIncluded" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetManyMethod.ReturnsSubscriptionsWithCustomerIncluded(subscriptionIds: [(8, d7bc4375-0fc6-4448-88fd-7d7679df65d0), (46, 9d272dac-a379-4a49-97a3-e64bb3d64bfb), (169, a4cf291c-b22e-42fa-84f4-1e52320d6c35)])" time="0.0440102" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasNoUsers.ReturnsSubscriptionGuidWithEmptyCollection" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasNoUsers.ReturnsSubscriptionGuidWithEmptyCollection(subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:37&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:75&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:92&gt;, subscription: Subscription { Customer = Customer { BillingContactEmail = &quot;BillingContactEmail6eefefd5-f902-4c22-a340-bc3702e&quot;..., ExactName = &quot;ExactName55629311-40f5-424a-bbe3-60c415f2918a&quot;, Guid = cdbc9da0-777c-4f5d-94b6-68cf55881f07, Id = 171, SalesForceName = &quot;SalesForceName97eefb16-6d1c-46ae-ab9e-71614835d106&quot;, ... }, EndDate = Friday, 28 February 2025, Environments = [Environment { ... }, Environment { ... }, Environment { ... }], Guid = 4f7da186-2646-4e20-a99f-429d96b192d5, HasContentAdministrators = True, ... }, manager: AuthenticatedSubscriptionManager { })" time="0.0199324" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetRendersGroupedByDayMethod+WhenTheSubscriptionIsFound+IfDateRangeIsNull+IfNoTopIsProvided.MapsTheRenders" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetRendersGroupedByDayMethod+WhenTheSubscriptionIsFound+IfDateRangeIsNull+IfNoTopIsProvided.MapsTheRenders(subscriptionId: 163, renders: [SubscriptionRenderInfo { }, SubscriptionRenderInfo { }, SubscriptionRenderInfo { }], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:39&gt;, subscriptionManager: SubscriptionManager { })" time="0.0173135" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided+WhenTopParameterIsLessThanEnvironmentCounts.ReturnsEnvironmentsSortedByTypeAndThenByTotalRendersGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided+WhenTopParameterIsLessThanEnvironmentCounts.ReturnsEnvironmentsSortedByTypeAndThenByTotalRendersGroupedByDay(topEnvironments: 2, daysBack: 2, dateTimeProvider: Mock&lt;IDateTimeProvider:56&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:47&gt;, subscriptionRepository: SubscriptionsRepository { })" time="0.0967022" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsNotProvided+WhenTheSubscriptionsListIsNotEmpty+WhenCustomerIsNull.NameEqualsToSubscriptionName" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsNotProvided+WhenTheSubscriptionsListIsNotEmpty+WhenCustomerIsNull.NameEqualsToSubscriptionName(name: &quot;name04d735c9-9d4b-4ebc-b3e7-f1cc122f2c62&quot;, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:42&gt;, subscriptionManager: SubscriptionManager { })" time="0.0050136" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheProductionEnvironmentsTotalIsEqualToMaxEnvironments" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheProductionEnvironmentsTotalIsEqualToMaxEnvironments(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:40&gt;, subscriptionManager: SubscriptionManager { })" time="0.0190968" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsNotProvided+WhenTheSubscriptionsListIsNotEmpty+WhenCustomerIsNull.ClientIdAndClientNameAreNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsNotProvided+WhenTheSubscriptionsListIsNotEmpty+WhenCustomerIsNull.ClientIdAndClientNameAreNull(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:43&gt;, subscriptionManager: SubscriptionManager { })" time="0.0027985" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheSandboxEnvironmentsTotalIsEqualToMaxEnvironments" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheSandboxEnvironmentsTotalIsEqualToMaxEnvironments(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:45&gt;, subscriptionManager: SubscriptionManager { })" time="0.0099833" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheProductionEnvironmentsUsedIsEqualToProductionCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheProductionEnvironmentsUsedIsEqualToProductionCount(environmentTypes: [Development, Sandbox, Production], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:47&gt;, subscriptionManager: SubscriptionManager { })" time="0.0206160" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheProductionEnvironmentsUsedIsEqualToProductionCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheProductionEnvironmentsUsedIsEqualToProductionCount(environmentTypes: [Production, Production, Sandbox], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:48&gt;, subscriptionManager: SubscriptionManager { })" time="0.0010217" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheProductionEnvironmentsUsedIsEqualToProductionCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheProductionEnvironmentsUsedIsEqualToProductionCount(environmentTypes: [], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:49&gt;, subscriptionManager: SubscriptionManager { })" time="0.0010209" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheSandboxEnvironmentsUsedIsEqualToSandboxCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheSandboxEnvironmentsUsedIsEqualToSandboxCount(environmentTypes: [Development, Sandbox, Production], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:50&gt;, subscriptionManager: SubscriptionManager { })" time="0.0035714" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheSandboxEnvironmentsUsedIsEqualToSandboxCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheSandboxEnvironmentsUsedIsEqualToSandboxCount(environmentTypes: [Production, Production, Sandbox], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:51&gt;, subscriptionManager: SubscriptionManager { })" time="0.0011766" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheSandboxEnvironmentsUsedIsEqualToSandboxCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheSandboxEnvironmentsUsedIsEqualToSandboxCount(environmentTypes: [], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:52&gt;, subscriptionManager: SubscriptionManager { })" time="0.0009721" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheTenantInformationIsNotNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsGreaterThanZero.TheTenantInformationIsNotNull(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:55&gt;, subscriptionManager: SubscriptionManager { })" time="0.0095482" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetByIdAsyncMethod+WhenSubscriptionIsNotFound.ReturnsNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetByIdAsyncMethod+WhenSubscriptionIsNotFound.ReturnsNull(subscriptionId: 85)" time="0.0152379" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetEnvironmentRolesAllowedAsyncMethod+WhenSubscriptionIsFound.AllowedEnvironmentRolesAreReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetEnvironmentRolesAllowedAsyncMethod+WhenSubscriptionIsFound.AllowedEnvironmentRolesAreReturned(contentAdministratorsAvailability: False, expectedResultContent: [EA, EA], subscriptionId: a3053103-04e9-4c2e-b1f9-0cfb8e0e757c, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:81&gt;, subscriptionManager: SubscriptionManager { })" time="0.0139380" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetEnvironmentRolesAllowedAsyncMethod+WhenSubscriptionIsFound.AllowedEnvironmentRolesAreReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetEnvironmentRolesAllowedAsyncMethod+WhenSubscriptionIsFound.AllowedEnvironmentRolesAreReturned(contentAdministratorsAvailability: True, expectedResultContent: [EA, EA], subscriptionId: fbb78e85-d1dd-4f08-bee7-d2584d8106ea, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:82&gt;, subscriptionManager: SubscriptionManager { })" time="0.0018061" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetEnvironmentRolesAllowedAsyncMethod+WhenSubscriptionIsFound.AllowedEnvironmentRolesAreReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetEnvironmentRolesAllowedAsyncMethod+WhenSubscriptionIsFound.AllowedEnvironmentRolesAreReturned(contentAdministratorsAvailability: True, expectedResultContent: [EA, EA, CA], subscriptionId: c3bf8489-73d0-4b7b-85c3-64db40b03fca, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:83&gt;, subscriptionManager: SubscriptionManager { })" time="0.0016160" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetAsyncMethod.ReturnsSubscriptionsWithCustomerIncluded" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetAsyncMethod.ReturnsSubscriptionsWithCustomerIncluded(subscriptionIds: [(170, 209f3f3d-aa5f-43b8-a000-a714b26af4a1), (77, aef09972-5a6b-4ef2-ac4c-f8968ff2b9d5), (23, f422dcd3-3398-4bf8-9a77-9301d80b4c58)])" time="0.0068853" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+GetMaximumTemplateDesignerSeats+WhenSubscriptionIsFound+WhenTemplateDesignerSeats.ReturnsTheValue" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+GetMaximumTemplateDesignerSeats+WhenSubscriptionIsFound+WhenTemplateDesignerSeats.ReturnsTheValue" time="0.0466827" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsNotFound.ReturnsEntityNotFoundResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsNotFound.ReturnsEntityNotFoundResult(authenticatedUser: Mock&lt;IAuthenticatedUser:168&gt;, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:98&gt;, manager: AuthenticatedSubscriptionManager { }, id: ef5af968-014f-4bfa-9410-ec4dfc8ed8b4, userId: &quot;userIdc4618236-8d97-4bca-8392-4f8e663e3163&quot;)" time="0.0027211" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetByGuidAsyncMethod+WhenSubscriptionIsFound.ReturnsSubscription" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetByGuidAsyncMethod+WhenSubscriptionIsFound.ReturnsSubscription" time="0.0071329" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllTotalRendersGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllTotalRendersGroupedByDay(topParameter: 1, daysBack: 1, expectedResult: [0, 912], dateTimeProvider: Mock&lt;IDateTimeProvider:84&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:54&gt;, repository: SubscriptionsRepository { })" time="0.7588181" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheProductionEnvironmentsUsedIsEqualToProductionCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheProductionEnvironmentsUsedIsEqualToProductionCount(environmentTypes: [Development, Sandbox, Production], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:101&gt;, subscriptionManager: SubscriptionManager { })" time="0.0038976" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheProductionEnvironmentsUsedIsEqualToProductionCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheProductionEnvironmentsUsedIsEqualToProductionCount(environmentTypes: [Production, Production, Sandbox], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:102&gt;, subscriptionManager: SubscriptionManager { })" time="0.0009738" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheProductionEnvironmentsUsedIsEqualToProductionCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheProductionEnvironmentsUsedIsEqualToProductionCount(environmentTypes: [], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:103&gt;, subscriptionManager: SubscriptionManager { })" time="0.0009464" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheProductionEnvironmentsTotalIsZero" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheProductionEnvironmentsTotalIsZero(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:104&gt;, subscriptionManager: SubscriptionManager { })" time="0.0124913" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheTenantInformationIsNotNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheTenantInformationIsNotNull(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:105&gt;, subscriptionManager: SubscriptionManager { })" time="0.0029060" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheSandboxEnvironmentsUsedIsEqualToSandboxCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheSandboxEnvironmentsUsedIsEqualToSandboxCount(environmentTypes: [Development, Sandbox, Production], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:106&gt;, subscriptionManager: SubscriptionManager { })" time="0.0036153" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheSandboxEnvironmentsUsedIsEqualToSandboxCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheSandboxEnvironmentsUsedIsEqualToSandboxCount(environmentTypes: [Production, Production, Sandbox], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:107&gt;, subscriptionManager: SubscriptionManager { })" time="0.0009642" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheSandboxEnvironmentsUsedIsEqualToSandboxCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheSandboxEnvironmentsUsedIsEqualToSandboxCount(environmentTypes: [], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:108&gt;, subscriptionManager: SubscriptionManager { })" time="0.0009073" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheSandboxEnvironmentsTotalIsOne" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNotNull+WhenMaxEnvironmentsIsZero.TheSandboxEnvironmentsTotalIsOne(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:110&gt;, subscriptionManager: SubscriptionManager { })" time="0.0032063" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+IsContentAdministratorAllowedAsyncMethod+WhenSubscriptionIsFound.ReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+IsContentAdministratorAllowedAsyncMethod+WhenSubscriptionIsFound.ReturnsSuccessResult(hasContentAdministratorsValue: True, expectedResultValue: False, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:85&gt;, subscriptionRepository: SubscriptionsRepository { }, subscriptionId: d5d8ce7e-f2d3-4b1e-a3f9-bcd400e427cc)" time="0.0165108" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+IsContentAdministratorAllowedAsyncMethod+WhenSubscriptionIsFound.ReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+IsContentAdministratorAllowedAsyncMethod+WhenSubscriptionIsFound.ReturnsSuccessResult(hasContentAdministratorsValue: null, expectedResultValue: False, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:86&gt;, subscriptionRepository: SubscriptionsRepository { }, subscriptionId: 39538f53-f121-4977-94bb-cb8bdd4a4db1)" time="0.0029933" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+IsContentAdministratorAllowedAsyncMethod+WhenSubscriptionIsFound.ReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+IsContentAdministratorAllowedAsyncMethod+WhenSubscriptionIsFound.ReturnsSuccessResult(hasContentAdministratorsValue: True, expectedResultValue: True, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:87&gt;, subscriptionRepository: SubscriptionsRepository { }, subscriptionId: c4ff43cd-4620-48a4-a8ce-09f04c96c60d)" time="0.0074554" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+IsContentAdministratorAllowedAsyncMethod+WhenSubscriptionIsFound.ReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+IsContentAdministratorAllowedAsyncMethod+WhenSubscriptionIsFound.ReturnsSuccessResult(hasContentAdministratorsValue: False, expectedResultValue: False, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:88&gt;, subscriptionRepository: SubscriptionsRepository { }, subscriptionId: 30565d55-1bb8-42b7-add3-e594e6d2f42e)" time="0.0120499" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllTotalRendersGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllTotalRendersGroupedByDay(topParameter: 3, daysBack: 5, expectedResult: [1288, 0, 1288, 0, 912, ...], dateTimeProvider: Mock&lt;IDateTimeProvider:104&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:58&gt;, repository: SubscriptionsRepository { })" time="0.2578127" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheHasAllMethod.ReturnsTrueWhenAllTheUniqueIdsAreFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheHasAllMethod.ReturnsTrueWhenAllTheUniqueIdsAreFound(subscriptionIds: [(4, a5a16213-1d59-4234-8de8-d858837c2796), (163, b465970a-2e2e-4aa5-80e1-b8feeb535b7c), (99, 6904be8a-e725-4c7d-b064-e85c5d015606)])" time="0.0098064" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheHasAllMethod.ReturnsFalseWhenNotAllTheIdsAreFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheHasAllMethod.ReturnsFalseWhenNotAllTheIdsAreFound(subscriptionIds: [(231, b018fee1-42f8-4ba2-84c9-3460a423c560), (8, 4fa5f74b-3f99-485d-893c-37612ce16291), (166, eb9aa4a5-3474-46cc-ac52-058bd757e27b)])" time="0.0068450" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetByIdAsyncMethod+WhenSubscriptionIsFound.ReturnsSubscription" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetByIdAsyncMethod+WhenSubscriptionIsFound.ReturnsSubscription(subscriptionId: 253)" time="0.0062007" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllTotalRendersGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllTotalRendersGroupedByDay(topParameter: 6, daysBack: 10, expectedResult: [0, 912, 0, 912, 0, ...], dateTimeProvider: Mock&lt;IDateTimeProvider:108&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:59&gt;, repository: SubscriptionsRepository { })" time="0.1998769" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasNoUsers.ReturnsSubscriptionGuidWithEmptyCollection" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasNoUsers.ReturnsSubscriptionGuidWithEmptyCollection(subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:115&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:196&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:201&gt;, subscription: Subscription { Customer = Customer { BillingContactEmail = &quot;BillingContactEmail7aacbc83-24ff-4ecd-832d-da0fb13&quot;..., ExactName = &quot;ExactName357defab-05ad-4d8e-8c81-e7a15424ace7&quot;, Guid = 99189328-877a-44a4-bb5c-5bde9eba29b5, Id = 247, SalesForceName = &quot;SalesForceNamea9faa803-a87d-4232-80e0-319425be881d&quot;, ... }, EndDate = Monday, 11 October 2021, Environments = [Environment { ... }, Environment { ... }, Environment { ... }], Guid = ee00663e-dd55-4b0e-b839-576bc53e947f, HasContentAdministrators = True, ... }, manager: AuthenticatedSubscriptionManager { })" time="0.0046855" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenLicensesAreProvided+WhenLicensedServerIsNotProvided.TheLastReportProcessorCountEqualsZero" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenLicensesAreProvided+WhenLicensedServerIsNotProvided.TheLastReportProcessorCountEqualsZero(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:117&gt;, subscriptionManager: SubscriptionManager { })" time="0.0209866" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsSumOfAllSubscriptionRendersGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsSumOfAllSubscriptionRendersGroupedByDay(daysBack: 50, expectedCount: 14272, dateTimeProvider: Mock&lt;IDateTimeProvider:59&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:48&gt;, repository: SubscriptionsRepository { })" time="1.7373420" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetSubscriptionToEnvironmentsMapAsyncMethod+WhenSomeOfSubscriptionsWereNotFound.CorrectResultIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetSubscriptionToEnvironmentsMapAsyncMethod+WhenSomeOfSubscriptionsWereNotFound.CorrectResultIsReturned(repositoryResult: [], expectedResult: EntityNotFoundResult`1 { ErrorMessage = &quot;Some of the provided subscriptions weren't found: &quot;..., IsError = True, IsSuccess = False }, subscriptionIds: [d4903267-4ec7-40dc-8de3-ca449adaa358], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:122&gt;, subscriptionManager: SubscriptionManager { })" time="0.0196146" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetSubscriptionToEnvironmentsMapAsyncMethod+WhenSomeOfSubscriptionsWereNotFound.CorrectResultIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetSubscriptionToEnvironmentsMapAsyncMethod+WhenSomeOfSubscriptionsWereNotFound.CorrectResultIsReturned(repositoryResult: [[d4903267-4ec7-40dc-8de3-ca449adaa358] = [d7a1f824-e81e-4ac4-a992-ca19f177541f], [d948a4b3-de28-402b-a5e7-366f45cb0c36] = [3a3bee14-57b2-4c12-8a80-55cedbb0c649]], expectedResult: EntityNotFoundResult`1 { ErrorMessage = &quot;Some of the provided subscriptions weren't found: &quot;..., IsError = True, IsSuccess = False }, subscriptionIds: [d4903267-4ec7-40dc-8de3-ca449adaa358, d948a4b3-de28-402b-a5e7-366f45cb0c36, 60151a22-7001-486c-a154-5555c670d774], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:122&gt;, subscriptionManager: SubscriptionManager { })" time="0.0011670" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsSumOfAllSubscriptionRendersGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsSumOfAllSubscriptionRendersGroupedByDay(daysBack: 1, expectedCount: 1824, dateTimeProvider: Mock&lt;IDateTimeProvider:78&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:55&gt;, repository: SubscriptionsRepository { })" time="0.0655669" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsSumOfAllSubscriptionRendersGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsSumOfAllSubscriptionRendersGroupedByDay(daysBack: 15, expectedCount: 12448, dateTimeProvider: Mock&lt;IDateTimeProvider:106&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:57&gt;, repository: SubscriptionsRepository { })" time="0.3790448" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetRendersGroupedByMonthMethod+WhenTheSubscriptionIsFound+IfDateRangeIsNull+IfTopIsProvided.MapsTheRenders" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetRendersGroupedByMonthMethod+WhenTheSubscriptionIsFound+IfDateRangeIsNull+IfTopIsProvided.MapsTheRenders(subscriptionId: 48, top: 198, renders: [SubscriptionRenderInfo { }, SubscriptionRenderInfo { }, SubscriptionRenderInfo { }], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:129&gt;, subscriptionManager: SubscriptionManager { })" time="0.0055687" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers.ReturnsSubscriptionGuidWithAccessibleUsersInSubscription" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers.ReturnsSubscriptionGuidWithAccessibleUsersInSubscription(expectedUsers: [UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userSa@chili-publish.com&quot;, FirstName = &quot;John&quot;, HasFullAccess = False, Id = &quot;subscriptionAdministrator&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEaEnv1@chili-publish.com&quot;, FirstName = &quot;Arthur&quot;, HasFullAccess = False, Id = &quot;environmentAdministratorEnv1&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv1@chili-publish.com&quot;, FirstName = &quot;John&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv1&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv2@chili-publish.com&quot;, FirstName = &quot;Walter&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv2&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userNoRoles@chili-publish.com&quot;, FirstName = &quot;Walter&quot;, HasFullAccess = False, Id = &quot;userWithNoRoles&quot;, ... }, ...], authenticatedUser: Mock&lt;IAuthenticatedUser:251&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:131&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:223&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0223030" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers.ReturnsSubscriptionGuidWithAccessibleUsersInSubscription" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers.ReturnsSubscriptionGuidWithAccessibleUsersInSubscription(expectedUsers: [UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userSa@chili-publish.com&quot;, FirstName = &quot;John&quot;, HasFullAccess = False, Id = &quot;subscriptionAdministrator&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEaEnv1@chili-publish.com&quot;, FirstName = &quot;Arthur&quot;, HasFullAccess = False, Id = &quot;environmentAdministratorEnv1&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv1@chili-publish.com&quot;, FirstName = &quot;John&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv1&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv2@chili-publish.com&quot;, FirstName = &quot;Walter&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv2&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv1EuEnv2@chili-publish.com&quot;, FirstName = &quot;Nice&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv1userEnv2&quot;, ... }, ...], authenticatedUser: Mock&lt;IAuthenticatedUser:252&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:131&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:223&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0450020" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers.ReturnsSubscriptionGuidWithAccessibleUsersInSubscription" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers.ReturnsSubscriptionGuidWithAccessibleUsersInSubscription(expectedUsers: [UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userSa@chili-publish.com&quot;, FirstName = &quot;John&quot;, HasFullAccess = False, Id = &quot;subscriptionAdministrator&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEaEnv1@chili-publish.com&quot;, FirstName = &quot;Arthur&quot;, HasFullAccess = False, Id = &quot;environmentAdministratorEnv1&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv1@chili-publish.com&quot;, FirstName = &quot;John&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv1&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv2@chili-publish.com&quot;, FirstName = &quot;Walter&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv2&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userNoRoles@chili-publish.com&quot;, FirstName = &quot;Walter&quot;, HasFullAccess = False, Id = &quot;userWithNoRoles&quot;, ... }, ...], authenticatedUser: Mock&lt;IAuthenticatedUser:254&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:131&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:223&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0028749" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers.ReturnsSubscriptionGuidWithAccessibleUsersInSubscription" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers.ReturnsSubscriptionGuidWithAccessibleUsersInSubscription(expectedUsers: [UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userSa@chili-publish.com&quot;, FirstName = &quot;John&quot;, HasFullAccess = False, Id = &quot;subscriptionAdministrator&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEaEnv1@chili-publish.com&quot;, FirstName = &quot;Arthur&quot;, HasFullAccess = False, Id = &quot;environmentAdministratorEnv1&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv1@chili-publish.com&quot;, FirstName = &quot;John&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv1&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv1EuEnv2@chili-publish.com&quot;, FirstName = &quot;Nice&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv1userEnv2&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userSaDeactivated@chili-publish.com&quot;, FirstName = &quot;James&quot;, HasFullAccess = False, Id = &quot;subscriptionAdministratorDeactivated&quot;, ... }], authenticatedUser: Mock&lt;IAuthenticatedUser:253&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:131&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:223&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0142639" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+GetMaximumTemplateDesignerSeats+WhenSubscriptionIsFound+WhenNoTemplateDesignerSeats.Returns0" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+GetMaximumTemplateDesignerSeats+WhenSubscriptionIsFound+WhenNoTemplateDesignerSeats.Returns0" time="0.0147940" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+GetMaximumTemplateDesignerSeats+WhenSubscriptionIsNotFound.RaisesAnException" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+GetMaximumTemplateDesignerSeats+WhenSubscriptionIsNotFound.RaisesAnException" time="0.0545811" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided+WhenTopParameterIsLessThanEnvironmentCounts.ReturnsFirstTopSubscriptionEnvironmentRendersGroupedByMonth" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided+WhenTopParameterIsLessThanEnvironmentCounts.ReturnsFirstTopSubscriptionEnvironmentRendersGroupedByMonth(topParameter: 2, monthsBack: 2, dateTimeProviderMocked: Mock&lt;IDateTimeProvider:327&gt;, databaseDataAccessorMocked: Mock&lt;IDatabaseDataAccessor:154&gt;, subscriptionRepository: SubscriptionsRepository { })" time="0.0542854" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided+WhenTopParameterIsLessThanEnvironmentCounts.ReturnsEnvironmentsSortedByTypeAndThenByTotalRendersGroupedByMonth" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided+WhenTopParameterIsLessThanEnvironmentCounts.ReturnsEnvironmentsSortedByTypeAndThenByTotalRendersGroupedByMonth(topParameter: 2, monthsBack: 2, dateTimeProviderMocked: Mock&lt;IDateTimeProvider:328&gt;, databaseDataAccessorMocked: Mock&lt;IDatabaseDataAccessor:157&gt;, subscriptionRepository: SubscriptionsRepository { })" time="0.0523923" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsAllProductionSubscriptionRenderTotalsGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsAllProductionSubscriptionRenderTotalsGroupedByDay(daysBack: 50, expectedValue: 7136, dateTimeProvider: Mock&lt;IDateTimeProvider:278&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:127&gt;, repository: SubscriptionsRepository { })" time="0.3519591" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsAllProductionSubscriptionRenderTotalsGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsAllProductionSubscriptionRenderTotalsGroupedByDay(daysBack: 1, expectedValue: 912, dateTimeProvider: Mock&lt;IDateTimeProvider:287&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:146&gt;, repository: SubscriptionsRepository { })" time="0.0196742" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetRendersGroupedByMonthMethod+WhenTheSubscriptionIsNotFound.NullIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetRendersGroupedByMonthMethod+WhenTheSubscriptionIsNotFound.NullIsReturned(subscriptionId: 97, top: 183, dateTimeProviderMocked: Name984a1af2-a6b3-497a-b45e-c91b4870672d, subscriptionManager: SubscriptionManager { })" time="0.0015799" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsAllProductionSubscriptionRenderTotalsGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsAllProductionSubscriptionRenderTotalsGroupedByDay(daysBack: 15, expectedValue: 6224, dateTimeProvider: Mock&lt;IDateTimeProvider:325&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:153&gt;, repository: SubscriptionsRepository { })" time="0.1097263" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetSubscriptionToEnvironmentsMapAsyncMethod.ReturnsCorrectResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetSubscriptionToEnvironmentsMapAsyncMethod.ReturnsCorrectResult(subscriptionIds: [cc379ab4-3e24-4631-8250-dcb92c91c378], expectedMap: [[cc379ab4-3e24-4631-8250-dcb92c91c378] = [9328224e-2117-428a-a177-e232fa130911]], repository: SubscriptionsRepository { })" time="0.0220267" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetSubscriptionToEnvironmentsMapAsyncMethod.ReturnsCorrectResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetSubscriptionToEnvironmentsMapAsyncMethod.ReturnsCorrectResult(subscriptionIds: [cc379ab4-3e24-4631-8250-dcb92c91c378, f92c6b64-5b53-4c25-b0f8-791378b7aa5c], expectedMap: [[cc379ab4-3e24-4631-8250-dcb92c91c378] = [9328224e-2117-428a-a177-e232fa130911], [f92c6b64-5b53-4c25-b0f8-791378b7aa5c] = [ad790260-7433-43b7-ae4c-7bfb2b314646]], repository: SubscriptionsRepository { })" time="0.0035425" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetSubscriptionToEnvironmentsMapAsyncMethod.ReturnsCorrectResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetSubscriptionToEnvironmentsMapAsyncMethod.ReturnsCorrectResult(subscriptionIds: [], expectedMap: [], repository: SubscriptionsRepository { })" time="0.0124560" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsSumOfOtherSubscriptionEnvironmentRendersGroupedByMonth" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsSumOfOtherSubscriptionEnvironmentRendersGroupedByMonth(topParameter: 1, monthsBack: 50, expectedCount: 10704, dateTimeProvider: Mock&lt;IDateTimeProvider:259&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:116&gt;, repository: SubscriptionsRepository { })" time="1.2094898" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllDateTimeGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllDateTimeGroupedByDay(topParameter: 1, daysBack: 50, dateTimeProvider: Mock&lt;IDateTimeProvider:222&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:108&gt;, repository: SubscriptionsRepository { })" time="1.4878415" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetRendersGroupedByDayMethod+WhenTheSubscriptionIsFound+IfDateRangeIsNull+IfTopIsProvided.MapsTheRenders" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetRendersGroupedByDayMethod+WhenTheSubscriptionIsFound+IfDateRangeIsNull+IfTopIsProvided.MapsTheRenders(subscriptionId: 215, top: 233, renders: [SubscriptionRenderInfo { }, SubscriptionRenderInfo { }, SubscriptionRenderInfo { }], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:153&gt;, subscriptionManager: SubscriptionManager { })" time="0.0089434" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsSumOfOtherSubscriptionEnvironmentRendersGroupedByMonth" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsSumOfOtherSubscriptionEnvironmentRendersGroupedByMonth(topParameter: 3, monthsBack: 1, expectedCount: 456, dateTimeProvider: Mock&lt;IDateTimeProvider:271&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:120&gt;, repository: SubscriptionsRepository { })" time="0.0420797" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided+WhenTopParameterIsBiggerThanEnvironmentCounts.ReturnsEnvironmentsSortedByTypeAndThenByTotalRendersGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided+WhenTopParameterIsBiggerThanEnvironmentCounts.ReturnsEnvironmentsSortedByTypeAndThenByTotalRendersGroupedByDay(topEnvironments: 6, daysBack: 2, dateTimeProvider: Mock&lt;IDateTimeProvider:339&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:163&gt;, subscriptionRepository: SubscriptionsRepository { })" time="0.0670480" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserIsNotAccessible.ReturnsEntityNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserIsNotAccessible.ReturnsEntityNotFound(fetchedUser: UserModel { AvatarLink = &quot;example.com/simple.png&quot;, CreationDate = 2023-01-01T00:00:00.0000000, CustomerGuid = null, DeactivatedSubscriptions = [], Email = &quot;userEuEnv2@chili-publish.com&quot;, ... }, authenticatedUser: Mock&lt;IAuthenticatedUser:295&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:155&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:284&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0031980" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserIsNotAccessible.ReturnsEntityNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers+WhenUserIsNotAccessible.ReturnsEntityNotFound(fetchedUser: UserModel { AvatarLink = &quot;example.com/simple.png&quot;, CreationDate = 2023-07-12T09:26:14.3981166+02:00, CustomerGuid = null, DeactivatedSubscriptions = [], Email = &quot;userNoRoles@chili-publish.com&quot;, ... }, authenticatedUser: Mock&lt;IAuthenticatedUser:295&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:155&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:284&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0009075" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllDateTimeGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllDateTimeGroupedByDay(topParameter: 3, daysBack: 1, dateTimeProvider: Mock&lt;IDateTimeProvider:242&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:113&gt;, repository: SubscriptionsRepository { })" time="0.0573085" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllDateTimeGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllDateTimeGroupedByDay(topParameter: 6, daysBack: 15, dateTimeProvider: Mock&lt;IDateTimeProvider:262&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:118&gt;, repository: SubscriptionsRepository { })" time="0.1371169" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetRendersGroupedByMonthMethod+WhenTheSubscriptionIsFound+IfDateRangeIsNull+IfNoTopIsProvided.MapsTheRenders" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetRendersGroupedByMonthMethod+WhenTheSubscriptionIsFound+IfDateRangeIsNull+IfNoTopIsProvided.MapsTheRenders(subscriptionId: 30, renders: [SubscriptionRenderInfo { }, SubscriptionRenderInfo { }, SubscriptionRenderInfo { }], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:159&gt;, subscriptionManager: SubscriptionManager { })" time="0.0041712" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetRendersGroupedByDayMethod+WhenTheSubscriptionIsNotFound.NullIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetRendersGroupedByDayMethod+WhenTheSubscriptionIsNotFound.NullIsReturned(subscriptionId: 4, top: 156, daysBack: 218, dateTimeProviderMocked: Namee762fab2-63a1-4518-8a7c-e74310060cbb, subscriptionManager: SubscriptionManager { })" time="0.0016411" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetRendersGroupedByMonthMethod+WhenTheSubscriptionIsFound+IfDateRangeIsNotNull+IfTopIsProvided.MapsTheRenders" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetRendersGroupedByMonthMethod+WhenTheSubscriptionIsFound+IfDateRangeIsNotNull+IfTopIsProvided.MapsTheRenders(subscriptionId: 131, top: 227, renders: [SubscriptionRenderInfo { }, SubscriptionRenderInfo { }, SubscriptionRenderInfo { }], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:162&gt;, dateTimeProviderMocked: Name373a473a-58ab-49de-bf0a-d90d6c3a1a6c, subscriptionManager: SubscriptionManager { })" time="0.0060271" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsSumOfOtherSubscriptionEnvironmentRendersGroupedByMonth" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsSumOfOtherSubscriptionEnvironmentRendersGroupedByMonth(topParameter: 6, monthsBack: 15, expectedCount: 0, dateTimeProvider: Mock&lt;IDateTimeProvider:275&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:122&gt;, repository: SubscriptionsRepository { })" time="0.3072661" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided+WhenTopParameterIsBiggerThanEnvironmentCounts.ReturnsEnvironmentsSortedByTypeAndThenByTotalRendersGroupedByMonth" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided+WhenTopParameterIsBiggerThanEnvironmentCounts.ReturnsEnvironmentsSortedByTypeAndThenByTotalRendersGroupedByMonth(topEnvironments: 6, monthsBack: 2, dateTimeProviderMocked: Mock&lt;IDateTimeProvider:396&gt;, databaseDataAccessorMocked: Mock&lt;IDatabaseDataAccessor:188&gt;, subscriptionRepository: SubscriptionsRepository { })" time="0.0951236" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenLicensesAreProvided+WhenLicensedServerIsProvided.TheLastReportProcessorCountIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenLicensesAreProvided+WhenLicensedServerIsProvided.TheLastReportProcessorCountIsMapped(lastReportProcessorCount: 42, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:174&gt;, subscriptionManager: SubscriptionManager { })" time="0.0050101" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllTotalRendersGroupedByMonth" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllTotalRendersGroupedByMonth(topEnvironments: 1, monthsBack: 1, expectedResult: [0, 912], dateTimeProviderMocked: Mock&lt;IDateTimeProvider:375&gt;, databaseDataAccessorMocked: Mock&lt;IDatabaseDataAccessor:179&gt;, subscriptionRepository: SubscriptionsRepository { })" time="0.0554969" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheSandboxEnvironmentsTotalIsNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheSandboxEnvironmentsTotalIsNull(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:175&gt;, subscriptionManager: SubscriptionManager { })" time="0.0034929" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheProductionEnvironmentsTotalIsNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheProductionEnvironmentsTotalIsNull(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:176&gt;, subscriptionManager: SubscriptionManager { })" time="0.0114422" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheTenantInformationIsNotNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheTenantInformationIsNotNull(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:179&gt;, subscriptionManager: SubscriptionManager { })" time="0.0028103" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheSandboxEnvironmentsUsedIsEqualToSandboxCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheSandboxEnvironmentsUsedIsEqualToSandboxCount(environmentTypes: [Development, Sandbox, Production], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:182&gt;, subscriptionManager: SubscriptionManager { })" time="0.0036834" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheSandboxEnvironmentsUsedIsEqualToSandboxCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheSandboxEnvironmentsUsedIsEqualToSandboxCount(environmentTypes: [Production, Production, Sandbox], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:183&gt;, subscriptionManager: SubscriptionManager { })" time="0.0009630" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheSandboxEnvironmentsUsedIsEqualToSandboxCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheSandboxEnvironmentsUsedIsEqualToSandboxCount(environmentTypes: [], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:184&gt;, subscriptionManager: SubscriptionManager { })" time="0.0009106" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheProductionEnvironmentsUsedIsEqualToProductionCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheProductionEnvironmentsUsedIsEqualToProductionCount(environmentTypes: [Development, Sandbox, Production], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:185&gt;, subscriptionManager: SubscriptionManager { })" time="0.0112955" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheProductionEnvironmentsUsedIsEqualToProductionCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheProductionEnvironmentsUsedIsEqualToProductionCount(environmentTypes: [Production, Production, Sandbox], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:186&gt;, subscriptionManager: SubscriptionManager { })" time="0.0009846" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheProductionEnvironmentsUsedIsEqualToProductionCount" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenMaxEnvironmentsIsNull.TheProductionEnvironmentsUsedIsEqualToProductionCount(environmentTypes: [], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:187&gt;, subscriptionManager: SubscriptionManager { })" time="0.0009393" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsNotFound.ReturnsNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithIdOverload+WhenTheSubscriptionIsNotFound.ReturnsNull(authenticatedUser: Mock&lt;IAuthenticatedUser:326&gt;, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:188&gt;, manager: AuthenticatedSubscriptionManager { }, id: 79)" time="0.0026127" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenLicensesAreProvided.TheCoresTotalIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenLicensesAreProvided.TheCoresTotalIsMapped(value: 172, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:189&gt;, subscriptionManager: SubscriptionManager { })" time="0.0044461" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenLicensesAreProvided.TheLicenseTypeIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenLicensesAreProvided.TheLicenseTypeIsMapped(providedType: Production, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:190&gt;, subscriptionManager: SubscriptionManager { })" time="0.0039575" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllTotalRendersGroupedByMonth" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllTotalRendersGroupedByMonth(topEnvironments: 3, monthsBack: 5, expectedResult: [1288, 0, 1288, 0, 912, ...], dateTimeProviderMocked: Mock&lt;IDateTimeProvider:400&gt;, databaseDataAccessorMocked: Mock&lt;IDatabaseDataAccessor:187&gt;, subscriptionRepository: SubscriptionsRepository { })" time="0.1289238" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllTotalRendersGroupedByMonth" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllTotalRendersGroupedByMonth(topEnvironments: 6, monthsBack: 10, expectedResult: [0, 912, 0, 912, 0, ...], dateTimeProviderMocked: Mock&lt;IDateTimeProvider:407&gt;, databaseDataAccessorMocked: Mock&lt;IDatabaseDataAccessor:195&gt;, subscriptionRepository: SubscriptionsRepository { })" time="0.1092813" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenSubscriptionTypeIsIncorrect.ThrowsNotSupportedException" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound+WhenSubscriptionTypeIsIncorrect.ThrowsNotSupportedException(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:193&gt;, subscriptionManager: SubscriptionManager { })" time="0.0032989" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetRendersGroupedByDayMethod+WhenTheSubscriptionIsFound+IfDateRangeIsNotNull+IfNoTopIsProvided.MapsTheRenders" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetRendersGroupedByDayMethod+WhenTheSubscriptionIsFound+IfDateRangeIsNotNull+IfNoTopIsProvided.MapsTheRenders(subscriptionId: 127, renders: [SubscriptionRenderInfo { }, SubscriptionRenderInfo { }, SubscriptionRenderInfo { }], subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:195&gt;, dateTimeProviderMocked: Name9ee896a8-905c-4bca-9f69-ebf653d9b73e, subscriptionManager: SubscriptionManager { })" time="0.0048464" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsNotFound.NullIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsNotFound.NullIsReturned(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:196&gt;, subscriptionManager: SubscriptionManager { })" time="0.0029744" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsNotFound.ReturnsNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsNotFound.ReturnsNull(top: 5, dateTimeProvider: Mock&lt;IDateTimeProvider:481&gt;, repository: SubscriptionsRepository { })" time="0.0030986" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsNotFound.ReturnsNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsNotFound.ReturnsNull(top: null, dateTimeProvider: Mock&lt;IDateTimeProvider:483&gt;, repository: SubscriptionsRepository { })" time="0.0098448" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheBillingClientContactIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheBillingClientContactIsMapped(billingContactEmail: &quot;billingContactEmailfb14732e-4058-43b9-a177-7231855&quot;..., subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:199&gt;, subscriptionManager: SubscriptionManager { })" time="0.0040565" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheUsedRendersOnSaasIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheUsedRendersOnSaasIsMapped(pdfRenders: 186, imageRenders: 213, vdpRenders: 170, idmlRenders: 157, htmlRenders: 124, odfRenders: 200, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:200&gt;, subscriptionManager: SubscriptionManager { })" time="0.0271483" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheTemplateDesignerSeatsUsedIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheTemplateDesignerSeatsUsedIsMapped(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:201&gt;, userManagementServiceMocked: Mock&lt;IUserManagementService:368&gt;, subscriptionManager: SubscriptionManager { })" time="0.0050656" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheSubscriptionTypeIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheSubscriptionTypeIsMapped(subscriptionType: OnPremises, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:202&gt;, subscriptionManager: SubscriptionManager { })" time="0.0117192" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheGuidOfTheEnvironmentOfTheSubscriptionAreMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheGuidOfTheEnvironmentOfTheSubscriptionAreMapped(environmentGuid: bf531dee-251e-45a8-aeeb-19a511e6c4cf, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:203&gt;, subscriptionManager: SubscriptionManager { })" time="0.0035615" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheMaximumAmountOfStorageOfTheSubscriptionIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheMaximumAmountOfStorageOfTheSubscriptionIsMapped(maxStorage: 152, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:205&gt;, subscriptionManager: SubscriptionManager { })" time="0.0035093" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetMethod+WhenTheSubscriptionsListIsEmpty.EmptyCollectionIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetMethod+WhenTheSubscriptionsListIsEmpty.EmptyCollectionIsReturned(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:207&gt;, subscriptionManager: SubscriptionManager { })" time="0.0113544" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheUsedRendersOnPremIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheUsedRendersOnPremIsMapped(pdfRenders: 188, imageRenders: 72, vdpRenders: 97, idmlRenders: 46, htmlRenders: 111, odfRenders: 88, months: 129, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:206&gt;, subscriptionManager: SubscriptionManager { })" time="0.0141332" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheNameOfTheEnvironmentOfTheSubscriptionIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheNameOfTheEnvironmentOfTheSubscriptionIsMapped(environmentName: &quot;environmentName394dabdd-8fcc-46f7-a186-4f5239758b1&quot;..., subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:208&gt;, subscriptionManager: SubscriptionManager { })" time="0.0032851" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheNameOfTheEnvironmentOfTheSubscriptionIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheNameOfTheEnvironmentOfTheSubscriptionIsMapped(environmentName: null, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:209&gt;, subscriptionManager: SubscriptionManager { })" time="0.0009745" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheSubscriptionStatusIsInactive" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheSubscriptionStatusIsInactive(addedDays: 89, endDate: Sunday, 10 September 2023, dateTimeProviderMocked: Mock&lt;IDateTimeProvider:534&gt;, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:210&gt;, subscriptionManager: SubscriptionManager { })" time="0.0063786" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheStorageUsedIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheStorageUsedIsMapped(usedAssetsStorage: 173, usedDocumentsStorage: 36, usedFontsStorage: 202, usedCacheStorage: 39, usedBackupStorage: 102, usedOtherStorage: 244, environmentSize: 158, snapshotSize: 192, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:212&gt;, subscriptionManager: SubscriptionManager { })" time="0.0047419" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsNotProvided+WhenTheSubscriptionsListIsEmpty.EmptyCollectionIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsNotProvided+WhenTheSubscriptionsListIsEmpty.EmptyCollectionIsReturned(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:213&gt;, subscriptionManager: SubscriptionManager { })" time="0.0017879" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheRegionOfTheEnvironmentOfTheSubscriptionIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheRegionOfTheEnvironmentOfTheSubscriptionIsMapped(environmentRegion: &quot;environmentRegion0b29180a-9ab2-4c9f-bb8f-97a143184&quot;..., subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:214&gt;, subscriptionManager: SubscriptionManager { })" time="0.0032529" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheRegionOfTheEnvironmentOfTheSubscriptionIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheRegionOfTheEnvironmentOfTheSubscriptionIsMapped(environmentRegion: null, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:215&gt;, subscriptionManager: SubscriptionManager { })" time="0.0009777" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheGuidOfTheSubscriptionIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheGuidOfTheSubscriptionIsMapped(name: &quot;name359b249f-25ee-4308-8e31-984275776fed&quot;, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:216&gt;, subscriptionManager: SubscriptionManager { })" time="0.0032212" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetByGuidAsyncMethod+WhenSubscriptionIsNotFound.ReturnsNull" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetByGuidAsyncMethod+WhenSubscriptionIsNotFound.ReturnsNull" time="0.0353616" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheTemplateDesignerSeatsTotalIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheTemplateDesignerSeatsTotalIsMapped(templateDesignerSeatsTotal: 88, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:217&gt;, subscriptionManager: SubscriptionManager { })" time="0.0130525" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheIdOfTheSubscriptionIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheIdOfTheSubscriptionIsMapped(subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:218&gt;, subscriptionManager: SubscriptionManager { }, subscriptionGuid: 5932afad-6f5e-45c2-a2f3-8ce1108dce6c)" time="0.0028309" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+IsContentAdministratorAllowedAsyncMethod+WhenSubscriptionIsNotFound.ReturnsEntityNotFoundResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+IsContentAdministratorAllowedAsyncMethod+WhenSubscriptionIsNotFound.ReturnsEntityNotFoundResult(subscriptionId: b58ae91b-db41-4f9f-ae7a-dd409164d4ae, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:246&gt;, subscriptionRepository: SubscriptionsRepository { })" time="0.0056381" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheStartDateOfTheSubscriptionIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheStartDateOfTheSubscriptionIsMapped(startDate: Tuesday, 4 October 2022, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:219&gt;, subscriptionManager: SubscriptionManager { })" time="0.0033370" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheNameOfTheSubscriptionIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheNameOfTheSubscriptionIsMapped(name: &quot;namefbe7d5a8-293f-44b4-bd16-911aee4f65f9&quot;, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:221&gt;, subscriptionManager: SubscriptionManager { })" time="0.0110750" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers.ReturnsSubscriptionGuidWithAccessibleUsersInSubscription" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers.ReturnsSubscriptionGuidWithAccessibleUsersInSubscription(expectedUsers: [UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userSa@chili-publish.com&quot;, FirstName = &quot;John&quot;, HasFullAccess = False, Id = &quot;subscriptionAdministrator&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEaEnv1@chili-publish.com&quot;, FirstName = &quot;Arthur&quot;, HasFullAccess = False, Id = &quot;environmentAdministratorEnv1&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv1@chili-publish.com&quot;, FirstName = &quot;John&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv1&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv2@chili-publish.com&quot;, FirstName = &quot;Walter&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv2&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userNoRoles@chili-publish.com&quot;, FirstName = &quot;Walter&quot;, HasFullAccess = False, Id = &quot;userWithNoRoles&quot;, ... }, ...], authenticatedUser: Mock&lt;IAuthenticatedUser:373&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:220&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:407&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0126416" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers.ReturnsSubscriptionGuidWithAccessibleUsersInSubscription" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers.ReturnsSubscriptionGuidWithAccessibleUsersInSubscription(expectedUsers: [UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userSa@chili-publish.com&quot;, FirstName = &quot;John&quot;, HasFullAccess = False, Id = &quot;subscriptionAdministrator&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEaEnv1@chili-publish.com&quot;, FirstName = &quot;Arthur&quot;, HasFullAccess = False, Id = &quot;environmentAdministratorEnv1&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv1@chili-publish.com&quot;, FirstName = &quot;John&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv1&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv2@chili-publish.com&quot;, FirstName = &quot;Walter&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv2&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv1EuEnv2@chili-publish.com&quot;, FirstName = &quot;Nice&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv1userEnv2&quot;, ... }, ...], authenticatedUser: Mock&lt;IAuthenticatedUser:374&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:220&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:407&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0083692" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers.ReturnsSubscriptionGuidWithAccessibleUsersInSubscription" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers.ReturnsSubscriptionGuidWithAccessibleUsersInSubscription(expectedUsers: [UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userSa@chili-publish.com&quot;, FirstName = &quot;John&quot;, HasFullAccess = False, Id = &quot;subscriptionAdministrator&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEaEnv1@chili-publish.com&quot;, FirstName = &quot;Arthur&quot;, HasFullAccess = False, Id = &quot;environmentAdministratorEnv1&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv1@chili-publish.com&quot;, FirstName = &quot;John&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv1&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv2@chili-publish.com&quot;, FirstName = &quot;Walter&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv2&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userNoRoles@chili-publish.com&quot;, FirstName = &quot;Walter&quot;, HasFullAccess = False, Id = &quot;userWithNoRoles&quot;, ... }, ...], authenticatedUser: Mock&lt;IAuthenticatedUser:376&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:220&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:407&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0025492" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers.ReturnsSubscriptionGuidWithAccessibleUsersInSubscription" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUsersAsyncMethodWithGuidOverload+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasUsers.ReturnsSubscriptionGuidWithAccessibleUsersInSubscription(expectedUsers: [UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userSa@chili-publish.com&quot;, FirstName = &quot;John&quot;, HasFullAccess = False, Id = &quot;subscriptionAdministrator&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEaEnv1@chili-publish.com&quot;, FirstName = &quot;Arthur&quot;, HasFullAccess = False, Id = &quot;environmentAdministratorEnv1&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv1@chili-publish.com&quot;, FirstName = &quot;John&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv1&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userEuEnv1EuEnv2@chili-publish.com&quot;, FirstName = &quot;Nice&quot;, HasFullAccess = False, Id = &quot;environmentUserEnv1userEnv2&quot;, ... }, UserModel { AvatarLink = &quot;example.com/simple.png&quot;, Email = &quot;userSaDeactivated@chili-publish.com&quot;, FirstName = &quot;James&quot;, HasFullAccess = False, Id = &quot;subscriptionAdministratorDeactivated&quot;, ... }], authenticatedUser: Mock&lt;IAuthenticatedUser:375&gt;.Object, subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:220&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:407&gt;, manager: AuthenticatedSubscriptionManager { })" time="0.0137385" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheSalesForceNameOfCustomerIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheSalesForceNameOfCustomerIsMapped(salesForceName: &quot;salesForceName5af2f88d-fd67-487d-8974-6bf9f18b0e1a&quot;, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:222&gt;, subscriptionManager: SubscriptionManager { })" time="0.0035334" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheTotalUsedStorageOfTheEnvironmentOfTheSubscriptionIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheTotalUsedStorageOfTheEnvironmentOfTheSubscriptionIsMapped(usedStorage: 199, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:224&gt;, subscriptionManager: SubscriptionManager { })" time="0.0032172" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetGuidsOfAssociatedEnvironmentsAsyncMethod.CorrectResultIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetGuidsOfAssociatedEnvironmentsAsyncMethod.CorrectResultIsReturned(repositoryResult: [], expectedResult: EntityNotFoundResult`1 { ErrorMessage = &quot;Subscription isn't found.&quot;, IsError = True, IsSuccess = False }, subscriptionId: 39a16784-6a74-49bc-bf31-131aca9f422a, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:223&gt;, subscriptionManager: SubscriptionManager { })" time="0.0147335" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheMaximumAmountOfRendersOfTheSubscriptionIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheMaximumAmountOfRendersOfTheSubscriptionIsMapped(maxRenders: 243, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:225&gt;, subscriptionManager: SubscriptionManager { })" time="0.0032681" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetGuidsOfAssociatedEnvironmentsAsyncMethod.CorrectResultIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetGuidsOfAssociatedEnvironmentsAsyncMethod.CorrectResultIsReturned(repositoryResult: [[00000000-0000-0000-0000-000000000000] = [00000000-0000-0000-0000-000000000000, 91525db5-4506-459f-81a5-e97d72b6682c]], expectedResult: SuccessResult`1 { IsError = False, IsSuccess = True }, subscriptionId: 00000000-0000-0000-0000-000000000000, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:223&gt;, subscriptionManager: SubscriptionManager { })" time="0.0017463" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheTypeOfAllTheEnvironmentsOfTheSubscriptionAreMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheTypeOfAllTheEnvironmentsOfTheSubscriptionAreMapped(environmentType: Development, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:226&gt;, subscriptionManager: SubscriptionManager { })" time="0.0053345" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheSubscriptionStatusIsActive" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheSubscriptionStatusIsActive(addedDays: 0, endDate: null, dateTimeProviderMocked: Mock&lt;IDateTimeProvider:566&gt;, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:227&gt;, subscriptionManager: SubscriptionManager { })" time="0.0034306" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheSubscriptionStatusIsActive" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheSubscriptionStatusIsActive(addedDays: -1, endDate: Sunday, 29 October 2023, dateTimeProviderMocked: Mock&lt;IDateTimeProvider:567&gt;, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:228&gt;, subscriptionManager: SubscriptionManager { })" time="0.0010851" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheSubscriptionStatusIsActive" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheSubscriptionStatusIsActive(addedDays: 0, endDate: Saturday, 29 March 2025, dateTimeProviderMocked: Mock&lt;IDateTimeProvider:568&gt;, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:229&gt;, subscriptionManager: SubscriptionManager { })" time="0.0009558" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheExactNameOfCustomerIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheExactNameOfCustomerIsMapped(exactName: &quot;exactNameb3631338-6fa1-4c7e-b58d-79f3f00577ed&quot;, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:230&gt;, subscriptionManager: SubscriptionManager { })" time="0.0097799" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheEndDateOfTheSubscriptionIsMapped" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+GetAsyncMethod+WhenSubscriptionIdIsProvided+WhenTheSubscriptionIsFound.TheEndDateOfTheSubscriptionIsMapped(endDate: Monday, 24 March 2025, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:231&gt;, subscriptionManager: SubscriptionManager { })" time="0.0038070" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetRendersGroupedByDayMethod+WhenTheSubscriptionIsFound+IfDateRangeIsNotNull+IfTopIsProvided.MapsTheRenders" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetRendersGroupedByDayMethod+WhenTheSubscriptionIsFound+IfDateRangeIsNotNull+IfTopIsProvided.MapsTheRenders(subscriptionId: 246, top: 28, renders: [SubscriptionRenderInfo { }, SubscriptionRenderInfo { }, SubscriptionRenderInfo { }], subscriptionsRepository: Mock&lt;ISubscriptionsRepository:233&gt;, dateTimeProviderMocked: Mock&lt;IDateTimeProvider:572&gt;, subscriptionManager: SubscriptionManager { })" time="0.0054651" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionManagerTests+TheGetEnvironmentRolesAllowedAsyncMethod+WhenSubscriptionIsNotFound.TheEntityNotFoundResultIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionManagerTests+TheGetEnvironmentRolesAllowedAsyncMethod+WhenSubscriptionIsNotFound.TheEntityNotFoundResultIsReturned(subscriptionId: ecaaf73c-f9ac-4520-b140-cc9db07db8de, subscriptionRepositoryMocked: Mock&lt;ISubscriptionsRepository:234&gt;, subscriptionManager: SubscriptionManager { })" time="0.0029580" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsSumOfOtherSubscriptionRenderForTheSpecifiedDateRangeGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsSumOfOtherSubscriptionRenderForTheSpecifiedDateRangeGroupedByDay(topParameter: 1, daysBack: 50, expectedCount: 10704, dateTimeProvider: Mock&lt;IDateTimeProvider:365&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:175&gt;, repository: SubscriptionsRepository { })" time="1.1813861" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasNoUsers.ReturnsEntityNotFoundResult" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="AuthenticatedSubscriptionManagerTests+TheGetSubscriptionUserAsyncMethod+WhenTheSubscriptionIsFound+WhenTheSubscriptionHasNoUsers.ReturnsEntityNotFoundResult(subscriptionsRepositoryMock: Mock&lt;ISubscriptionsRepository:235&gt;, userManagementServiceMock: Mock&lt;IUserManagementService:428&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:391&gt;, subscription: Subscription { Customer = Customer { BillingContactEmail = &quot;BillingContactEmail8fb50e72-1105-448c-9681-498ec0b&quot;..., ExactName = &quot;ExactName19ad2c8c-f1ef-4704-a5d1-a0c1215fbc26&quot;, Guid = 44c1d314-d714-4b8c-89e2-65b4bcda640e, Id = 28, SalesForceName = &quot;SalesForceNamedbdf80b9-a23c-4660-92a1-a362c98b1187&quot;, ... }, EndDate = Thursday, 5 January 2023, Environments = [Environment { ... }, Environment { ... }, Environment { ... }], Guid = c49f0b58-5871-4c49-8ae3-db6fe23d7c62, HasContentAdministrators = True, ... }, user: UserModel { AvatarLink = &quot;AvatarLink91f41c31-9d45-43bb-b87a-af27f16a0056&quot;, CreationDate = 2024-01-04T13:17:57.1993416, CustomerGuid = ff4bb5d3-0484-4b8c-8f97-942788f15a4d, DeactivatedSubscriptions = [c22f0447-3cb6-493b-95ee-15dd0c338ab9, dcd7fbd6-8d62-4333-be74-d31e0848342c, f454b200-8c75-4f5f-b6f0-9a1d759e0a5c], Email = &quot;Email07535394-0360-43ee-a146-f4da8430a46c&quot;, ... }, manager: AuthenticatedSubscriptionManager { })" time="0.0041418" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsSumOfOtherSubscriptionRenderForTheSpecifiedDateRangeGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsSumOfOtherSubscriptionRenderForTheSpecifiedDateRangeGroupedByDay(topParameter: 3, daysBack: 1, expectedCount: 456, dateTimeProvider: Mock&lt;IDateTimeProvider:374&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:180&gt;, repository: SubscriptionsRepository { })" time="0.0316142" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsSumOfAllSubscriptionMonthlyRenders" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsSumOfAllSubscriptionMonthlyRenders(monthsBack: 50, expectedCount: 14272, dateTimeProvider: Mock&lt;IDateTimeProvider:378&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:186&gt;, repository: SubscriptionsRepository { })" time="1.0378890" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsSumOfAllSubscriptionMonthlyRenders" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsSumOfAllSubscriptionMonthlyRenders(monthsBack: 1, expectedCount: 1824, dateTimeProvider: Mock&lt;IDateTimeProvider:406&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:191&gt;, repository: SubscriptionsRepository { })" time="0.0255300" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsSumOfOtherSubscriptionRenderForTheSpecifiedDateRangeGroupedByDay" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedByDay+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsSumOfOtherSubscriptionRenderForTheSpecifiedDateRangeGroupedByDay(topParameter: 6, daysBack: 15, expectedCount: 0, dateTimeProvider: Mock&lt;IDateTimeProvider:402&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:190&gt;, repository: SubscriptionsRepository { })" time="0.2119447" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsSumOfAllSubscriptionMonthlyRenders" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsSumOfAllSubscriptionMonthlyRenders(monthsBack: 15, expectedCount: 12448, dateTimeProvider: Mock&lt;IDateTimeProvider:411&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:204&gt;, repository: SubscriptionsRepository { })" time="0.2193108" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetByIdWithLastDaysRendersAsyncMethod+WhenSubscriptionIsFound.ReturnsSubscriptionWithLastDaysRendersOnlyOnPrem" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetByIdWithLastDaysRendersAsyncMethod+WhenSubscriptionIsFound.ReturnsSubscriptionWithLastDaysRendersOnlyOnPrem(subscriptionId: 127, rendersCount: 194, days: 79)" time="4.3397928" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetByIdWithLastDaysRendersAsyncMethod+WhenSubscriptionIsFound.ReturnsSubscription" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetByIdWithLastDaysRendersAsyncMethod+WhenSubscriptionIsFound.ReturnsSubscription(subscriptionId: 88, days: 213)" time="0.0065250" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllDateTimeGropedByMonth" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllDateTimeGropedByMonth(topEnvironments: 1, monthsBack: 50, dateTimeProviderMocked: Mock&lt;IDateTimeProvider:469&gt;, databaseDataAccessorMocked: Mock&lt;IDatabaseDataAccessor:219&gt;, subscriptionRepository: SubscriptionsRepository { })" time="0.9169804" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllDateTimeGropedByMonth" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllDateTimeGropedByMonth(topEnvironments: 3, monthsBack: 1, dateTimeProviderMocked: Mock&lt;IDateTimeProvider:477&gt;, databaseDataAccessorMocked: Mock&lt;IDatabaseDataAccessor:223&gt;, subscriptionRepository: SubscriptionsRepository { })" time="0.0265015" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetByIdWithLastDaysRendersAsyncMethod+WhenSubscriptionIsFound.ReturnsSubscriptionWithLastDaysRendersOnlyOnSaas" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetByIdWithLastDaysRendersAsyncMethod+WhenSubscriptionIsFound.ReturnsSubscriptionWithLastDaysRendersOnlyOnSaas(subscriptionId: 109, rendersCount: 143, days: 234)" time="0.1991417" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllDateTimeGropedByMonth" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsProvided.ReturnsAllDateTimeGropedByMonth(topEnvironments: 6, monthsBack: 15, dateTimeProviderMocked: Mock&lt;IDateTimeProvider:488&gt;, databaseDataAccessorMocked: Mock&lt;IDatabaseDataAccessor:229&gt;, subscriptionRepository: SubscriptionsRepository { })" time="0.0779132" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsAllProductionSubscriptionMonthlyRenderTotals" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsAllProductionSubscriptionMonthlyRenderTotals(monthsBack: 50, expectedCount: 7136, dateTimeProvider: Mock&lt;IDateTimeProvider:585&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:252&gt;, repository: SubscriptionsRepository { })" time="0.2182836" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsAllProductionSubscriptionMonthlyRenderTotals" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsAllProductionSubscriptionMonthlyRenderTotals(monthsBack: 1, expectedCount: 912, dateTimeProvider: Mock&lt;IDateTimeProvider:586&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:253&gt;, repository: SubscriptionsRepository { })" time="0.0101353" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services.SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsAllProductionSubscriptionMonthlyRenderTotals" type="CHILI.GraFx.Platform.API.Tests.Modules.Subscription.Services" method="SubscriptionsRepositoryTests+TheGetRendersGroupedMyMonthMethod+WhenSubscriptionIsFound+WhenTopParameterIsNotProvided.ReturnsAllProductionSubscriptionMonthlyRenderTotals(monthsBack: 15, expectedCount: 6224, dateTimeProvider: Mock&lt;IDateTimeProvider:587&gt;, databaseDataAccessor: Mock&lt;IDatabaseDataAccessor:255&gt;, repository: SubscriptionsRepository { })" time="0.0753898" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="142" passed="142" failed="0" skipped="0" name="Test collection for CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" time="1.072">
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenAuthorizationReturnsFalse.ReturnsHttpForbidden" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenAuthorizationReturnsFalse.ReturnsHttpForbidden(validator: Mock&lt;IValidator&lt;InviteUsersModel&gt;:21&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:66&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:48&gt;, subscriptionManagerResult: [[631102bf-08a9-415d-a75e-01e741df79a8] = [f43f98e2-0b82-446a-9ff3-4bde8ede1e16, e5b3cad0-0caf-4ef5-b0b5-6046ab09cf57, c98ab217-d1ae-4e2a-bb59-90030acc5d32], [6296ee79-e846-48bc-a0bf-9233b057aedb] = [54262ad4-f4be-4bbb-a03c-d9c513ca078f, 45d65f2d-de2d-4fb3-ab14-5555beb9ea89, a04d5488-6d66-45ea-aab4-80a6c7e30f5f], [ae6c7ce9-7c1d-4235-b5d7-4bdd2c680541] = [810db9a8-2482-450f-a085-f7473bbec2ce, ab46cd55-0312-4b9f-9e5d-ac243946d3bc, e3084516-2176-4258-8f33-e6c4366b5980]], model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [35225034-3e5d-44d3-a7b4-1bdd187a9439, 8540455e-b40e-42f9-af10-2bb09bc7ff94, db22051a-334a-45cc-a574-09bb92743414], UserEmails = [&quot;15e2aaed-92f6-4513-a21a-0f064a975e43&quot;, &quot;f1987e53-40ea-40bb-a715-71712db1a49d&quot;, &quot;44280d42-89f7-4ad4-baa7-b76b849907fe&quot;] }, handler: UserManagementHandler { })" time="0.0390380" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserNameAsyncFunction+IfNoFirstNameIsProvided.TheResultShouldEqualsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserNameAsyncFunction+IfNoFirstNameIsProvided.TheResultShouldEqualsBadRequest(userId: &quot;userId9c4dcd34-77e0-4db2-a15c-83754b4eea9c&quot;, nameModel: UpdateUserNameModel { FirstName = null, LastName = &quot;LastName4fb475b2-a90a-4889-854e-6b8696cc189e&quot; }, handler: UserManagementHandler { })" time="0.0024428" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserManagementServiceThrowsIdentityServerExceptionDueToError.ReturnsFailedOperationResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserManagementServiceThrowsIdentityServerExceptionDueToError.ReturnsFailedOperationResult(signatureVerifier: Mock&lt;ISignatureVerifier:23&gt;, loggerMock: Mock&lt;ILogger&lt;UserManagementHandler&gt;:23&gt;, userManagementService: Mock&lt;IUserManagementService:66&gt;, testUserId: &quot;testUserId06f61ccf-019e-4b7b-aafc-bad6785ea00f&quot;, testSignature: &quot;testSignaturec8e84c01-394c-492f-8851-cc2a7b3de603&quot;, handler: UserManagementHandler { })" time="0.0618619" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserManagementServiceThrowsIdentityServerExceptionDueToError.LogsErrorMessage" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserManagementServiceThrowsIdentityServerExceptionDueToError.LogsErrorMessage(signatureVerifier: Mock&lt;ISignatureVerifier:24&gt;, loggerMock: Mock&lt;ILogger&lt;UserManagementHandler&gt;:24&gt;, userManagementService: Mock&lt;IUserManagementService:67&gt;, testUserId: &quot;testUserId6389d86e-6f8d-448c-8da9-44e8b921b1cb&quot;, testSignature: &quot;testSignature14f98e2f-a0c4-44c9-a28b-ec0d6f9913ee&quot;, testException: CHILI.GraFx.Platform.Services.External.Identity.Exceptions.IdentityServerErrorException: Exception of type 'CHILI.GraFx.Platform.Services.External.Identity.Exceptions.IdentityServerErrorException' was thrown., handler: UserManagementHandler { })" time="0.0392362" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserEnvironmentsAsyncMethod+WhenUpdateUserEnvironmentsAreFailed.ReturnsHttpInternalServerError" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserEnvironmentsAsyncMethod+WhenUpdateUserEnvironmentsAreFailed.ReturnsHttpInternalServerError(userId: &quot;userId22e7e695-53a6-4964-9086-e648ac3e9dc7&quot;, subscriptionId: 8e1b24c3-5bf5-479f-8488-7991cefad96d, model: UserEnvironmentsModel { EnvironmentRoles = [[933aeadd-7f5c-4568-9be7-f3244def8dec] = [EA, EU, CA], [491d5e27-5f18-4285-8850-95467118e686] = [EA, EU, CA], [6bec3038-70c4-4353-a970-5a87a5ec0ff6] = [EA, EU, CA]] }, validator: Mock&lt;IValidator&lt;UserEnvironmentsModel&gt;:26&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:61&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:23&gt;, manager: Mock&lt;IUserManager:23&gt;, handler: UserManagementHandler { })" time="0.0225887" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserEnvironmentsAsyncMethod+WhenAuthorizationRuleCheckReturnsFalse.ReturnsHttpForbidden" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserEnvironmentsAsyncMethod+WhenAuthorizationRuleCheckReturnsFalse.ReturnsHttpForbidden(validator: Mock&lt;IValidator&lt;UserEnvironmentsModel&gt;:27&gt;, model: UserEnvironmentsModel { EnvironmentRoles = [[287076a3-1945-4b95-a264-cbbc5cdeea44] = [EA, EU, CA], [f54feec6-d023-40c3-9cc1-c069b0b95384] = [EA, EU, CA], [2f6469fc-061a-4e15-a193-7ceeccda718f] = [EA, EU, CA]] }, handler: UserManagementHandler { })" time="0.0017313" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenMappingOfSubscriptionsWithEnvironmentsReturnedErrorResult.TheResultShouldEqualsUnauthorized" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenMappingOfSubscriptionsWithEnvironmentsReturnedErrorResult.TheResultShouldEqualsUnauthorized(managerResult: EntityNotFoundResult`1 { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.NotFoundObjectResult), authRuleValidator: Mock&lt;IAuthRuleValidator:64&gt;, validator: Mock&lt;IValidator&lt;InviteUsersModel&gt;:27&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:61&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:94&gt;, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [48a7e02a-5d2d-4d2f-85bd-71bc8db714d1, 3922e5d8-8e5c-4317-a750-7ae58ecc9613, 2b3938ad-f1fc-4ffe-b626-7f13e7c3e2fa], UserEmails = [&quot;ba0af2da-44f6-414e-90b4-a16225237957&quot;, &quot;300635e4-2488-48f7-94b4-cdc207da92b5&quot;, &quot;97a7dc8b-b420-4c66-9bcc-320f328b11e1&quot;] }, handler: UserManagementHandler { })" time="0.0043105" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenMappingOfSubscriptionsWithEnvironmentsReturnedErrorResult.TheResultShouldEqualsUnauthorized" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenMappingOfSubscriptionsWithEnvironmentsReturnedErrorResult.TheResultShouldEqualsUnauthorized(managerResult: ServiceErrorResult`1 { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.ObjectResult), authRuleValidator: Mock&lt;IAuthRuleValidator:64&gt;, validator: Mock&lt;IValidator&lt;InviteUsersModel&gt;:27&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:61&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:94&gt;, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [48a7e02a-5d2d-4d2f-85bd-71bc8db714d1, 3922e5d8-8e5c-4317-a750-7ae58ecc9613, 2b3938ad-f1fc-4ffe-b626-7f13e7c3e2fa], UserEmails = [&quot;ba0af2da-44f6-414e-90b4-a16225237957&quot;, &quot;300635e4-2488-48f7-94b4-cdc207da92b5&quot;, &quot;97a7dc8b-b420-4c66-9bcc-320f328b11e1&quot;] }, handler: UserManagementHandler { })" time="0.0055936" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheAddUserAsyncFunction+WhenModelIsInvalid.TheResultShouldEqualsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheAddUserAsyncFunction+WhenModelIsInvalid.TheResultShouldEqualsBadRequest(validator: Mock&lt;IValidator&lt;AddUserModel&gt;:29&gt;, model: AddUserModel { CustomerGuid = 03b55f76-d907-443f-ae34-dc94b8f8d3c1, Email = &quot;Email1ae44475-05e0-4630-b936-adffcf625456&quot;, FirstName = &quot;FirstNamec7c0a5d1-faa8-42ba-b331-8fafd8af02b9&quot;, LastName = &quot;LastName16570604-04a0-4143-b319-bb0d122435e2&quot;, SubscriptionIds = [aa3007d3-8adb-4aee-b903-db555714db27, 3c7f5098-3fdf-4510-91d0-71e0ef469c61, 30b00197-9aee-4ff1-a547-d25e4d998c15] }, handler: UserManagementHandler { })" time="0.0149540" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenUserDoesNotMatchAuthRule.UserDoesNotHaveAnAccess" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenUserDoesNotMatchAuthRule.UserDoesNotHaveAnAccess(userId: &quot;userIdbe9e0400-4423-447b-a00b-3a9140418cc6&quot;, handler: UserManagementHandler { }, subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Saturday, 21 June 2025, Environments = [...], Guid = a821d0a8-74c6-4b5a-9315-74a25bf28200, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Wednesday, 9 July 2025, Environments = [...], Guid = 4072aafd-f45f-4d0b-8c35-a33384c0beea, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Friday, 24 March 2023, Environments = [...], Guid = 72c7be36-67d6-4d7d-bed5-9ce964c67575, HasContentAdministrators = True, ... }], dataAccessor: Mock&lt;IDatabaseDataAccessor:51&gt;)" time="0.0042320" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenSignatureIsNullOrWhitespace.ReturnsBadRequestOperationResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenSignatureIsNullOrWhitespace.ReturnsBadRequestOperationResult(signature: null, handler: UserManagementHandler { })" time="0.0094475" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenSignatureIsNullOrWhitespace.ReturnsBadRequestOperationResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenSignatureIsNullOrWhitespace.ReturnsBadRequestOperationResult(signature: &quot;&quot;, handler: UserManagementHandler { })" time="0.0000409" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenSignatureIsNullOrWhitespace.ReturnsBadRequestOperationResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenSignatureIsNullOrWhitespace.ReturnsBadRequestOperationResult(signature: &quot; &quot;, handler: UserManagementHandler { })" time="0.0000101" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserEnvironmentsAsyncMethod+WhenUserIdIsWhitespace.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserEnvironmentsAsyncMethod+WhenUserIdIsWhitespace.ReturnsHttpBadRequest(subscriptionId: 71fd97dc-1e1f-403b-b7dc-faa0ab5562e2, model: UserEnvironmentsModel { EnvironmentRoles = [[87c22746-c706-48cb-9d16-9f0a561aa476] = [EA, EU, CA], [0a152bdc-8d6b-44c1-b3cf-a1684f5e41ca] = [EA, EU, CA], [b35d4c45-1fa1-4ef6-9a92-636937b622ea] = [EA, EU, CA]] }, handler: UserManagementHandler { })" time="0.0011442" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserNameAsyncFunction+IfNoUserIdIsProvided.TheResultShouldEqualsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserNameAsyncFunction+IfNoUserIdIsProvided.TheResultShouldEqualsBadRequest(nameModel: UpdateUserNameModel { FirstName = &quot;FirstName3a2ee7b4-b1d9-40c2-a220-e4d1a84f73e3&quot;, LastName = &quot;LastNamea7905798-f859-448d-a6f9-6b1df0e7dee9&quot; }, handler: UserManagementHandler { })" time="0.0012459" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenModelIsInvalid.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenModelIsInvalid.ReturnsBadRequestResult(validator: Mock&lt;IValidator&lt;MarkUserMigratedModel&gt;:35&gt;, testModel: MarkUserMigratedModel { UserEmail = &quot;UserEmailbee2b242-f62d-48a7-8f85-a75ee8f591a9&quot; }, testSignature: &quot;testSignature45b57ade-1f24-485b-a9ce-afeac38475e6&quot;, handler: UserManagementHandler { })" time="0.0047536" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserIdIsNullOrWhitespace.ReturnsBadRequestOperationResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserIdIsNullOrWhitespace.ReturnsBadRequestOperationResult(testUserId: null, signature: &quot;signature40a21403-2f22-4098-bdeb-980440309887&quot;, handler: UserManagementHandler { })" time="0.0013063" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserIdIsNullOrWhitespace.ReturnsBadRequestOperationResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserIdIsNullOrWhitespace.ReturnsBadRequestOperationResult(testUserId: &quot;&quot;, signature: &quot;signaturee5e83189-3ec5-4b3a-86a2-2ebdf034910e&quot;, handler: UserManagementHandler { })" time="0.0000494" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserIdIsNullOrWhitespace.ReturnsBadRequestOperationResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserIdIsNullOrWhitespace.ReturnsBadRequestOperationResult(testUserId: &quot; &quot;, signature: &quot;signature5d5c9bfa-3231-44ab-972c-37f91102b589&quot;, handler: UserManagementHandler { })" time="0.0000130" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheAddUserAsyncFunction+WhenTheSignatureIsValid+WhenTheCreationOfTheUserFails.TheResultShouldEqualsFailed" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheAddUserAsyncFunction+WhenTheSignatureIsValid+WhenTheCreationOfTheUserFails.TheResultShouldEqualsFailed(validator: Mock&lt;IValidator&lt;AddUserModel&gt;:39&gt;, signatureVerifier: Mock&lt;ISignatureVerifier:39&gt;, userManagementService: Mock&lt;IUserManagementService:129&gt;, model: AddUserModel { CustomerGuid = cb09be9a-a919-4037-b317-8fa87ac388b7, Email = &quot;Email0da078e4-f8b4-405b-a544-f3d616e07d38&quot;, FirstName = &quot;FirstName8c45fe6d-15a3-454c-af05-4cedaf0946c7&quot;, LastName = &quot;LastName8e070689-41f9-4f9d-8742-9ccd08bcc794&quot;, SubscriptionIds = [35129733-96cc-40eb-b9bf-e0b9d12cf075, 4a1a1f5f-9b64-4d4d-919f-1eddeb457c02, d7b18c76-a449-49c3-8f32-a2689913b30c] }, signature: &quot;signaturee47413fa-65e9-48f6-8d5b-2531ae5bdb0e&quot;, handler: UserManagementHandler { })" time="0.0140280" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheAddUserAsyncFunction+WhenTheSignatureIsValid+TheUserManagementServiceIsCalledWithTheCorrectArguments.TheResultShouldEqualsFailed" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheAddUserAsyncFunction+WhenTheSignatureIsValid+TheUserManagementServiceIsCalledWithTheCorrectArguments.TheResultShouldEqualsFailed(validator: Mock&lt;IValidator&lt;AddUserModel&gt;:40&gt;, signatureVerifier: Mock&lt;ISignatureVerifier:40&gt;, userManagementService: Mock&lt;IUserManagementService:132&gt;, model: AddUserModel { CustomerGuid = 765fe334-3e32-4529-851c-43edc94f168a, Email = &quot;Emaild9d6a5a0-d01d-4289-991f-d741c1208100&quot;, FirstName = &quot;FirstName517e6892-0197-4b40-96b2-4fbe6678bd82&quot;, LastName = &quot;LastName7866ff93-adae-4bbf-af38-63d232d48027&quot;, SubscriptionIds = [8f9df8b3-e69a-4f6c-b4fa-f8c79e7c679e, e4deb4a5-b87e-4fd6-a372-8bb35b4474e1, ad1dafb4-9fa1-4cea-adf9-cd14dd7f9b1c] }, signature: &quot;signature9437df2c-078c-4cab-82a7-3a30b5ae51a2&quot;, handler: UserManagementHandler { })" time="0.0070353" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserNameAsyncFunction+WhenTheCreationOfTheUserSucceeds.TheResultShouldEqualsOk" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserNameAsyncFunction+WhenTheCreationOfTheUserSucceeds.TheResultShouldEqualsOk(userManagementService: Mock&lt;IUserManagementService:137&gt;, userId: &quot;userId1aac3036-658f-4bd7-8a02-54f5d8318fc8&quot;, nameModel: UpdateUserNameModel { FirstName = &quot;FirstName4d2e1535-3faa-4811-9ef9-1b0db6c2968e&quot;, LastName = &quot;LastName3cecd370-ee6e-4f5a-9a8e-cf8eb8b38e8a&quot; }, handler: UserManagementHandler { })" time="0.0020305" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenSubscriptionDoesNotExistOrNotAccessible.ReturnsHttpNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenSubscriptionDoesNotExistOrNotAccessible.ReturnsHttpNotFound(isSubscriptionAccessible: True, isSubscriptionExist: False, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.NotFoundObjectResult), authRuleValidator: Mock&lt;IAuthRuleValidator:93&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:39&gt;, handler: UserManagementHandler { }, userId: &quot;userIdd5df596b-21dd-4af2-9140-227886ab7e0f&quot;, subscriptionId: 8c3682e9-32dc-44ca-bb44-addabf660d4b, role: SA)" time="0.0170668" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenSubscriptionDoesNotExistOrNotAccessible.ReturnsHttpNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenSubscriptionDoesNotExistOrNotAccessible.ReturnsHttpNotFound(isSubscriptionAccessible: False, isSubscriptionExist: True, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.ForbidResult), authRuleValidator: Mock&lt;IAuthRuleValidator:93&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:39&gt;, handler: UserManagementHandler { }, userId: &quot;userIdd5df596b-21dd-4af2-9140-227886ab7e0f&quot;, subscriptionId: 8c3682e9-32dc-44ca-bb44-addabf660d4b, role: SA)" time="0.0012410" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenSignatureIsNotValid.ReturnsNotFoundOperationResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenSignatureIsNotValid.ReturnsNotFoundOperationResult(signatureVerifier: Mock&lt;ISignatureVerifier:44&gt;, testUserId: &quot;testUserId75d821ec-cdeb-4ec5-a77f-dfd9e0b6bab5&quot;, testSignature: &quot;testSignatured080a3f6-3951-47c5-adc4-5c62607279a7&quot;, handler: UserManagementHandler { })" time="0.0029675" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenIdentityServerGenerateErrorDuringUserUpdating.UserIsNotDeactivatedAndReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenIdentityServerGenerateErrorDuringUserUpdating.UserIsNotDeactivatedAndReturnsProblem(subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Saturday, 11 February 2023, Environments = [...], Guid = 4b43b44b-ee55-40ca-85d2-048df93d9591, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Sunday, 9 July 2023, Environments = [...], Guid = a7b829b5-a4db-4732-b338-cca8ca7fe7cf, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Friday, 23 December 2022, Environments = [...], Guid = 86720657-9e1b-40cc-b2f6-6710ad39010d, HasContentAdministrators = True, ... }], dataAccessor: Mock&lt;IDatabaseDataAccessor:60&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLinka59dd45b-f088-4834-b37c-d750d5ea7acd&quot;, CreationDate = 2023-06-13T13:55:52.4709202, CustomerGuid = cc592354-d39a-4d95-930a-6c357447b087, DeactivatedSubscriptions = [f6e8d936-91ed-4aca-b86b-3aca297c105e, b4a3efd7-7fd9-4839-b825-f726f89b2ad6, 978217b0-cc54-4a4e-a7b1-530ce7735e49], Email = &quot;Emailc98f058b-e392-4019-8a64-55602c1d0497&quot;, ... }, userManagementService: Mock&lt;IUserManagementService:105&gt;, handler: UserManagementHandler { })" time="0.0320841" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserManagementServiceReturnsNull.LogsInfoMessage" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserManagementServiceReturnsNull.LogsInfoMessage(signatureVerifier: Mock&lt;ISignatureVerifier:45&gt;, loggerMock: Mock&lt;ILogger&lt;UserManagementHandler&gt;:45&gt;, userManagementService: Mock&lt;IUserManagementService:147&gt;, testUserId: &quot;testUserId0511d2cb-bddb-4a6e-a8eb-3c82e16bac55&quot;, testSignature: &quot;testSignatureef250619-b6f8-43b4-9b03-8ed5476c9b88&quot;, handler: UserManagementHandler { })" time="0.0459929" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserManagementServiceReturnsNull.ReturnsNotFoundOperationResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserManagementServiceReturnsNull.ReturnsNotFoundOperationResult(signatureVerifier: Mock&lt;ISignatureVerifier:46&gt;, loggerMock: Mock&lt;ILogger&lt;UserManagementHandler&gt;:46&gt;, userManagementService: Mock&lt;IUserManagementService:150&gt;, testUserId: &quot;testUserIda3693f5a-e94f-4918-86c8-61684fbf5c13&quot;, testSignature: &quot;testSignature354b1c2f-502a-47a3-9abc-c60eab8676cb&quot;, handler: UserManagementHandler { })" time="0.0048025" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserManagementServiceSuccessfullyReturnsUser.ReturnsCorrectEmailStatus" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserManagementServiceSuccessfullyReturnsUser.ReturnsCorrectEmailStatus(signatureVerifier: Mock&lt;ISignatureVerifier:47&gt;, userManagementService: Mock&lt;IUserManagementService:152&gt;, testUserId: &quot;testUserId14835b4a-4408-42e5-8954-7217fea88052&quot;, testSignature: &quot;testSignature614ba753-0009-48a2-8e7b-9ed5df271728&quot;, testUserModel: UserModel { AvatarLink = &quot;AvatarLink3bf858cd-4738-435d-ab74-0550e5902892&quot;, CreationDate = 2023-11-06T16:33:27.0085877, CustomerGuid = cb90ab36-494d-4b06-8224-9af83ba6db4e, DeactivatedSubscriptions = [060a9042-ef61-4d75-b175-bdef51c01721, 3581c96d-f240-4c81-a971-2a2dbf755d45, 0c39fb91-90a1-4f16-a994-a3e7521198f1], Email = &quot;Email922780de-a3a8-4932-a797-471d6ce3fa38&quot;, ... }, handler: UserManagementHandler { })" time="0.0060969" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserManagementServiceSuccessfullyReturnsUser.ReturnsSuccessfulOperationResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserEmailVerificationStatusAsyncFunction+WhenUserManagementServiceSuccessfullyReturnsUser.ReturnsSuccessfulOperationResult(signatureVerifier: Mock&lt;ISignatureVerifier:48&gt;, userManagementService: Mock&lt;IUserManagementService:153&gt;, testUserId: &quot;testUserId01d098a1-195d-4001-b0bc-ed31385e9b73&quot;, testSignature: &quot;testSignaturec269f276-d5e4-4b3e-a46b-1c380c53bf1c&quot;, testUserModel: UserModel { AvatarLink = &quot;AvatarLink1224a5ae-ac6d-4f8e-8814-1ed0b5ca2d6c&quot;, CreationDate = 2024-10-10T15:38:21.6948573, CustomerGuid = 89356e02-86b1-4c54-8a89-77b0da5949e5, DeactivatedSubscriptions = [869d91c7-4565-4651-a055-1a3d43feb11c, e7d048b5-e7f1-43d3-b0fe-0b350238f107, 5c9d7e1e-1511-4c25-a315-39203bfb0250], Email = &quot;Email87d12036-94dc-4317-a8d9-62dc31b424d4&quot;, ... }, handler: UserManagementHandler { })" time="0.0046331" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenUserExistsAndNotDeactivatedInTheSubscription.UserIsNotActivated" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenUserExistsAndNotDeactivatedInTheSubscription.UserIsNotActivated(subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Tuesday, 14 June 2022, Environments = [...], Guid = 27c5f200-3f1c-4f95-bf16-d82cf2a41811, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Thursday, 15 July 2021, Environments = [...], Guid = a9530c86-0021-468f-b8e4-ad9e923ef2be, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Saturday, 18 May 2024, Environments = [...], Guid = 3402014d-72b5-4906-bf4e-d23076d270e9, HasContentAdministrators = True, ... }], dataAccessor: Mock&lt;IDatabaseDataAccessor:70&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink3d03d2b0-2dc6-49cb-ab00-3b95ae9aa2c3&quot;, CreationDate = 2021-09-25T05:10:24.0472756, CustomerGuid = f9f31fd7-19d9-4865-8c0b-cacb82c7be92, DeactivatedSubscriptions = [], Email = &quot;Email8d4e00d1-7558-4c34-b98f-f6c271107a79&quot;, ... }, userManagementService: Mock&lt;IUserManagementService:155&gt;, handler: UserManagementHandler { })" time="0.0098019" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsValid+WhenMigrationServiceThrowsMigrationErrorExceptionDueToError.LogsError" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsValid+WhenMigrationServiceThrowsMigrationErrorExceptionDueToError.LogsError(validator: Mock&lt;IValidator&lt;UserAccessibleSubscriptionsModel&gt;:49&gt;, signatureVerifier: Mock&lt;ISignatureVerifier:49&gt;, userMigrationService: Mock&lt;IUserMigrationManagementService:49&gt;, loggerMock: Mock&lt;ILogger&lt;UserManagementHandler&gt;:49&gt;, testModel: UserAccessibleSubscriptionsModel { UserEmail = &quot;UserEmail816d116b-9441-43ca-b2fd-415203c02483&quot; }, testSignature: &quot;testSignature7148f348-0df2-413c-a739-929745cd2dd5&quot;, testException: CHILI.GraFx.Platform.Services.External.Migration.Exceptions.MigrationErrorException: Exception of type 'CHILI.GraFx.Platform.Services.External.Migration.Exceptions.MigrationErrorException' was thrown., handler: UserManagementHandler { })" time="0.0128714" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsValid+WhenMigrationServiceThrowsMigrationErrorExceptionDueToError.ReturnsFailedResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsValid+WhenMigrationServiceThrowsMigrationErrorExceptionDueToError.ReturnsFailedResult(validator: Mock&lt;IValidator&lt;UserAccessibleSubscriptionsModel&gt;:51&gt;, signatureVerifier: Mock&lt;ISignatureVerifier:51&gt;, userMigrationService: Mock&lt;IUserMigrationManagementService:51&gt;, model: UserAccessibleSubscriptionsModel { UserEmail = &quot;UserEmail994b8d73-5b67-47a1-bc59-a1de338e6111&quot; }, testSignature: &quot;testSignatured2e16530-048f-489b-abd5-231d76eb4195&quot;, testException: CHILI.GraFx.Platform.Services.External.Migration.Exceptions.MigrationErrorException: Exception of type 'CHILI.GraFx.Platform.Services.External.Migration.Exceptions.MigrationErrorException' was thrown., handler: UserManagementHandler { })" time="0.0131776" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenModelIsInvalid.TheResultShouldEqualsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenModelIsInvalid.TheResultShouldEqualsBadRequest(authRuleValidator: Mock&lt;IAuthRuleValidator:125&gt;, validator: Mock&lt;IValidator&lt;InviteUsersModel&gt;:52&gt;, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [bd029832-7aa8-4c65-b429-6488ee5595b1, 7630ec76-a6b2-474e-9e69-5bc4c62512bf, 950f4c8d-3c2d-4058-b88d-81e771156918], UserEmails = [&quot;2a490153-9a3b-470a-a372-305b4811faf8&quot;, &quot;92039138-b031-4d60-bf31-0c58495b2422&quot;, &quot;e0ca680c-de9e-4eec-a9a0-0c0f61f58eba&quot;] }, handler: UserManagementHandler { })" time="0.0025537" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenUserExistsAndDeactivatedInTheSubscription.UserIsActivated" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenUserExistsAndDeactivatedInTheSubscription.UserIsActivated(subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Sunday, 17 July 2022, Environments = [...], Guid = 286ca901-da3d-4ff2-a21e-b49bc58d993b, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Sunday, 16 October 2022, Environments = [...], Guid = e47ec2db-b8d1-4d49-9faf-0833aaa019c4, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Monday, 3 February 2025, Environments = [...], Guid = c9056d4a-3585-444a-bac3-1e6c93cdb9ab, HasContentAdministrators = True, ... }], dataAccessor: Mock&lt;IDatabaseDataAccessor:78&gt;, userManagementService: Mock&lt;IUserManagementService:165&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink0b3a5b57-eee8-47b0-bfe2-1cbd92d27d32&quot;, CreationDate = 2024-07-12T18:05:15.5794359, CustomerGuid = 33a64327-ec54-4af8-9094-160ff3a54210, DeactivatedSubscriptions = [], Email = &quot;Emailf01e6c52-6a34-4250-80a8-f6f5f1dd2be5&quot;, ... }, handler: UserManagementHandler { })" time="0.0081127" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenCorrectParameters.DeleteSubscriptionRoleAndReturnResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenCorrectParameters.DeleteSubscriptionRoleAndReturnResultOk(subscriptionId: 803afa19-2ee9-45c9-b30a-7dbbf72f76c6, userId: &quot;userId6a489733-7547-4c87-abd4-8c42b828e2fa&quot;, userManager: Mock&lt;IUserManager:48&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:129&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:175&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:48&gt;, handler: UserManagementHandler { }, authenticatedUserId: &quot;authenticatedUserIddc3c3758-e290-4c70-8014-34bffc1&quot;...)" time="0.0182336" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserEnvironmentsAsyncMethod+WhenModelIsInvalid.TheResultShouldEqualsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserEnvironmentsAsyncMethod+WhenModelIsInvalid.TheResultShouldEqualsBadRequest(userId: &quot;userIddc74272b-d5f6-4a42-8538-d9642bc895cb&quot;, subscriptionId: 61586bd1-9726-40b0-92d0-d0369a9e760f, model: UserEnvironmentsModel { EnvironmentRoles = [[c7488b4c-630a-4d3e-bf14-44e8127ef704] = [EA, EU, CA], [a1156d6d-1978-48e7-a7ce-b9e1ced727f1] = [EA, EU, CA], [c5a73930-66e7-4dea-9cc2-798051514a6a] = [EA, EU, CA]] }, validator: Mock&lt;IValidator&lt;UserEnvironmentsModel&gt;:55&gt;, handler: UserManagementHandler { })" time="0.0017663" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserAsyncFunction+WhenRequestIsNotValid.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserAsyncFunction+WhenRequestIsNotValid.ReturnsBadRequestResult(testUserId: null, model: UpdateUserModel { FirstName = &quot;FirstName35e86f50-0bfe-46b0-b824-ad5ed957db90&quot;, LastName = &quot;LastNamef8fa1566-4956-4060-9733-0db8e70459d2&quot; }, handler: UserManagementHandler { })" time="0.0030287" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserAsyncFunction+WhenRequestIsNotValid.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserAsyncFunction+WhenRequestIsNotValid.ReturnsBadRequestResult(testUserId: &quot; &quot;, model: UpdateUserModel { FirstName = &quot;FirstNamef02d1dd3-070d-4319-aba2-20c605390a18&quot;, LastName = &quot;LastNamea569cdd5-4b2c-4255-91d3-8f8c82ee8322&quot; }, handler: UserManagementHandler { })" time="0.0000468" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserAsyncFunction+WhenRequestIsNotValid.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserAsyncFunction+WhenRequestIsNotValid.ReturnsBadRequestResult(testUserId: &quot;testUserIdfd0ce7f3-0ba8-4814-ae7b-a8a62141d045&quot;, model: UpdateUserModel { FirstName = &quot;FirstNameab0bf6b2-0d0f-4f10-a50b-54899e4fa8a9&quot;, LastName = &quot;LastNamee0909666-9615-425f-b401-2691846f38c7&quot; }, handler: UserManagementHandler { })" time="0.0004012" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenModelIsValid.ReturnInvitedResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenModelIsValid.ReturnInvitedResult(model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }], SubscriptionIds = [e4675a80-99cf-4f42-b9db-18a46496254c], UserEmails = [&quot;user@example.com&quot;] }, validator: Mock&lt;IValidator&lt;InviteUsersModel&gt;:56&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:132&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:50&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:178&gt;, userManagementService: Mock&lt;IUserManagementService:177&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:129&gt;, subscriptionManagerResult: [[6b7d83e7-bc23-4ceb-9927-7b0011b17f6b] = [fb9b1d32-5bae-46c9-a2da-b7f040299d93, 3c83fdab-3895-4bb3-a30b-aeffd03d0ff0, c165fc8d-00d4-42a9-8b63-5e12ed79940c], [087bc95c-59ab-40b3-9303-69f9f9b3f5f5] = [50d1d4d2-45dd-419d-a5e7-a8128323f32e, 80ee8c4c-2d3c-4b51-bfa2-a4e5abd790a6, 8647f8fc-ddcd-4ace-8b9a-eb85d5237615], [dc7e492d-0b71-401b-a9aa-f1f5ce803cdd] = [eb4913fa-cecb-4cbd-bfa0-67c6c50d7b63, 4659aa9d-e410-47a2-b49b-b16b731d2e0f, 18c1d252-f56d-47a7-9f51-805efc049771]], invitingUser: UserModel { AvatarLink = &quot;AvatarLinkb0e87a4f-833c-4fcd-9a58-c669215819cd&quot;, CreationDate = 2022-10-07T19:33:18.8626702, CustomerGuid = 3cee212b-bff4-48c2-af59-32bc0ce72f42, DeactivatedSubscriptions = [eed92147-8bd5-476d-a4c1-8c29393929b3, 56f4df1b-4228-4967-87c4-72ca9203826e, 6556d79e-1d81-4550-a353-a5b873e9e755], Email = &quot;Email45389b36-0d98-4090-a620-8b8e487359d8&quot;, ... }, handler: UserManagementHandler { })" time="0.0127365" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenModelIsValid.ReturnInvitedResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenModelIsValid.ReturnInvitedResult(model: InviteUsersModel { Environments = null, SubscriptionIds = [3865cc14-008f-4dff-b430-61c68ca0bfd3], UserEmails = [&quot;user@example.com&quot;] }, validator: Mock&lt;IValidator&lt;InviteUsersModel&gt;:56&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:132&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:50&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:178&gt;, userManagementService: Mock&lt;IUserManagementService:177&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:129&gt;, subscriptionManagerResult: [[6b7d83e7-bc23-4ceb-9927-7b0011b17f6b] = [fb9b1d32-5bae-46c9-a2da-b7f040299d93, 3c83fdab-3895-4bb3-a30b-aeffd03d0ff0, c165fc8d-00d4-42a9-8b63-5e12ed79940c], [087bc95c-59ab-40b3-9303-69f9f9b3f5f5] = [50d1d4d2-45dd-419d-a5e7-a8128323f32e, 80ee8c4c-2d3c-4b51-bfa2-a4e5abd790a6, 8647f8fc-ddcd-4ace-8b9a-eb85d5237615], [dc7e492d-0b71-401b-a9aa-f1f5ce803cdd] = [eb4913fa-cecb-4cbd-bfa0-67c6c50d7b63, 4659aa9d-e410-47a2-b49b-b16b731d2e0f, 18c1d252-f56d-47a7-9f51-805efc049771]], invitingUser: UserModel { AvatarLink = &quot;AvatarLinkb0e87a4f-833c-4fcd-9a58-c669215819cd&quot;, CreationDate = 2022-10-07T19:33:18.8626702, CustomerGuid = 3cee212b-bff4-48c2-af59-32bc0ce72f42, DeactivatedSubscriptions = [eed92147-8bd5-476d-a4c1-8c29393929b3, 56f4df1b-4228-4967-87c4-72ca9203826e, 6556d79e-1d81-4550-a353-a5b873e9e755], Email = &quot;Email45389b36-0d98-4090-a620-8b8e487359d8&quot;, ... }, handler: UserManagementHandler { })" time="0.0190147" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheGetAuthenticatedUserAsyncFunction+WhenAuthenticatedUserIdIsNotNull+WhenUserDoesNotExist.ReturnsUnauthorized" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheGetAuthenticatedUserAsyncFunction+WhenAuthenticatedUserIdIsNotNull+WhenUserDoesNotExist.ReturnsUnauthorized(userManager: Mock&lt;IUserManager:55&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:186&gt;, handler: UserManagementHandler { }, userModel: UserModel { AvatarLink = &quot;AvatarLinkca38b94f-a19e-427b-8956-fdcb2e61b5ca&quot;, CreationDate = 2024-03-18T00:58:37.1560696, CustomerGuid = 5469d4d1-8c38-44e5-b347-e60b24efb54c, DeactivatedSubscriptions = [4b2895a7-6ae1-48f5-9d9b-e0eb0cdf9363, 90aaa4e5-9056-4e2c-872c-4cf4589267da, b0f71743-eb6d-47fb-9d02-05a0926e35a6], Email = &quot;Email20bfd3f3-d15f-465a-8462-b3df9ea0ac99&quot;, ... })" time="0.0048399" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheModelIsValid.DeleteSubscriptionRoleAndReturnResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheModelIsValid.DeleteSubscriptionRoleAndReturnResultOk(authUserRoles: [Role { RoleIdentifier = FullAccess, RoleScopes = Subscription | Environment, ScopeIdentifier = null }], subscriptionId: 86339435-bf08-4a91-ad15-f6871eae094e, userId: &quot;userId789dbadf-b30f-4aa6-a580-38581fc76a05&quot;, roleModel: UserSubscriptionRolesModel { SubscriptionRoles = [SA, TD, SA] }, authRuleValidator: Mock&lt;IAuthRuleValidator:139&gt;, userManager: Mock&lt;IUserManager:54&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:54&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:185&gt;, handler: UserManagementHandler { }, authenticatedUserId: &quot;authenticatedUserId1c52c509-d781-439e-a87d-bb4531b&quot;...)" time="0.0331981" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheModelIsValid.DeleteSubscriptionRoleAndReturnResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheModelIsValid.DeleteSubscriptionRoleAndReturnResultOk(authUserRoles: [Role { RoleIdentifier = SubscriptionAdministrator, RoleScopes = Subscription, ScopeIdentifier = 00000000-0000-0000-0000-000000000000 }], subscriptionId: 00000000-0000-0000-0000-000000000000, userId: &quot;userId789dbadf-b30f-4aa6-a580-38581fc76a05&quot;, roleModel: UserSubscriptionRolesModel { SubscriptionRoles = [SA, TD, SA] }, authRuleValidator: Mock&lt;IAuthRuleValidator:139&gt;, userManager: Mock&lt;IUserManager:54&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:54&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:185&gt;, handler: UserManagementHandler { }, authenticatedUserId: &quot;authenticatedUserId1c52c509-d781-439e-a87d-bb4531b&quot;...)" time="0.0210273" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenRoleIsNotValidForCurrentSubscription.ReturnBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenRoleIsNotValidForCurrentSubscription.ReturnBadRequest(model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [626a4e20-f524-4ed4-962a-35661c374598, dfc2d4f3-9811-42cf-97f2-d843b7406a25, 891471ca-defa-4a6b-806b-e5a7cff9bfdd], UserEmails = [&quot;824e2146-0a49-4bd1-ba84-23e54c2770fe&quot;, &quot;cfc78581-ec85-49e1-9e95-6ed360d1e9d8&quot;, &quot;4b78cbbd-b657-4ea6-b577-a0f7cb8723ea&quot;] }, authRuleValidator: Mock&lt;IAuthRuleValidator:145&gt;, validator: Mock&lt;IValidator&lt;InviteUsersModel&gt;:63&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:56&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:191&gt;, userManagementService: Mock&lt;IUserManagementService:191&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:137&gt;, subscriptionManagerResult: [[a6ebd0c3-fb16-400e-a5e8-bef22beb6c35] = [8ba33641-3ff7-4add-bcfb-907c37203c54, bb735979-e16a-49d7-a67f-f5970a4448a8, c7ad73a1-2d1b-44fa-996d-d5804a7db9dd], [d1683a1d-1019-4ef3-a90a-7f28964e5727] = [7e409edc-c191-415f-8094-34501bdeef17, 47af2126-4bae-45f5-85e7-3bc92ef123b2, eadc116e-055f-4319-a078-60da8f33d664], [d098b28a-f66b-4d1c-8ba4-d67166930e2c] = [3181d487-f325-48e5-ac8c-921f5f252f9e, 667596fb-f583-4da3-8b07-910ed2c2da95, 1497e59a-484e-4113-b6a7-bac05b9de93e]], invitingUser: UserModel { AvatarLink = &quot;AvatarLinkeff63fc0-0f89-447d-b36b-c6cc339254ca&quot;, CreationDate = 2022-10-16T05:50:00.2268944, CustomerGuid = cedf61a4-694a-4c78-a06e-1edcd08910fd, DeactivatedSubscriptions = [fd33fa54-ec43-4cab-a8c9-03894157abc8, ea6d6292-421a-450f-8b62-49a03d0279e6, b642b4c6-87a3-4454-b0bc-95ace8fbe745], Email = &quot;Emaile0d9c3a3-32f0-4a35-b198-5c0c072c60e9&quot;, ... }, handler: UserManagementHandler { })" time="0.0077464" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheModelIsValid.DeleteSubscriptionRoleAndReturnResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheModelIsValid.DeleteSubscriptionRoleAndReturnResultOk(authUserRoles: [Role { RoleIdentifier = SubscriptionAdministrator, RoleScopes = Subscription, ScopeIdentifier = 00000000-0000-0000-0000-000000000000 }], subscriptionId: d201c56d-c9dd-453b-a129-ccb23115353c, userId: &quot;userId789dbadf-b30f-4aa6-a580-38581fc76a05&quot;, roleModel: UserSubscriptionRolesModel { SubscriptionRoles = [SA, TD, SA] }, authRuleValidator: Mock&lt;IAuthRuleValidator:139&gt;, userManager: Mock&lt;IUserManager:54&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:54&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:185&gt;, handler: UserManagementHandler { }, authenticatedUserId: &quot;authenticatedUserId1c52c509-d781-439e-a87d-bb4531b&quot;...)" time="0.0184881" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheModelIsValid.DeleteSubscriptionRoleAndReturnResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheModelIsValid.DeleteSubscriptionRoleAndReturnResultOk(authUserRoles: [Role { RoleIdentifier = TemplateDesigner, RoleScopes = Subscription, ScopeIdentifier = 00000000-0000-0000-0000-000000000000 }], subscriptionId: 00000000-0000-0000-0000-000000000000, userId: &quot;userId789dbadf-b30f-4aa6-a580-38581fc76a05&quot;, roleModel: UserSubscriptionRolesModel { SubscriptionRoles = [SA, TD, SA] }, authRuleValidator: Mock&lt;IAuthRuleValidator:139&gt;, userManager: Mock&lt;IUserManager:54&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:54&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:185&gt;, handler: UserManagementHandler { }, authenticatedUserId: &quot;authenticatedUserId1c52c509-d781-439e-a87d-bb4531b&quot;...)" time="0.0175678" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserEnvironmentsAsyncMethod+WhenManagerReturnsOperationIsNotValidErrorResult.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserEnvironmentsAsyncMethod+WhenManagerReturnsOperationIsNotValidErrorResult.ReturnsHttpBadRequest(userId: &quot;userIdb5fd7ee5-6448-4962-a15c-05d7f2587f5b&quot;, subscriptionId: 82ae51bb-f383-4991-a381-e198acf3f940, model: UserEnvironmentsModel { EnvironmentRoles = [[c269d055-3243-4c91-93fc-8ab7cc7ffcc7] = [EA, EU, CA], [d5c89c25-9026-435e-b855-3697949a3461] = [EA, EU, CA], [ec769a32-d971-4ca5-9251-b4556c2a1607] = [EA, EU, CA]] }, validator: Mock&lt;IValidator&lt;UserEnvironmentsModel&gt;:64&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:147&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:57&gt;, manager: Mock&lt;IUserManager:57&gt;, handler: UserManagementHandler { })" time="0.0076824" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheModelIsValid.DeleteSubscriptionRoleAndReturnResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheModelIsValid.DeleteSubscriptionRoleAndReturnResultOk(authUserRoles: [Role { RoleIdentifier = TemplateDesigner, RoleScopes = Subscription, ScopeIdentifier = 00000000-0000-0000-0000-000000000000 }], subscriptionId: 6894292e-0ac7-444c-b6fd-2b6878a62407, userId: &quot;userId789dbadf-b30f-4aa6-a580-38581fc76a05&quot;, roleModel: UserSubscriptionRolesModel { SubscriptionRoles = [SA, TD, SA] }, authRuleValidator: Mock&lt;IAuthRuleValidator:139&gt;, userManager: Mock&lt;IUserManager:54&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:54&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:185&gt;, handler: UserManagementHandler { }, authenticatedUserId: &quot;authenticatedUserId1c52c509-d781-439e-a87d-bb4531b&quot;...)" time="0.0184676" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenTheUserDoesNotExist.UserIsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenTheUserDoesNotExist.UserIsNotFound(handler: UserManagementHandler { }, subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Sunday, 18 August 2024, Environments = [...], Guid = e245422c-258f-4e66-bc8f-82edcb363b2f, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Saturday, 11 June 2022, Environments = [...], Guid = 13e458aa-47e1-4e9c-8ea5-9c2f9b6d29cf, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Monday, 6 November 2023, Environments = [...], Guid = a381ebdf-ea3d-45d5-9412-ba9ef9b75283, HasContentAdministrators = True, ... }], dataAccessor: Mock&lt;IDatabaseDataAccessor:95&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink713be4c6-fcd5-446e-a8c8-89fe6d368e80&quot;, CreationDate = 2024-07-01T14:22:10.0955885, CustomerGuid = edf8403d-3fa7-4c68-a949-17f83482a072, DeactivatedSubscriptions = [5a2154ed-255a-4a23-82f0-884891bf18ee, a4dd23ea-be7f-45a0-9a0d-96235d714d51, 1fc4b0d8-f64b-4ef5-9d40-c20642f8ab35], Email = &quot;Email46b455c6-4b48-4b0c-98c0-d00d55badf4a&quot;, ... })" time="0.0119639" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheModelIsValid.DeleteSubscriptionRoleAndReturnResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheModelIsValid.DeleteSubscriptionRoleAndReturnResultOk(authUserRoles: [Role { RoleIdentifier = SubscriptionAdministrator, RoleScopes = Subscription, ScopeIdentifier = null }], subscriptionId: 86339435-bf08-4a91-ad15-f6871eae094e, userId: &quot;userId789dbadf-b30f-4aa6-a580-38581fc76a05&quot;, roleModel: UserSubscriptionRolesModel { SubscriptionRoles = [SA, TD, SA] }, authRuleValidator: Mock&lt;IAuthRuleValidator:139&gt;, userManager: Mock&lt;IUserManager:54&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:54&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:185&gt;, handler: UserManagementHandler { }, authenticatedUserId: &quot;authenticatedUserId1c52c509-d781-439e-a87d-bb4531b&quot;...)" time="0.0119569" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenEnvironmentsDoNotExist.ReturnNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenEnvironmentsDoNotExist.ReturnNotFound(authRuleValidator: Mock&lt;IAuthRuleValidator:152&gt;, validator: Mock&lt;IValidator&lt;InviteUsersModel&gt;:65&gt;, userManagementService: Mock&lt;IUserManagementService:195&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:197&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:141&gt;, subscriptionManagerResult: [[f41d938c-0056-4c22-8160-1280356538f5] = [47cb6061-3105-4571-98b5-f9aa697893b0, 9c69305f-4bce-4c5c-a470-f858600abacd, 50b99936-7908-4a70-a888-febde92e2e88], [3d717d23-1ded-4c24-b2dc-28edbddbb849] = [69a32619-a194-46bd-ab45-444a63cb27e1, 05dfc7b8-7fbc-4562-9c8d-e29ad20ed763, 5f6edb4f-3345-44d7-a28e-a75b286c80b0], [820e9836-03cb-4d2d-a86f-a58182768a0e] = [c8aa6f05-e240-4501-b3f5-e8138c520f35, a7cae45d-af7e-4e7f-acd5-fa7c2e4991d2, 2cda1e7d-6c34-43ed-9ec6-4245908f1096]], invitingUser: UserModel { AvatarLink = &quot;AvatarLink5fbaa4dd-ba49-47a5-a524-d528b5bc765f&quot;, CreationDate = 2023-06-03T11:37:57.8680084, CustomerGuid = 9cb92205-2af9-4440-93ab-bec85b7807f8, DeactivatedSubscriptions = [e85d6ca7-cf9c-4f9e-9703-2e55e2cb4e42, 97e48820-8f82-40cf-a810-fc72f5695474, f6953fa9-388f-426b-aecd-528e3e77b8f2], Email = &quot;Emailaf72a44b-9c77-43c7-affd-bde26174e4c2&quot;, ... }, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [ac24cb7d-412f-43d5-b152-451b6fc08b45, 72cb66c4-6ffd-4984-955c-2591b29c317a, 0a8cde6b-d248-476a-a2aa-6a2373eddb15], UserEmails = [&quot;36232eb1-f81e-4530-a7fe-9be837348149&quot;, &quot;bb14f2e1-2ea6-4ed3-81d5-a88d8f5be87c&quot;, &quot;d03a3771-e627-4601-a330-e7c60e80c92a&quot;] }, handler: UserManagementHandler { })" time="0.0151655" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenUserExistsAndNotActiveInTheSubscription.UserIsNotDeactivated" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenUserExistsAndNotActiveInTheSubscription.UserIsNotDeactivated(subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Monday, 17 April 2023, Environments = [...], Guid = d8f22f2b-2dec-4fe6-926d-0d94fdf55620, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Thursday, 18 January 2024, Environments = [...], Guid = 9d9f4419-3cf6-48eb-b8dd-7094f4ffc8b8, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Wednesday, 19 July 2023, Environments = [...], Guid = 3e1dce00-da9d-414f-b001-8920f6e14f3a, HasContentAdministrators = True, ... }], dataAccessor: Mock&lt;IDatabaseDataAccessor:111&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink4f33fb3b-5d8f-4969-a739-a494f5ca36bb&quot;, CreationDate = 2022-09-04T03:42:55.4679944, CustomerGuid = 68e30499-6861-447e-92fe-56349db16099, DeactivatedSubscriptions = [a9b20378-f3c8-4da6-99e8-81cd96bfdc79, a9916157-deb8-43a6-a191-249fa9e98322, c574bb8e-766d-4bb3-927f-4f302fa40cbd], Email = &quot;Email6550ad73-7fb4-46a0-b0af-8035591d8386&quot;, ... }, userManagementService: Mock&lt;IUserManagementService:200&gt;, handler: UserManagementHandler { })" time="0.0037925" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsValid+WhenMigrationServerReturnsOkResult.ReturnsOkResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsValid+WhenMigrationServerReturnsOkResult.ReturnsOkResult(validator: Mock&lt;IValidator&lt;UserAccessibleSubscriptionsModel&gt;:66&gt;, signatureVerifier: Mock&lt;ISignatureVerifier:67&gt;, userMigrationService: Mock&lt;IUserMigrationManagementService:67&gt;, model: UserAccessibleSubscriptionsModel { UserEmail = &quot;UserEmail79cee8a9-afe0-4b4a-ab03-f0b87a41d31c&quot; }, testSignature: &quot;testSignature040fb912-5842-4f39-9879-dec69124a35b&quot;, handler: UserManagementHandler { }, subscriptionIds: [4feb5d9f-f4e8-4ddd-bd0e-79c3127fb9cb, 9a8e71fa-c297-4bd8-8414-4a96f755bf1b, 19b3b0f1-aaa1-4d4d-af36-f575faed0de5])" time="0.0089923" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserEnvironmentsAsyncMethod+WhenSubscriptionDoesNotExist.ReturnsHttpNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserEnvironmentsAsyncMethod+WhenSubscriptionDoesNotExist.ReturnsHttpNotFound(userId: &quot;userIdb3d4fb43-1e9e-48f2-b805-72b550e8370b&quot;, subscriptionId: bfe89a49-35ce-4055-ba2c-46350cd5ea98, validator: Mock&lt;IValidator&lt;UserEnvironmentsModel&gt;:68&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:168&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:60&gt;, model: UserEnvironmentsModel { EnvironmentRoles = [[bf5a1c3f-9ff9-4872-a8bd-5ba925e6c5c4] = [EA, EU, CA], [d4d991f0-bdc7-48d5-9c5d-aa143ffa9011] = [EA, EU, CA], [1dfa9085-fca4-4ae9-bb10-8ca612065d39] = [EA, EU, CA]] }, handler: UserManagementHandler { })" time="0.0033336" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserEnvironmentsAsyncMethod+WhenUserEntityIsNotFound.ReturnsHttpNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserEnvironmentsAsyncMethod+WhenUserEntityIsNotFound.ReturnsHttpNotFound(userId: &quot;userId4c2dae06-64e6-4f34-ad09-f4dd01b50cd7&quot;, subscriptionId: f959f43a-fe2b-4787-8d3a-260e645e9947, model: UserEnvironmentsModel { EnvironmentRoles = [[6e4f7b27-0348-4970-bba9-394135dc6308] = [EA, EU, CA], [9735f4ed-fff5-4a10-8cce-54b2b197ea45] = [EA, EU, CA], [e65de44e-a765-4041-b542-321cf9bfd91c] = [EA, EU, CA]] }, validator: Mock&lt;IValidator&lt;UserEnvironmentsModel&gt;:69&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:169&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:61&gt;, manager: Mock&lt;IUserManager:60&gt;, handler: UserManagementHandler { })" time="0.0068847" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheGetAuthenticatedUserAsyncFunction+WhenAuthenticatedUserIdIsNull.ReturnUnauthorized" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheGetAuthenticatedUserAsyncFunction+WhenAuthenticatedUserIdIsNull.ReturnUnauthorized(authenticatedUser: Mock&lt;IAuthenticatedUser:217&gt;, handler: UserManagementHandler { })" time="0.0018862" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenInvitingUserDoesNotExist.ReturnsUnauthorized" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenInvitingUserDoesNotExist.ReturnsUnauthorized(userId: &quot;user_id&quot;, authRuleValidator: Mock&lt;IAuthRuleValidator:170&gt;, validator: Mock&lt;IValidator&lt;InviteUsersModel&gt;:70&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:218&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:153&gt;, subscriptionManagerResult: [[4ac4317e-d995-468f-9bb4-64adad7f3c0d] = [6abc857e-d65d-4bd9-911a-19b42d476b30, 641895bb-43ab-440a-8352-3f17e907b646, 4700b43f-bd5f-47f6-a541-04b75704b9bb], [07346e95-5b1a-4140-981d-bea31b6136e8] = [20819249-9452-437c-b647-720815ca69c3, 1f4bec15-06c8-4dbd-9878-73023c77a390, 1d0aaea6-aa91-4caa-b0f7-5dbb3cdab6a2], [805b1a09-c851-48b5-8482-79e803ef9310] = [a6e66ba8-16a3-4789-992b-e928da0d4470, cf92248c-b77e-4452-942a-363304f906b0, 2880d3a5-713d-4d58-8bc0-333888815210]], model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [1ee8807b-d1a4-4c74-9977-3e215c3050ad, d30f1bc8-8712-488c-b2ba-6bb17779de85, 1a9e4f0c-f930-4e6f-9543-84b1dfb82aac], UserEmails = [&quot;61e4e292-3bd7-4da2-b241-bf96ac9eb0db&quot;, &quot;d36d2f50-2d48-4f81-9712-e4c9a6723190&quot;, &quot;49e3fc90-0a84-43bd-81e6-c75890e78cb4&quot;] }, handler: UserManagementHandler { })" time="0.0042877" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenInvitingUserDoesNotExist.ReturnsUnauthorized" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenInvitingUserDoesNotExist.ReturnsUnauthorized(userId: null, authRuleValidator: Mock&lt;IAuthRuleValidator:174&gt;, validator: Mock&lt;IValidator&lt;InviteUsersModel&gt;:72&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:221&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:155&gt;, subscriptionManagerResult: [[def77f94-603e-4eba-ab95-138fe4a84808] = [f4bf6336-305f-4f47-8468-f06a49848e87, 4927fb92-943d-4695-b93b-179fb2fb1abb, 17c3bd55-fcc8-44e2-a63f-60ce6c9745f8], [5e5abe35-f5d1-4664-9795-3e6c3281b7d6] = [8e84a735-f6ee-4afb-9fec-1c5f5788b465, 3b653e8a-42e2-4744-b479-e0892d1ddd9e, 19665662-f5a5-4daf-b9b4-fd06fb5d39c5], [2ef6004c-e191-44cf-9a4c-812c5db76fa9] = [cafd05c7-e13f-425d-9de3-9dfc1ba7619b, ee667e0b-3f7b-4a69-b486-da19054c5a0e, aecf6531-0cfb-4742-a016-7965c465c273]], model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [f6555029-dc4f-47f0-8173-8359835ec2f0, bd3d3702-2b34-411d-ba4b-9ace1a57fcc3, 2e41c56c-8ef5-4d32-87d6-e8ecc0d7048c], UserEmails = [&quot;85ee0821-4dba-426b-8048-c108bac54753&quot;, &quot;7942a66d-1fde-41fb-86ba-3608603a8c96&quot;, &quot;1f423b1f-f9d0-473e-9ef3-ec134e919d92&quot;] }, handler: UserManagementHandler { })" time="0.0011702" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserNameAsyncFunction+IfNoLastNameIsProvided.TheResultShouldEqualsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserNameAsyncFunction+IfNoLastNameIsProvided.TheResultShouldEqualsBadRequest(userId: &quot;userIdfc99b573-936d-4394-b6eb-2f3bf6ecdf81&quot;, nameModel: UpdateUserNameModel { FirstName = &quot;FirstName7f898e4c-1a19-4783-beb7-1a30aa256670&quot;, LastName = null }, handler: UserManagementHandler { })" time="0.0135330" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheGetAuthenticatedUserAsyncFunction+WhenAuthenticatedUserIdIsNotNull+WhenUserExists.ReturnGetAuthenticatedUserModel" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheGetAuthenticatedUserAsyncFunction+WhenAuthenticatedUserIdIsNotNull+WhenUserExists.ReturnGetAuthenticatedUserModel(userManager: Mock&lt;IUserManager:66&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:224&gt;, handler: UserManagementHandler { }, userModel: GetAuthenticatedUserModel { CreationDate = 180, Email = &quot;Email91c60a9b-7e5a-4f3a-af9f-6394ce02095d&quot;, EnvironmentRoles = [[65bb347b-e124-429f-9655-d69b3f7a389e] = [&quot;b8641041-5180-4025-910e-80f32ad50e32&quot;, &quot;a860de31-1ee2-456d-a7d8-f830c5e176a5&quot;, &quot;eb183027-5d0b-441d-bc60-18343d8f9cab&quot;], [e8721658-2446-4584-ba04-64388f4af119] = [&quot;50ff822d-91f7-4264-96c2-e506f97ac099&quot;, &quot;9ac6eadc-882d-41c3-9322-f5a8787179b5&quot;, &quot;4cb84ffc-8eb4-48e6-9393-5bcc481fab26&quot;], [27ce6021-ed97-4ccd-9d2a-59bfb03f4ef3] = [&quot;6a96651e-85c2-431e-bbcf-b95d58192051&quot;, &quot;28056e2d-8a92-414b-87f9-81a042b512a3&quot;, &quot;932573db-e56b-493a-95bd-13377c673f7e&quot;]], FirstName = &quot;FirstName8d06e143-3252-454f-a62d-ce6b400b7b27&quot;, HasFullAccess = True, ... })" time="0.0068610" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheGetAuthenticatedUserAsyncFunction+WhenAuthenticatedUserIdIsNotNull+WhenUserExists.ReturnOkResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheGetAuthenticatedUserAsyncFunction+WhenAuthenticatedUserIdIsNotNull+WhenUserExists.ReturnOkResult(userManager: Mock&lt;IUserManager:67&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:225&gt;, handler: UserManagementHandler { }, userModel: GetAuthenticatedUserModel { CreationDate = 181, Email = &quot;Email996beddb-a1d8-483f-991e-b9093d3add5d&quot;, EnvironmentRoles = [[f444b90a-c5c3-4cb5-b609-f90e7fcacd1b] = [&quot;129f61a8-e147-4d74-b557-b69ce7544e01&quot;, &quot;9c35b5f4-2609-4b65-a5fb-134438b409b7&quot;, &quot;abd6f17b-8cc7-4208-acce-d1ba710434b7&quot;], [e054a5e7-5d9e-40fd-9f8e-8b1306eea377] = [&quot;73feebd0-fa14-49a2-8559-12e699a6cc1c&quot;, &quot;a87de897-60f2-4e93-8e24-4f0cb14d268b&quot;, &quot;587c456a-3cd1-454e-a9c9-d7195178fe44&quot;], [c77e4e2a-7d4b-40c5-a3d7-63c92fdf1bd2] = [&quot;dc732c92-714e-4c04-8cca-47f843ba30cf&quot;, &quot;277a4b62-6c3d-4bf7-a77d-54a7088fe7cc&quot;, &quot;ec7eaa53-52e7-40b7-90ea-2a15691745e0&quot;]], FirstName = &quot;FirstNamefa214dc3-c938-4538-952d-15d2edf4205a&quot;, HasFullAccess = True, ... })" time="0.0021732" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsNotValid.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsNotValid.ReturnsBadRequestResult(validator: Mock&lt;IValidator&lt;UserAccessibleSubscriptionsModel&gt;:76&gt;, signatureVerifier: Mock&lt;ISignatureVerifier:76&gt;, model: UserAccessibleSubscriptionsModel { UserEmail = &quot;UserEmaileae6a35e-57c7-4578-8b5d-aca41b595ad0&quot; }, testSignature: &quot;testSignature0bc2ac46-55fd-4343-9e85-6993b0dd6808&quot;, handler: UserManagementHandler { })" time="0.0035369" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenIncorrectParameters.UserIsNotDeactivatedAndBadRequestIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenIncorrectParameters.UserIsNotDeactivatedAndBadRequestIsReturned(userId: null, subscriptionId: 03f88b03-624f-4f70-a932-8f72b8a3db93, handler: UserManagementHandler { })" time="0.0012763" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenIncorrectParameters.UserIsNotDeactivatedAndBadRequestIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenIncorrectParameters.UserIsNotDeactivatedAndBadRequestIsReturned(userId: &quot;&quot;, subscriptionId: 456b93eb-923d-4ae1-88fe-282b2ef89f37, handler: UserManagementHandler { })" time="0.0000443" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenIncorrectParameters.UserIsNotDeactivatedAndBadRequestIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenIncorrectParameters.UserIsNotDeactivatedAndBadRequestIsReturned(userId: &quot; &quot;, subscriptionId: eda2a232-3dfd-4db6-8d04-b2af176a8836, handler: UserManagementHandler { })" time="0.0000136" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenSubscriptionDoesNotExist.UserIsNotDeactivatedAndNotFoundIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenSubscriptionDoesNotExist.UserIsNotDeactivatedAndNotFoundIsReturned(userId: &quot;userId2a68f2c6-e0da-4771-b687-989143d7e5de&quot;, subscriptionId: 09118b76-40f3-4ef0-b753-e3c018c9083f, handler: UserManagementHandler { })" time="0.0027288" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenAuthenticatedUserIdIsNull.TheResultShouldEqualsUnauthorized" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenAuthenticatedUserIdIsNull.TheResultShouldEqualsUnauthorized(authRuleValidator: Mock&lt;IAuthRuleValidator:212&gt;, validator: Mock&lt;IValidator&lt;InviteUsersModel&gt;:80&gt;, userManagementService: Mock&lt;IUserManagementService:241&gt;, invitingUser: UserModel { AvatarLink = &quot;AvatarLink9596b95c-782d-47fd-ad46-33498efb9459&quot;, CreationDate = 2024-08-30T00:40:20.6762179, CustomerGuid = c3b786c6-8d00-4991-83de-497307eded13, DeactivatedSubscriptions = [a2ce9ef3-63ac-44ed-a782-6d224d761a3d, d371a43a-30fb-4767-9a41-fad36eda5916, aeac1662-bf96-4a22-8adb-bf280fe02915], Email = &quot;Email78859fda-e572-4ad6-b2d2-107814644dba&quot;, ... }, authenticatedUser: Mock&lt;IAuthenticatedUser:264&gt;, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [66c527f4-ba4c-4d9c-96f9-2f204b222bb2, 3245ab2f-e8f2-44a4-add9-0b4c13986f33, 052ed5bc-fa06-4105-812f-4044da50e64a], UserEmails = [&quot;451662d1-a4ea-43cf-aca5-0ad92cce686e&quot;, &quot;dc3a5f4e-89f2-40b8-a7e0-cd39ecc6c2c9&quot;, &quot;f7af17e7-6f32-41db-ac3d-a62ccbf770f2&quot;] }, handler: UserManagementHandler { })" time="0.0171671" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheAddUserAsyncFunction+WhenTheSignatureIsInvalid.TheResultShouldEqualsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheAddUserAsyncFunction+WhenTheSignatureIsInvalid.TheResultShouldEqualsBadRequest(validator: Mock&lt;IValidator&lt;AddUserModel&gt;:82&gt;, signatureVerifier: Mock&lt;ISignatureVerifier:82&gt;, model: AddUserModel { CustomerGuid = 475c52a6-f9ad-4a3f-9724-e70829115035, Email = &quot;Email48079f0f-bafa-4296-b333-1fe558bbb4fa&quot;, FirstName = &quot;FirstName639f57ca-adc4-4bf3-a8a5-7583b296b691&quot;, LastName = &quot;LastName3fd4dc47-a716-41ed-9240-015796469330&quot;, SubscriptionIds = [2c1a4dff-4cb7-4162-8268-d0b87005a2ca, 857e703c-edf6-47cf-9ebb-58b7c5b4d038, 7ba461f3-1f33-466d-913f-983d08c6be69] }, signature: &quot;signaturebaf38b62-5410-4056-95d2-2055a50b6d37&quot;, handler: UserManagementHandler { })" time="0.0035646" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsNullOrWhiteSpace.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsNullOrWhiteSpace.ReturnsBadRequestResult(testSignature: null, validator: Mock&lt;IValidator&lt;MarkUserMigratedModel&gt;:83&gt;, testModel: MarkUserMigratedModel { UserEmail = &quot;UserEmailb4f26f21-36a5-4892-b9bc-033eb21c0d43&quot; }, handler: UserManagementHandler { })" time="0.0019227" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsNullOrWhiteSpace.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsNullOrWhiteSpace.ReturnsBadRequestResult(testSignature: &quot;&quot;, validator: Mock&lt;IValidator&lt;MarkUserMigratedModel&gt;:84&gt;, testModel: MarkUserMigratedModel { UserEmail = &quot;UserEmail5e6d8b62-10f3-4c9a-aeb6-2054c2e07385&quot; }, handler: UserManagementHandler { })" time="0.0004021" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsNullOrWhiteSpace.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsNullOrWhiteSpace.ReturnsBadRequestResult(testSignature: &quot; &quot;, validator: Mock&lt;IValidator&lt;MarkUserMigratedModel&gt;:85&gt;, testModel: MarkUserMigratedModel { UserEmail = &quot;UserEmail78072c19-66df-423c-b156-ca99fe3af019&quot; }, handler: UserManagementHandler { })" time="0.0003716" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserAsyncFunction+WhenRequestIsValid.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserAsyncFunction+WhenRequestIsValid.ReturnsBadRequestResult(updateResult: SuccessResult { IsError = False, IsSuccess = True }, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.OkObjectResult), userManager: Mock&lt;IUserManager:74&gt;, testUserId: &quot;testUserIdb944635d-e78b-4ea7-af27-d3ef73c3f483&quot;, updateModel: UpdateUserModel { FirstName = &quot;FirstNamee7f6e7b7-482a-4931-959e-4fa5c516acaf&quot;, LastName = &quot;LastNamea8727f7f-1e8d-4808-95b7-6fb3c81e14b9&quot; }, handler: UserManagementHandler { })" time="0.0058255" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserAsyncFunction+WhenRequestIsValid.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserAsyncFunction+WhenRequestIsValid.ReturnsBadRequestResult(updateResult: EntityNotFoundResult { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.NotFoundObjectResult), userManager: Mock&lt;IUserManager:74&gt;, testUserId: &quot;testUserIdb944635d-e78b-4ea7-af27-d3ef73c3f483&quot;, updateModel: UpdateUserModel { FirstName = &quot;FirstNamee7f6e7b7-482a-4931-959e-4fa5c516acaf&quot;, LastName = &quot;LastNamea8727f7f-1e8d-4808-95b7-6fb3c81e14b9&quot; }, handler: UserManagementHandler { })" time="0.0122186" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserAsyncFunction+WhenRequestIsValid.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserAsyncFunction+WhenRequestIsValid.ReturnsBadRequestResult(updateResult: OperationIsNotValidResult { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.ForbidResult), userManager: Mock&lt;IUserManager:74&gt;, testUserId: &quot;testUserIdb944635d-e78b-4ea7-af27-d3ef73c3f483&quot;, updateModel: UpdateUserModel { FirstName = &quot;FirstNamee7f6e7b7-482a-4931-959e-4fa5c516acaf&quot;, LastName = &quot;LastNamea8727f7f-1e8d-4808-95b7-6fb3c81e14b9&quot; }, handler: UserManagementHandler { })" time="0.0029841" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserAsyncFunction+WhenRequestIsValid.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserAsyncFunction+WhenRequestIsValid.ReturnsBadRequestResult(updateResult: ServiceErrorResult { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.ObjectResult), userManager: Mock&lt;IUserManager:74&gt;, testUserId: &quot;testUserIdb944635d-e78b-4ea7-af27-d3ef73c3f483&quot;, updateModel: UpdateUserModel { FirstName = &quot;FirstNamee7f6e7b7-482a-4931-959e-4fa5c516acaf&quot;, LastName = &quot;LastNamea8727f7f-1e8d-4808-95b7-6fb3c81e14b9&quot; }, handler: UserManagementHandler { })" time="0.0029329" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenInviteUsersAsyncHasUnexpectedResult.ReturnProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenInviteUsersAsyncHasUnexpectedResult.ReturnProblem(model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [08817c67-a08d-472d-aeda-7cb661498fd2, 5e96e187-3e1a-4ddc-908e-1b625d307833, adab9a69-e725-44e7-ba7f-018c4104cc18], UserEmails = [&quot;efbddaea-1fd0-4281-b5e6-bd8456481656&quot;, &quot;995758ea-2e3e-4f87-95b8-70162295673d&quot;, &quot;178ccbe3-95eb-4cbc-81a1-003f4e4a6001&quot;] }, authRuleValidator: Mock&lt;IAuthRuleValidator:222&gt;, validator: Mock&lt;IValidator&lt;InviteUsersModel&gt;:87&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:75&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:274&gt;, userManagementService: Mock&lt;IUserManagementService:257&gt;, invitingUser: UserModel { AvatarLink = &quot;AvatarLink7f1cfa49-f4d7-493b-a406-3bee3e89b0b1&quot;, CreationDate = 2022-09-28T10:05:36.0698133, CustomerGuid = 6b80ad5a-153c-4172-a9f0-deb0be362dfb, DeactivatedSubscriptions = [043b6e10-2be5-448a-979e-8de3d6197220, 3e722fe6-a8a0-4aae-a0df-3f7af55f8537, e5f085e5-6311-4b12-bb5a-6863458d1c4d], Email = &quot;Email68b2d285-34dc-466f-9509-c4e1fdea8598&quot;, ... }, handler: UserManagementHandler { })" time="0.0064531" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsNullOrWhiteSpace.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsNullOrWhiteSpace.ReturnsBadRequestResult(testSignature: null, validator: Mock&lt;IValidator&lt;UserAccessibleSubscriptionsModel&gt;:88&gt;, testModel: UserAccessibleSubscriptionsModel { UserEmail = &quot;UserEmail63b8f99f-6b2c-4677-b6e5-03e98a247872&quot; }, handler: UserManagementHandler { })" time="0.0017300" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsNullOrWhiteSpace.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsNullOrWhiteSpace.ReturnsBadRequestResult(testSignature: &quot;&quot;, validator: Mock&lt;IValidator&lt;UserAccessibleSubscriptionsModel&gt;:89&gt;, testModel: UserAccessibleSubscriptionsModel { UserEmail = &quot;UserEmailffc2d521-4ebd-4aa6-838d-2902998e1142&quot; }, handler: UserManagementHandler { })" time="0.0004222" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsNullOrWhiteSpace.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsNullOrWhiteSpace.ReturnsBadRequestResult(testSignature: &quot; &quot;, validator: Mock&lt;IValidator&lt;UserAccessibleSubscriptionsModel&gt;:90&gt;, testModel: UserAccessibleSubscriptionsModel { UserEmail = &quot;UserEmail26ff769b-4608-4a7c-bb23-fb4fd78734bd&quot; }, handler: UserManagementHandler { })" time="0.0003621" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheAddUserAsyncFunction+WhenTheSignatureIsValid+WhenTheCreationOfTheUserSucceeds.TheResultShouldEqualsCreated" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheAddUserAsyncFunction+WhenTheSignatureIsValid+WhenTheCreationOfTheUserSucceeds.TheResultShouldEqualsCreated(validator: Mock&lt;IValidator&lt;AddUserModel&gt;:91&gt;, signatureVerifier: Mock&lt;ISignatureVerifier:91&gt;, userManagementService: Mock&lt;IUserManagementService:262&gt;, model: AddUserModel { CustomerGuid = aa74ae58-49d8-4329-98da-ec603a2b5c06, Email = &quot;Email3ce95c97-1720-4e39-b1bf-d528ba4e9b07&quot;, FirstName = &quot;FirstNamee973e8a3-6d7b-41a0-acd0-ed8e94fbc570&quot;, LastName = &quot;LastNamea887c73c-b4a6-458e-bd31-6f87e7403bbc&quot;, SubscriptionIds = [3404f68c-b6b0-41f4-98d5-e8b20731a0dd, 234bea1b-7044-4040-9664-8d32b0c0d0c9, 2279e392-5823-425c-8fdd-5ef51d7f42ce] }, signature: &quot;signature7a47e831-7f7a-4f13-904e-156be27b382f&quot;, user: User { AppMetadata = Object { }, Blocked = False, CreatedAt = 2022-05-15T11:56:47.9184572, Email = &quot;Email6221e255-b192-4882-8037-c4bf46c46671&quot;, EmailVerified = False, ... }, handler: UserManagementHandler { })" time="0.0119639" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenIdentityServerGenerateErrorDuringUserUpdating.UserIsNotActivatedAndReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenIdentityServerGenerateErrorDuringUserUpdating.UserIsNotActivatedAndReturnsProblem(subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Friday, 5 May 2023, Environments = [...], Guid = f121023d-2fca-47ae-89cc-66be33a2e8fd, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Friday, 7 March 2025, Environments = [...], Guid = 3876c829-8185-40db-af68-a0c3fc27e04b, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Thursday, 3 March 2022, Environments = [...], Guid = cbe144d5-b97e-4a50-8b95-ff8498545469, HasContentAdministrators = True, ... }], dataAccessor: Mock&lt;IDatabaseDataAccessor:158&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLinke80faba2-db66-42f6-b07d-631df2a7e32b&quot;, CreationDate = 2024-06-11T12:10:20.1921318, CustomerGuid = 93cf2a47-2960-4ec0-a64d-caaca06d726e, DeactivatedSubscriptions = [], Email = &quot;Emailee67b6c6-5640-4ef3-ac34-01e383b2b0cb&quot;, ... }, userManagementService: Mock&lt;IUserManagementService:265&gt;, handler: UserManagementHandler { })" time="0.0041065" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenNoPermissions.ReturnsHttpForbidden" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenNoPermissions.ReturnsHttpForbidden(authRuleValidator: Mock&lt;IAuthRuleValidator:230&gt;, handler: UserManagementHandler { }, userId: &quot;userIda82eea38-369a-47bc-9bb7-d4a8c7eda150&quot;, subscriptionId: 6c44520d-3d0d-4a4c-9617-297f7b5e96da)" time="0.0020637" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenModelIsNull.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenModelIsNull.ReturnsBadRequestResult(testSignature: &quot;testSignatured6d6ee7c-8059-4a05-a4b2-ea90cca3c134&quot;, handler: UserManagementHandler { })" time="0.0011883" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheUserWasNotInvitedToThisSubscription.ReturnsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheUserWasNotInvitedToThisSubscription.ReturnsNotFound(userInvitationManager: Mock&lt;IUserInvitationsManager:82&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:238&gt;, handler: UserManagementHandler { })" time="0.0089921" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsValid+WhenUserNotFound.ReturnsNotFoundResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsValid+WhenUserNotFound.ReturnsNotFoundResult(validator: Mock&lt;IValidator&lt;MarkUserMigratedModel&gt;:96&gt;, signatureVerifier: Mock&lt;ISignatureVerifier:96&gt;, userMigrationService: Mock&lt;IUserMigrationManagementService:96&gt;, model: MarkUserMigratedModel { UserEmail = &quot;UserEmail01ab20da-324f-4565-8efb-d22dc54548cf&quot; }, testSignature: &quot;testSignature492ea5fe-8c4c-4c8e-a83d-d3b67319ec6e&quot;, handler: UserManagementHandler { })" time="0.0076301" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsValid+WhenUserNotFound.LogsInfo" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsValid+WhenUserNotFound.LogsInfo(validator: Mock&lt;IValidator&lt;MarkUserMigratedModel&gt;:97&gt;, signatureVerifier: Mock&lt;ISignatureVerifier:97&gt;, userMigrationService: Mock&lt;IUserMigrationManagementService:97&gt;, loggerMock: Mock&lt;ILogger&lt;UserManagementHandler&gt;:97&gt;, testModel: MarkUserMigratedModel { UserEmail = &quot;UserEmail0e9e50f7-8564-4100-a967-530ed505c183&quot; }, testSignature: &quot;testSignature26dc44bc-5e05-4a37-97d3-cdb1a0201f66&quot;, handler: UserManagementHandler { })" time="0.0084771" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult(userManagerDeleteMethodResult: SuccessResult { IsError = False, IsSuccess = True }, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.OkObjectResult), userId: &quot;userIdf686c027-80a8-4521-8566-c3edd95ccb0a&quot;, role: SA, subscriptionId: 6896f398-e3e8-4607-be4a-de12518006fc, userManager: Mock&lt;IUserManager:85&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:85&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:241&gt;, handler: UserManagementHandler { })" time="0.0083886" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenSubscriptionDoesNotExist.UserIsNotActivatedAndNotFoundIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenSubscriptionDoesNotExist.UserIsNotActivatedAndNotFoundIsReturned(userId: &quot;userIddd7dec38-e58c-4e20-b729-476f507d3e30&quot;, subscriptionId: 8bf55172-9088-4727-b304-cf4c7faf137a, handler: UserManagementHandler { })" time="0.0026222" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult(userManagerDeleteMethodResult: EntityNotFoundResult { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.NotFoundObjectResult), userId: &quot;userIdf686c027-80a8-4521-8566-c3edd95ccb0a&quot;, role: SA, subscriptionId: 6896f398-e3e8-4607-be4a-de12518006fc, userManager: Mock&lt;IUserManager:85&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:85&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:241&gt;, handler: UserManagementHandler { })" time="0.0325314" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult(userManagerDeleteMethodResult: ServiceErrorResult { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.ObjectResult), userId: &quot;userIdf686c027-80a8-4521-8566-c3edd95ccb0a&quot;, role: SA, subscriptionId: 6896f398-e3e8-4607-be4a-de12518006fc, userManager: Mock&lt;IUserManager:85&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:85&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:241&gt;, handler: UserManagementHandler { })" time="0.0023993" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult(userManagerDeleteMethodResult: OperationIsNotValidResult { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.BadRequestObjectResult), userId: &quot;userIdf686c027-80a8-4521-8566-c3edd95ccb0a&quot;, role: SA, subscriptionId: 6896f398-e3e8-4607-be4a-de12518006fc, userManager: Mock&lt;IUserManager:85&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:85&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:241&gt;, handler: UserManagementHandler { })" time="0.0023181" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult(userManagerDeleteMethodResult: null, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.ObjectResult), userId: &quot;userIdf686c027-80a8-4521-8566-c3edd95ccb0a&quot;, role: SA, subscriptionId: 6896f398-e3e8-4607-be4a-de12518006fc, userManager: Mock&lt;IUserManager:85&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:85&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:241&gt;, handler: UserManagementHandler { })" time="0.0023857" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenModelIsInvalid.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenModelIsInvalid.ReturnsBadRequestResult(validator: Mock&lt;IValidator&lt;UserAccessibleSubscriptionsModel&gt;:100&gt;, testModel: UserAccessibleSubscriptionsModel { UserEmail = &quot;UserEmail97de6956-c105-4f1e-adf3-2daf7a13ac27&quot; }, testSignature: &quot;testSignature8cb6fcbb-588d-40ba-84f5-ff6ed201308d&quot;, handler: UserManagementHandler { })" time="0.0018786" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheAddUserAsyncFunction+WhenTheSignatureIsValid+WhenTheUserAlreadyExists.TheResultShouldEqualsUserAlreadyExists" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheAddUserAsyncFunction+WhenTheSignatureIsValid+WhenTheUserAlreadyExists.TheResultShouldEqualsUserAlreadyExists(validator: Mock&lt;IValidator&lt;AddUserModel&gt;:101&gt;, signatureVerifier: Mock&lt;ISignatureVerifier:101&gt;, userManagementService: Mock&lt;IUserManagementService:304&gt;, model: AddUserModel { CustomerGuid = 205e5c6e-ae26-45cc-8eda-907b167fdf6b, Email = &quot;Email2101e156-c2df-418d-9644-7565bd785047&quot;, FirstName = &quot;FirstNameb42891f8-b451-4ccf-9603-fd4c529c8f60&quot;, LastName = &quot;LastName4429ebdf-453e-4321-ac11-0af19d657d16&quot;, SubscriptionIds = [bf001a6a-9394-4d05-944e-6841976ea588, 607d66a6-33df-491a-91a9-5c7df03984d0, 13c3c424-a751-4fdd-91c3-bb76fb14e0d4] }, signature: &quot;signatured6ff8402-bf21-44ab-a56f-5707897acf7e&quot;, handler: UserManagementHandler { })" time="0.0032911" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenIdentityServerGenerateErrorDuringUserGetting.UserIsNotDeactivatedAndReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenIdentityServerGenerateErrorDuringUserGetting.UserIsNotDeactivatedAndReturnsProblem(subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Sunday, 2 June 2024, Environments = [...], Guid = 5db4237f-d237-4863-b084-4e829a8107e4, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Tuesday, 5 March 2024, Environments = [...], Guid = 6b3414a4-05c9-48b9-9136-dd3c926fcb3a, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Saturday, 28 June 2025, Environments = [...], Guid = e5fc7392-cc79-45ef-b36c-6c56bc545a83, HasContentAdministrators = True, ... }], dataAccessor: Mock&lt;IDatabaseDataAccessor:177&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLinkd5556a98-c0c5-4f32-945e-f83c3ae2ae28&quot;, CreationDate = 2023-11-21T17:14:27.3107608, CustomerGuid = a40f17ea-c2aa-44bf-80b7-341a36015fc9, DeactivatedSubscriptions = [bb69a372-83b3-4862-8f4c-ef44a0e0f415, 3d2ac659-ea41-4bdd-88d2-ef0c84a392a0, 0c34e98c-d8fc-4103-abbc-98e6915319d6], Email = &quot;Emaila7fa55d3-8ac7-4425-8236-178aeef5c398&quot;, ... }, handler: UserManagementHandler { })" time="0.0035381" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult(userManagerDeleteMethodResult: SuccessResult { IsError = False, IsSuccess = True }, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.OkObjectResult), userId: &quot;userId3244226c-bf86-43d7-b662-64c458d55bfb&quot;, subscriptionId: aabe8815-0900-4d6e-847e-f117a7a3538d, userManager: Mock&lt;IUserManager:88&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:255&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:88&gt;, handler: UserManagementHandler { })" time="0.0038733" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult(userManagerDeleteMethodResult: EntityNotFoundResult { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.NotFoundObjectResult), userId: &quot;userId3244226c-bf86-43d7-b662-64c458d55bfb&quot;, subscriptionId: aabe8815-0900-4d6e-847e-f117a7a3538d, userManager: Mock&lt;IUserManager:88&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:255&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:88&gt;, handler: UserManagementHandler { })" time="0.0024334" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult(userManagerDeleteMethodResult: ServiceErrorResult { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.ObjectResult), userId: &quot;userId3244226c-bf86-43d7-b662-64c458d55bfb&quot;, subscriptionId: aabe8815-0900-4d6e-847e-f117a7a3538d, userManager: Mock&lt;IUserManager:88&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:255&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:88&gt;, handler: UserManagementHandler { })" time="0.0016990" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult(userManagerDeleteMethodResult: OperationIsNotValidResult { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.BadRequestObjectResult), userId: &quot;userId3244226c-bf86-43d7-b662-64c458d55bfb&quot;, subscriptionId: aabe8815-0900-4d6e-847e-f117a7a3538d, userManager: Mock&lt;IUserManager:88&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:255&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:88&gt;, handler: UserManagementHandler { })" time="0.0018831" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenRoleDeletedWithServiceErrorOrSuccessOrEntityNotFoundOrOperationIsNotValidResult.ReturnsHttpResult(userManagerDeleteMethodResult: null, expectedResultType: typeof(Microsoft.AspNetCore.Http.Result.ObjectResult), userId: &quot;userId3244226c-bf86-43d7-b662-64c458d55bfb&quot;, subscriptionId: aabe8815-0900-4d6e-847e-f117a7a3538d, userManager: Mock&lt;IUserManager:88&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:255&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:88&gt;, handler: UserManagementHandler { })" time="0.0016779" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenUserDoesNotMatchAuthRule.UserDoesNotHaveAnAccess" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenUserDoesNotMatchAuthRule.UserDoesNotHaveAnAccess(userId: &quot;userIdb0362e6a-3fe6-49fe-971c-35e0aafcf379&quot;, handler: UserManagementHandler { }, subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Friday, 25 August 2023, Environments = [...], Guid = 1f151cbd-e03b-40b0-8ae1-0d1d63eab35f, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Saturday, 21 June 2025, Environments = [...], Guid = 5ae31f0f-155a-4da1-8504-5991a9c207ea, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Friday, 4 July 2025, Environments = [...], Guid = cbf9bcbe-3279-4ff6-8dd0-c454360ba039, HasContentAdministrators = True, ... }], dataAccessor: Mock&lt;IDatabaseDataAccessor:193&gt;)" time="0.0096585" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenIdentityServerGenerateErrorDuringUserGetting.UserIsNotActivatedAndReturnsProblem" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenIdentityServerGenerateErrorDuringUserGetting.UserIsNotActivatedAndReturnsProblem(subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Sunday, 17 April 2022, Environments = [...], Guid = 4d93a746-696c-462c-a7d2-0d62806a3f5f, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Sunday, 12 November 2023, Environments = [...], Guid = 2d90ea12-359d-4c7a-a4cc-aee7ef16bd91, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Thursday, 27 October 2022, Environments = [...], Guid = 3e4ca7e6-a3c2-42dd-9059-156c7a264fef, HasContentAdministrators = True, ... }], dataAccessor: Mock&lt;IDatabaseDataAccessor:194&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink637a4587-3d51-42f5-9f85-0367e8268320&quot;, CreationDate = 2025-04-07T10:19:56.0699005, CustomerGuid = 283b581c-5e04-4c00-b8f3-6bd67a140dc0, DeactivatedSubscriptions = [], Email = &quot;Email07142490-5e85-48d2-95ca-96d7bff8fd69&quot;, ... }, handler: UserManagementHandler { })" time="0.0036012" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheModelIsInvalid.ReturnsBadRequestOperationResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheModelIsInvalid.ReturnsBadRequestOperationResult(validator: Mock&lt;IValidator&lt;UserSubscriptionRolesModel&gt;:106&gt;, handler: UserManagementHandler { })" time="0.0022131" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenUserIsNotFoundDuringUpdating.UserIsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenUserIsNotFoundDuringUpdating.UserIsNotFound(handler: UserManagementHandler { }, subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Saturday, 14 May 2022, Environments = [...], Guid = c18d065d-f636-4d3b-b8b7-b237eb9ce0e9, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Monday, 7 August 2023, Environments = [...], Guid = 21711904-ac50-4e6c-8d2d-1ed10ba6b56f, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Sunday, 8 August 2021, Environments = [...], Guid = 7345e4ae-ca8a-418c-87e1-ca63fd35024f, HasContentAdministrators = True, ... }], dataAccessor: Mock&lt;IDatabaseDataAccessor:211&gt;, userManagementService: Mock&lt;IUserManagementService:320&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLinkcba72e2c-0f60-4d4f-88f6-fb1102847d25&quot;, CreationDate = 2025-04-07T04:31:49.5125719, CustomerGuid = a2bb1270-4525-4944-8d31-07665fb92a5b, DeactivatedSubscriptions = [], Email = &quot;Email9ba32daf-a935-49f2-aa2f-3dbb9d8933c1&quot;, ... })" time="0.0037114" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsValid+WhenMigrationServerReturnsOkResult.ReturnsOkResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsValid+WhenMigrationServerReturnsOkResult.ReturnsOkResult(signatureVerifier: Mock&lt;ISignatureVerifier:110&gt;, userMigrationService: Mock&lt;IUserMigrationManagementService:110&gt;, model: MarkUserMigratedModel { UserEmail = &quot;UserEmail9032dc43-31e9-4763-b999-7170693b5469&quot; }, testSignature: &quot;testSignature81db3061-038e-46b0-8d96-170930974732&quot;, handler: UserManagementHandler { })" time="0.0124496" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenUserIsNotFoundDuringUpdating.UserIsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenUserIsNotFoundDuringUpdating.UserIsNotFound(handler: UserManagementHandler { }, subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Saturday, 18 September 2021, Environments = [...], Guid = 05cd4388-a0de-40ea-8c83-ca78455d6f43, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Tuesday, 25 January 2022, Environments = [...], Guid = c05c19ad-a612-4482-988b-7d3e37fc0142, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Saturday, 14 October 2023, Environments = [...], Guid = bc46e480-1d9d-4b5f-bad4-827811c80e9b, HasContentAdministrators = True, ... }], dataAccessor: Mock&lt;IDatabaseDataAccessor:217&gt;, userManagementService: Mock&lt;IUserManagementService:338&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink7f6e833b-82b5-47dc-9e95-193dd2d6dbb9&quot;, CreationDate = 2022-08-23T06:17:32.2961270, CustomerGuid = a934a636-c8fb-41fa-853c-c2a80e6ff08c, DeactivatedSubscriptions = [fb4beace-9f34-4bb8-9183-02e9edfa4602, 39034ff0-20b9-4ef5-b079-9f5076a752c4, b8d4420f-1628-4739-ab6c-e99f23d26f7f], Email = &quot;Email4f28219f-29a7-44a5-b140-cf52697a9b6e&quot;, ... })" time="0.0038904" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenTheUserDoesNotExist.UserIsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheActivateUserInSubscriptionAsyncFunction+WhenTheUserDoesNotExist.UserIsNotFound(handler: UserManagementHandler { }, subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Sunday, 20 November 2022, Environments = [...], Guid = 716dff32-c246-449c-87c5-418989607838, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Monday, 4 March 2024, Environments = [...], Guid = e2447199-1de5-44a0-a4b9-4ee06363ca75, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Friday, 13 May 2022, Environments = [...], Guid = ed5285f0-d264-4bdb-b881-8bd48cb06fb0, HasContentAdministrators = True, ... }], dataAccessor: Mock&lt;IDatabaseDataAccessor:218&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink930efcea-60f4-455d-b80a-4ef2d8ce7902&quot;, CreationDate = 2024-05-07T21:30:52.8789126, CustomerGuid = 7f9a11a0-79a2-4abc-b9a3-039a163862dc, DeactivatedSubscriptions = [], Email = &quot;Email0aa9d3d3-5f56-4d60-b987-b9ac0e2c29cd&quot;, ... })" time="0.0031814" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheAddUserAsyncFunction+WhenNoModelIsProvided.TheResultShouldEqualsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheAddUserAsyncFunction+WhenNoModelIsProvided.TheResultShouldEqualsBadRequest(handler: UserManagementHandler { })" time="0.0011871" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenIncorrectParameters.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenIncorrectParameters.ReturnsHttpBadRequest(userId: null, subscriptionId: 5fa72f69-502f-48df-9d5e-f25e24099f30, authRuleValidator: Mock&lt;IAuthRuleValidator:276&gt;, handler: UserManagementHandler { })" time="0.0019678" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenIncorrectParameters.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenIncorrectParameters.ReturnsHttpBadRequest(userId: &quot;&quot;, subscriptionId: 76795969-1721-4eb2-89c3-5d7f8a7c425e, authRuleValidator: Mock&lt;IAuthRuleValidator:277&gt;, handler: UserManagementHandler { })" time="0.0002810" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenIncorrectParameters.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteUserFromSubscriptionAsync+WhenIncorrectParameters.ReturnsHttpBadRequest(userId: &quot; &quot;, subscriptionId: 84a2afd0-99f1-410a-8c21-b9076c2374f8, authRuleValidator: Mock&lt;IAuthRuleValidator:278&gt;, handler: UserManagementHandler { })" time="0.0002603" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsValid+WhenUserNotFound.ReturnsNotFoundResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsValid+WhenUserNotFound.ReturnsNotFoundResult(validator: Mock&lt;IValidator&lt;UserAccessibleSubscriptionsModel&gt;:114&gt;, signatureVerifier: Mock&lt;ISignatureVerifier:114&gt;, userMigrationService: Mock&lt;IUserMigrationManagementService:114&gt;, model: UserAccessibleSubscriptionsModel { UserEmail = &quot;UserEmail06ba48d0-719e-4108-b4d1-f33c35d25a4e&quot; }, testSignature: &quot;testSignaturea712ff3f-abfb-40da-ab81-d8700fcfbf2f&quot;, handler: UserManagementHandler { })" time="0.0061263" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenAuthorizationRuleCheckReturnsFalse.ReturnsHttpForbidden" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenAuthorizationRuleCheckReturnsFalse.ReturnsHttpForbidden(validator: Mock&lt;IValidator&lt;UserSubscriptionRolesModel&gt;:117&gt;, handler: UserManagementHandler { })" time="0.0019477" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenNoModelIsProvided.TheResultShouldEqualsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheInviteUsersAsyncFunction+WhenNoModelIsProvided.TheResultShouldEqualsBadRequest(authRuleValidator: Mock&lt;IAuthRuleValidator:282&gt;, handler: UserManagementHandler { })" time="0.0086043" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsValid+WhenUserNotFound.LogsInfo" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GetUserAccessibleSubscriptionsAsyncFunction+WhenSignatureIsValid+WhenUserNotFound.LogsInfo(validator: Mock&lt;IValidator&lt;UserAccessibleSubscriptionsModel&gt;:116&gt;, signatureVerifier: Mock&lt;ISignatureVerifier:116&gt;, userMigrationService: Mock&lt;IUserMigrationManagementService:116&gt;, loggerMock: Mock&lt;ILogger&lt;UserManagementHandler&gt;:116&gt;, testModel: UserAccessibleSubscriptionsModel { UserEmail = &quot;UserEmail7157c26d-db56-4c11-b933-0263bead37ff&quot; }, testSignature: &quot;testSignature7408b679-0db5-4c20-808f-c28985ab70c4&quot;, handler: UserManagementHandler { })" time="0.0155211" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsNotValid.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsNotValid.ReturnsBadRequestResult(validator: Mock&lt;IValidator&lt;MarkUserMigratedModel&gt;:119&gt;, signatureVerifier: Mock&lt;ISignatureVerifier:119&gt;, model: MarkUserMigratedModel { UserEmail = &quot;UserEmail4795a32d-26d7-4f58-9d53-5aebccb68d55&quot; }, testSignature: &quot;testSignatured800b1de-f32c-4d3f-ba2f-9ccb489940b9&quot;, handler: UserManagementHandler { })" time="0.0035676" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserNameAsyncFunction+WhenTheUpdateOfTheUserFails.TheResultShouldEqualsFailed" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserNameAsyncFunction+WhenTheUpdateOfTheUserFails.TheResultShouldEqualsFailed(userManagementService: Mock&lt;IUserManagementService:358&gt;, userId: &quot;userId2d6ce6f1-36ce-4fb2-966c-b60205b4649f&quot;, nameModel: UpdateUserNameModel { FirstName = &quot;FirstNamee02572e1-7a1a-444d-bb8b-49b9fcb11cb1&quot;, LastName = &quot;LastNamee8d572a7-9373-48fe-98e1-b5b7fc0b4594&quot; }, handler: UserManagementHandler { })" time="0.0019951" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenModelIsNull.ReturnsBadRequestResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenModelIsNull.ReturnsBadRequestResult(testSignature: &quot;testSignaturebaa7db8f-1a53-4f76-bef5-a1305bf31d72&quot;, handler: UserManagementHandler { })" time="0.0011128" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheModelIsNull.ReturnsBadRequestOperationResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenTheModelIsNull.ReturnsBadRequestOperationResult(handler: UserManagementHandler { })" time="0.0012342" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenUserIdIsNullOrWhitespace.ReturnsBadRequestOperationResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenUserIdIsNullOrWhitespace.ReturnsBadRequestOperationResult(testUserId: null, testSubscriptionId: 07941083-6fec-4b4b-afa0-e9c11084904c, model: UserSubscriptionRolesModel { SubscriptionRoles = [SA, TD, SA] }, handler: UserManagementHandler { })" time="0.0012072" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenUserIdIsNullOrWhitespace.ReturnsBadRequestOperationResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenUserIdIsNullOrWhitespace.ReturnsBadRequestOperationResult(testUserId: &quot;&quot;, testSubscriptionId: ddbb177e-1cc3-4625-bcef-7cdf11548c7d, model: UserSubscriptionRolesModel { SubscriptionRoles = [SA, TD, SA] }, handler: UserManagementHandler { })" time="0.0000352" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenUserIdIsNullOrWhitespace.ReturnsBadRequestOperationResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+GrantRolesToSubscriptionAsyncFunction+WhenUserIdIsNullOrWhitespace.ReturnsBadRequestOperationResult(testUserId: &quot; &quot;, testSubscriptionId: b9e7a74d-5ca9-4c94-88b6-6d2bf6fbf8fa, model: UserSubscriptionRolesModel { SubscriptionRoles = [SA, TD, SA] }, handler: UserManagementHandler { })" time="0.0000120" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserNameAsyncFunction+WhenTheUserNotFound.TheResultShouldEqualsNotFound" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserNameAsyncFunction+WhenTheUserNotFound.TheResultShouldEqualsNotFound(userManagementService: Mock&lt;IUserManagementService:369&gt;, userId: &quot;userIddda02054-d1ab-4c53-91c3-ebc3b40bbc64&quot;, nameModel: UpdateUserNameModel { FirstName = &quot;FirstName8ad8183e-1000-4f72-bfb3-1a0b5530cdc7&quot;, LastName = &quot;LastName38d4d312-e322-49df-b816-eb9c7f43d703&quot; }, handler: UserManagementHandler { })" time="0.0096825" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenIncorrectParameters.UserIsNotDeactivatedAndBadRequestIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenIncorrectParameters.UserIsNotDeactivatedAndBadRequestIsReturned(userId: null, subscriptionId: e23809c2-c4ca-4c03-8b44-f5d0f2c08650, handler: UserManagementHandler { })" time="0.0012791" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenIncorrectParameters.UserIsNotDeactivatedAndBadRequestIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenIncorrectParameters.UserIsNotDeactivatedAndBadRequestIsReturned(userId: &quot;&quot;, subscriptionId: 7647afe9-3d92-49a0-b0af-e072f3834d9f, handler: UserManagementHandler { })" time="0.0000374" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenIncorrectParameters.UserIsNotDeactivatedAndBadRequestIsReturned" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenIncorrectParameters.UserIsNotDeactivatedAndBadRequestIsReturned(userId: &quot; &quot;, subscriptionId: 450b5202-2fd8-44d5-8047-1753d8a16cf2, handler: UserManagementHandler { })" time="0.0000120" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenIncorrectParameters.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenIncorrectParameters.ReturnsHttpBadRequest(userId: null, role: SA, subscriptionId: 15c0db04-20d0-4731-ae6c-5a31b72c5c14, userInvitationsManager: Mock&lt;IUserInvitationsManager:107&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:311&gt;, handler: UserManagementHandler { })" time="0.0026398" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenIncorrectParameters.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenIncorrectParameters.ReturnsHttpBadRequest(userId: &quot;&quot;, role: SA, subscriptionId: 00e2bf01-f915-429d-bef5-77b77a56a9de, userInvitationsManager: Mock&lt;IUserInvitationsManager:108&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:312&gt;, handler: UserManagementHandler { })" time="0.0004719" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenIncorrectParameters.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenIncorrectParameters.ReturnsHttpBadRequest(userId: &quot; &quot;, role: SA, subscriptionId: ac3dba6a-c1bf-464c-afd6-fe9d573694a3, userInvitationsManager: Mock&lt;IUserInvitationsManager:109&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:313&gt;, handler: UserManagementHandler { })" time="0.0004316" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenIncorrectParameters.ReturnsHttpBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenIncorrectParameters.ReturnsHttpBadRequest(userId: &quot;userId&quot;, role: 99, subscriptionId: 155e01ac-55b0-4b9f-940e-04c800f998cf, userInvitationsManager: Mock&lt;IUserInvitationsManager:110&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:314&gt;, handler: UserManagementHandler { })" time="0.0022725" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheUpdateUserEnvironmentsAsyncMethod+WhenUserEnvironmentsAreUpdatedSuccessfully.ReturnsHttpOk" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheUpdateUserEnvironmentsAsyncMethod+WhenUserEnvironmentsAreUpdatedSuccessfully.ReturnsHttpOk(userId: &quot;userIdda1bf3f0-a862-46f0-997d-c3c835f6779a&quot;, subscriptionId: 2bd380ee-97e0-4fb4-a07a-a79c00d0bdc5, model: UserEnvironmentsModel { EnvironmentRoles = [[2e8dffca-27a7-463f-9229-a65a89806e00] = [EA, EU, CA], [0802123a-fa1c-4379-bedc-5aaa90ddde41] = [EA, EU, CA], [2247574d-4a77-441b-9c97-a5a62d873057] = [EA, EU, CA]] }, validator: Mock&lt;IValidator&lt;UserEnvironmentsModel&gt;:134&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:111&gt;, manager: Mock&lt;IUserManager:111&gt;, authRuleValidator: Mock&lt;IAuthRuleValidator:317&gt;, handler: UserManagementHandler { })" time="0.0078822" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsValid+WhenMigrationServiceThrowsMigrationErrorExceptionDueToError.LogsError" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsValid+WhenMigrationServiceThrowsMigrationErrorExceptionDueToError.LogsError(signatureVerifier: Mock&lt;ISignatureVerifier:135&gt;, userMigrationService: Mock&lt;IUserMigrationManagementService:135&gt;, loggerMock: Mock&lt;ILogger&lt;UserManagementHandler&gt;:135&gt;, testModel: MarkUserMigratedModel { UserEmail = &quot;UserEmaild2d6af33-080f-4242-86b3-7ffd1da5c421&quot; }, testSignature: &quot;testSignaturebf5085a8-2ca7-479c-ae41-374119003544&quot;, testException: CHILI.GraFx.Platform.Services.External.Migration.Exceptions.MigrationErrorException: Exception of type 'CHILI.GraFx.Platform.Services.External.Migration.Exceptions.MigrationErrorException' was thrown., handler: UserManagementHandler { })" time="0.0180999" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsValid+WhenMigrationServiceThrowsMigrationErrorExceptionDueToError.ReturnsFailedResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+MarkUserMigratedAsyncFunction+WhenSignatureIsValid+WhenMigrationServiceThrowsMigrationErrorExceptionDueToError.ReturnsFailedResult(signatureVerifier: Mock&lt;ISignatureVerifier:136&gt;, userMigrationService: Mock&lt;IUserMigrationManagementService:136&gt;, model: MarkUserMigratedModel { UserEmail = &quot;UserEmail1572ef55-3bb3-4bcf-bc59-f5696f3afeb1&quot; }, testSignature: &quot;testSignatureda2950fe-7ad4-40ab-84bd-a794a6ecce0d&quot;, testException: CHILI.GraFx.Platform.Services.External.Migration.Exceptions.MigrationErrorException: Exception of type 'CHILI.GraFx.Platform.Services.External.Migration.Exceptions.MigrationErrorException' was thrown., handler: UserManagementHandler { })" time="0.0051913" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenCorrectParameters.DeleteSubscriptionRoleAndReturnResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenCorrectParameters.DeleteSubscriptionRoleAndReturnResultOk(authUserRoles: [Role { RoleIdentifier = FullAccess, RoleScopes = Subscription | Environment, ScopeIdentifier = null }], subscriptionId: 5c1a617f-42e5-40ea-baa8-e548068648c5, userId: &quot;userId772298b7-7d0e-4ebe-b8b3-fd1266e09c54&quot;, role: SA, authRuleValidator: Mock&lt;IAuthRuleValidator:322&gt;, userManager: Mock&lt;IUserManager:114&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:114&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:383&gt;, handler: UserManagementHandler { }, authenticatedUserId: &quot;authenticatedUserId6515add3-8d4a-448e-a657-a125d87&quot;...)" time="0.0248113" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenCorrectParameters.DeleteSubscriptionRoleAndReturnResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenCorrectParameters.DeleteSubscriptionRoleAndReturnResultOk(authUserRoles: [Role { RoleIdentifier = SubscriptionAdministrator, RoleScopes = Subscription, ScopeIdentifier = 00000000-0000-0000-0000-000000000000 }], subscriptionId: 00000000-0000-0000-0000-000000000000, userId: &quot;userId772298b7-7d0e-4ebe-b8b3-fd1266e09c54&quot;, role: SA, authRuleValidator: Mock&lt;IAuthRuleValidator:322&gt;, userManager: Mock&lt;IUserManager:114&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:114&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:383&gt;, handler: UserManagementHandler { }, authenticatedUserId: &quot;authenticatedUserId6515add3-8d4a-448e-a657-a125d87&quot;...)" time="0.0159733" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenCorrectParameters.DeleteSubscriptionRoleAndReturnResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenCorrectParameters.DeleteSubscriptionRoleAndReturnResultOk(authUserRoles: [Role { RoleIdentifier = SubscriptionAdministrator, RoleScopes = Subscription, ScopeIdentifier = 00000000-0000-0000-0000-000000000000 }], subscriptionId: 19ee6ed3-e3d5-4f0b-af69-f600df1960c6, userId: &quot;userId772298b7-7d0e-4ebe-b8b3-fd1266e09c54&quot;, role: SA, authRuleValidator: Mock&lt;IAuthRuleValidator:322&gt;, userManager: Mock&lt;IUserManager:114&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:114&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:383&gt;, handler: UserManagementHandler { }, authenticatedUserId: &quot;authenticatedUserId6515add3-8d4a-448e-a657-a125d87&quot;...)" time="0.0083405" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenCorrectParameters.DeleteSubscriptionRoleAndReturnResultOk" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeleteSubscriptionRoleAsyncMethod+WhenCorrectParameters.DeleteSubscriptionRoleAndReturnResultOk(authUserRoles: [Role { RoleIdentifier = TemplateDesigner, RoleScopes = Subscription, ScopeIdentifier = 00000000-0000-0000-0000-000000000000 }], subscriptionId: 00000000-0000-0000-0000-000000000000, userId: &quot;userId772298b7-7d0e-4ebe-b8b3-fd1266e09c54&quot;, role: SA, authRuleValidator: Mock&lt;IAuthRuleValidator:322&gt;, userManager: Mock&lt;IUserManager:114&gt;, userInvitationsManager: Mock&lt;IUserInvitationsManager:114&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:383&gt;, handler: UserManagementHandler { }, authenticatedUserId: &quot;authenticatedUserId6515add3-8d4a-448e-a657-a125d87&quot;...)" time="0.0228196" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheAddUserAsyncFunction+WhenTheSignatureIsNullOrWhiteSpace.TheResultShouldEqualsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheAddUserAsyncFunction+WhenTheSignatureIsNullOrWhiteSpace.TheResultShouldEqualsBadRequest(signature: &quot;&quot;, model: AddUserModel { CustomerGuid = 44496c81-0ae4-4c08-8e81-ec57bf052c6d, Email = &quot;Email228cdf10-fb3c-4661-bee8-bd875a47b296&quot;, FirstName = &quot;FirstName84b75bf7-34bd-438c-a07c-8d0dfdc9dc0f&quot;, LastName = &quot;LastName54d38127-da09-43b6-b137-7d38b2489f1b&quot;, SubscriptionIds = [b8d20333-2bee-4d46-b4fe-fa3bf506c0e5, f79d3925-1618-4bb0-8a0f-6d245f903357, 67883c38-cbef-49a5-a9ec-e115f7ae87cd] }, validator: Mock&lt;IValidator&lt;AddUserModel&gt;:138&gt;, handler: UserManagementHandler { })" time="0.0019353" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheAddUserAsyncFunction+WhenTheSignatureIsNullOrWhiteSpace.TheResultShouldEqualsBadRequest" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheAddUserAsyncFunction+WhenTheSignatureIsNullOrWhiteSpace.TheResultShouldEqualsBadRequest(signature: null, model: AddUserModel { CustomerGuid = 19dbabec-6505-451c-a392-f279cb4ad9c2, Email = &quot;Email00de0751-4e44-414a-8008-8ce175deca49&quot;, FirstName = &quot;FirstName1dba0138-1a4b-4540-afe5-519c3960bf70&quot;, LastName = &quot;LastNameeb0538e8-4163-4676-8065-3fb4e352a022&quot;, SubscriptionIds = [e0659384-2b3b-47db-a53c-5ff6bfc0498e, 50406665-86eb-4423-b40d-05ff8ab80d09, ef402e1a-7a1a-484a-b8e4-a898aaa82354] }, validator: Mock&lt;IValidator&lt;AddUserModel&gt;:139&gt;, handler: UserManagementHandler { })" time="0.0004083" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers.UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenUserExistsAndActiveInTheSubscription.UserIsDeactivated" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Handlers" method="UserManagementHandlerTests+TheDeactivateUserInSubscriptionAsyncFunction+WhenUserExistsAndActiveInTheSubscription.UserIsDeactivated(subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Friday, 5 July 2024, Environments = [...], Guid = 1de77d8a-b6a1-4c53-af62-8df22db3662d, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Sunday, 16 October 2022, Environments = [...], Guid = 4fe4134a-94ca-4c9b-a9a1-e9d125a750d7, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Monday, 9 June 2025, Environments = [...], Guid = 1a25cd01-f43e-47c9-ae41-5c0174eb5333, HasContentAdministrators = True, ... }], dataAccessor: Mock&lt;IDatabaseDataAccessor:250&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink5119a4d3-6bab-4504-9ad5-3bc4828b90f0&quot;, CreationDate = 2023-11-06T06:05:39.0701322, CustomerGuid = d0304b65-f610-48a9-bfc3-8a5790d145c3, DeactivatedSubscriptions = [1790ac9a-0abd-41af-a86c-a3a875bfb18b, 16fb4002-d090-4012-8cd3-533b9d73d7b8, 5de20b10-c49c-4b5f-b555-275cc656e189], Email = &quot;Emaile726a3af-e42a-4512-a512-2d28d51865e5&quot;, ... }, userManagementService: Mock&lt;IUserManagementService:429&gt;, handler: UserManagementHandler { })" time="0.0123786" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="126" passed="126" failed="0" skipped="0" name="Test collection for CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" time="1.939">
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToUpdateUserBecauseServiceReturnsFailed+WhenUserIsNotIncludedInProvidedSubscription.DoesNotUpdateRolesAndReturnsOperationIsNotValidErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToUpdateUserBecauseServiceReturnsFailed+WhenUserIsNotIncludedInProvidedSubscription.DoesNotUpdateRolesAndReturnsOperationIsNotValidErrorResult(environmentManager: Mock&lt;IEnvironmentManager:22&gt;, userManagementService: Mock&lt;IUserManagementService:54&gt;, manager: UserManager { }, firstName: &quot;firstName6a66899e-8556-4741-b9e7-513e50b4b9bf&quot;, lastName: &quot;lastName50c625ff-1b37-4f0c-909b-741aca2332e7&quot;, userId: &quot;userId207936c7-8133-4e73-bbed-7e1e2df573d2&quot;)" time="0.0275911" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenTheUserHaNoOthersRoles.ReturnOperationSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenTheUserHaNoOthersRoles.ReturnOperationSuccessResult(userManagementService: Mock&lt;IUserManagementService:56&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:43&gt;, manager: UserManager { })" time="0.0576734" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenTheSubscriptionIsNotFound.ReturnsEntityNotFoundResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenTheSubscriptionIsNotFound.ReturnsEntityNotFoundResult(userManagementService: Mock&lt;IUserManagementService:57&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:46&gt;, manager: UserManager { })" time="0.0052739" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCalledUserManagementServiceInviteUsersAsync.TheUserManagementServiceIsCalledWithTheCorrectArguments" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCalledUserManagementServiceInviteUsersAsync.TheUserManagementServiceIsCalledWithTheCorrectArguments(userManagementService: Mock&lt;IUserManagementService:63&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:33&gt;, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink412baf5d-f5cf-42b6-a9ac-ebe085e21314&quot;, CreationDate = 2021-11-26T05:53:51.6030225, CustomerGuid = 6b842201-b3d3-4a22-b7ed-96a1c2d9f4f6, DeactivatedSubscriptions = [0c2af35e-5715-4f46-8110-c901cff486b3, 4b4042f4-e617-4a0d-ac5b-44766590c132, 614ebef0-2a91-4153-bb7c-536bf2aea189], Email = &quot;Emailff657f3e-7dac-4c3e-9e7f-c17e194e09a8&quot;, ... })" time="0.0290475" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenTheUserHasNoRolesInOtherSubscriptions.ReturnOperationSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenTheUserHasNoRolesInOtherSubscriptions.ReturnOperationSuccessResult(userManagementService: Mock&lt;IUserManagementService:64&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:54&gt;, manager: UserManager { })" time="0.0032211" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheCreationOfTheUserFails.TheStatusShouldEqualsFailure" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheCreationOfTheUserFails.TheStatusShouldEqualsFailure(environmentManager: Mock&lt;IEnvironmentManager:25&gt;, userManagementService: Mock&lt;IUserManagementService:62&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:32&gt;, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [c071cff9-1f83-40c8-85b1-1f48cbb45d1d, 3b8e8398-83ad-4dbe-b555-d80fde4512f1, c250f766-98e4-4a46-8f3c-8bdf2aacd96d], UserEmails = [&quot;f0842018-654c-4046-ac26-94adfd3bcb32&quot;, &quot;461bcaf2-380a-40da-ad48-d7d577cfbd6e&quot;, &quot;69f5096e-dc0d-467e-94f4-893133a0c849&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink729ece11-a143-4ba3-9876-6f8b4cbab803&quot;, CreationDate = 2023-01-20T05:44:17.2180502, CustomerGuid = 8b63841e-d321-4c92-9a8a-09e5b6102848, DeactivatedSubscriptions = [5299c28b-1159-48db-aee9-d154e885d5a4, 8e8831b6-91a5-43de-a128-7b6d3a183aac, e03f5f66-0a47-4b62-9b88-364214e1d8ec], Email = &quot;Email0a94327e-51e6-455c-98e1-a91020a33985&quot;, ... })" time="0.0782516" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToUpdateUserBecauseServiceReturnsFailed+WhenEnvironmentRolesContainNewRoleForExistingEnvironment.UpdatesRolesForTheEnvironmentAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToUpdateUserBecauseServiceReturnsFailed+WhenEnvironmentRolesContainNewRoleForExistingEnvironment.UpdatesRolesForTheEnvironmentAndReturnsSuccessResult(environmentManager: Mock&lt;IEnvironmentManager:28&gt;, userManagementService: Mock&lt;IUserManagementService:68&gt;, manager: UserManager { }, subscriptionIds: [4128baeb-9df0-4ec6-941c-043d3a3e890e, 0b3f6c9c-4145-45ed-9e2e-d8103412c1ec, 3cc8e622-b07d-4c4c-a644-20dd2a518f42], firstName: &quot;firstName2fc13eff-bf90-47fb-a6fe-c72a50c857c7&quot;, lastName: &quot;lastName2c4a0619-c13b-4792-b932-c7abe8afb53c&quot;, userId: &quot;userId61e6a23a-b84c-4455-9cfc-16d146364c52&quot;)" time="0.1022966" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTryToUpdateTDUserWithTDAndSA.ReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTryToUpdateTDUserWithTDAndSA.ReturnsSuccessResult(userId: &quot;userIdab61ae50-64f9-4960-8dc6-d8fb906e0811&quot;, subscriptionRepository: Mock&lt;ISubscriptionsRepository:38&gt;, userManagementService: Mock&lt;IUserManagementService:79&gt;, manager: UserManager { }, subscriptionIds: [80c274ed-a06a-45ea-b0ec-a2741d6797bd, 58f2dfd2-0066-42b3-9689-3d6ae8ea654e, 1dccef12-bff6-4595-a829-43159129590d], firstName: &quot;firstName07c9b984-c1c8-477a-9424-18c4fc60cff3&quot;, lastName: &quot;lastNamed53fd938-d161-4a7c-952b-6c2a0c922151&quot;)" time="0.0260193" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenNoMoreTemplateDesignerSeatsAvailableAndNotAssigningATemplateDesignerSeatRole.DoesNotUpdateRolesAndReturnsOperationIsNotValidErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenNoMoreTemplateDesignerSeatsAvailableAndNotAssigningATemplateDesignerSeatRole.DoesNotUpdateRolesAndReturnsOperationIsNotValidErrorResult(userManagementService: Mock&lt;IUserManagementService:81&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:41&gt;, subscriptionIds: [ed33b489-6ceb-4a80-ac82-ea9036330d9d, 7f805b1f-d7e7-4f8d-9806-fccdfa60761f, b71bec72-a513-4a9c-ae24-709386cfd575], manager: UserManager { }, userId: &quot;userId20755e5e-b604-4e94-9c1c-a0c6679bc2f0&quot;)" time="0.0062872" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.TheStatusShouldEqualsSuccess" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.TheStatusShouldEqualsSuccess(environmentManager: Mock&lt;IEnvironmentManager:34&gt;, userManagementService: Mock&lt;IUserManagementService:85&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:44&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink01d3a15a-6516-451a-bcc2-a44b7b5ac272&quot;, CreationDate = 2022-03-05T02:45:24.0127552, CustomerGuid = d9df88d0-cb8e-4d48-839c-a33675589dbd, DeactivatedSubscriptions = [62f94f71-61cd-4eb6-b670-7c5b93dc35d7, ed7e67e9-fec1-4765-926e-8d2cf69bb213, ca469862-fdcc-4340-b3f6-1a02cc718a5a], Email = &quot;Email555a099e-7692-40de-a87f-9c5e54bd1883&quot;, ... }, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [f78a3905-c078-436c-b41f-3ad37894a57f, b0f45045-82ad-4bb0-be1d-60edcc461217, 2b4f5821-5c9a-4935-b3c6-2c8073d3cf4d], UserEmails = [&quot;0672a1ef-a9e8-4486-824d-e15a1448f063&quot;, &quot;b81b2ca8-cfe4-4d04-b5c8-b0df014ee6b2&quot;, &quot;555a7a4f-3342-4a2e-a32d-6f44208e6f61&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLinkd8b031ad-57bd-4659-ae90-5d8234901021&quot;, CreationDate = 2023-01-23T04:11:43.2529895, CustomerGuid = d9df88d0-cb8e-4d48-839c-a33675589dbd, DeactivatedSubscriptions = [723266d9-93aa-425d-83be-a36760edc0b8, 854daab5-8c1b-4a23-9b7c-42c94826e407, c96f6930-30c6-41e1-a345-fd0fb59efc67], Email = &quot;Email8b5b67b9-e153-4da8-9d42-3af9a8580bf1&quot;, ... })" time="0.0253293" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.TheStatusShouldEqualsSuccess" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.TheStatusShouldEqualsSuccess(environmentManager: Mock&lt;IEnvironmentManager:35&gt;, userManagementService: Mock&lt;IUserManagementService:87&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:46&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLinka7c5a326-f6ce-4cc9-927b-142715055224&quot;, CreationDate = 2023-01-06T08:25:09.1825271, CustomerGuid = a1b91a09-dbed-4ac1-bed3-14dc3eb9af83, DeactivatedSubscriptions = [caeb19be-ed60-4642-864e-d1d2d2e26acb, 19e4e06f-7be8-45ca-88eb-ee22e1a4d293, 9a96ba25-23e1-4aec-ae39-aee7e5cbe653], Email = &quot;Emailb0dd67cd-578b-4efd-b581-0ad3a8a8167c&quot;, ... }, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [b2c5dcc9-22aa-41db-930f-d1983f1c3e39, e2df9b89-96ee-4694-8b27-e848ae0d0d62, 653af813-fbf4-4ee1-a54f-859cc4e9cb19], UserEmails = [&quot;14da4e64-9599-40a2-bc11-f9eb40ccb373&quot;, &quot;bd9996bd-37ad-4704-b98e-02dea2b98bed&quot;, &quot;2c5ba9af-9cc5-43d3-9a7b-13423d7d2dc2&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLinkf54f727e-9f4a-4726-919e-9853f3981c92&quot;, CreationDate = 2024-03-28T23:09:25.9610800, CustomerGuid = a1b91a09-dbed-4ac1-bed3-14dc3eb9af83, DeactivatedSubscriptions = [5499cb64-e420-4d37-858f-6e411f4cf31b, 0782e292-3995-43e1-9b73-70d386e9c069, d24e8231-6e02-4f0b-bf5b-cb13c62b4e3e], Email = &quot;Email03546752-b2b0-4528-bd23-fbe07f41a39b&quot;, ... })" time="0.0121465" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenTheSubscriptionIsFoundWhenNotAssigningTheContentAdministratorRole.ReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenTheSubscriptionIsFoundWhenNotAssigningTheContentAdministratorRole.ReturnsSuccessResult(userManagementService: Mock&lt;IUserManagementService:107&gt;, environmentManager: Mock&lt;IEnvironmentManager:43&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:60&gt;, manager: UserManager { }, subscriptionIds: [d270626b-ab16-4074-818b-c43b63c81fe3, 9053be5d-8634-41c2-b534-02accffe8fcd, b60d969d-a86b-4caa-a5be-a5c7cd6b71ed], userId: &quot;userIde2e88852-942b-4c0a-aadb-6e5e1ec3f7cc&quot;)" time="0.0171863" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenTheSubscriptionIsNotFoundWhenAssigningTheContentAdministratorRole.ReturnsEntityNotFoundResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenTheSubscriptionIsNotFoundWhenAssigningTheContentAdministratorRole.ReturnsEntityNotFoundResult(userManagementService: Mock&lt;IUserManagementService:114&gt;, environmentManager: Mock&lt;IEnvironmentManager:49&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:67&gt;, manager: UserManager { }, subscriptionIds: [0823e021-bcd0-416c-9ad6-b3ec313f6560, 5181319d-fd60-4368-821a-ba08e27c92d7, 6f5a4e56-6dd7-4d25-920d-b2b035564f42], userId: &quot;userId2657933d-230e-4ace-97be-5c9deca22a83&quot;)" time="0.0072750" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheGetAuthenticatedUserAsyncFunction+WhenUserIsFound.ReturnGetAuthenticatedUserModel" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheGetAuthenticatedUserAsyncFunction+WhenUserIsFound.ReturnGetAuthenticatedUserModel(userManagementService: Mock&lt;IUserManagementService:98&gt;, environmentManager: Mock&lt;IEnvironmentManager:37&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:110&gt;, userManager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLink1415fd9d-ebc2-4168-886e-b68230a570a7&quot;, CreationDate = 2024-02-05T01:32:18.0002831, CustomerGuid = 595eaef9-915d-4c56-a5c5-a548f15f2b9a, DeactivatedSubscriptions = [dd8df5d6-1897-451f-a00c-8a64fe66bbfe, 6ff8e061-7cb3-4077-80ce-33af5482c690, e0758a8d-6455-43f3-8ba9-4e804480536d], Email = &quot;Emailf009acd3-dbab-416c-8530-3459e8d9246f&quot;, ... })" time="0.0224054" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheGetAuthenticatedUserAsyncFunction+WhenUserIsFound.ReturnGetAuthenticatedUserModel" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheGetAuthenticatedUserAsyncFunction+WhenUserIsFound.ReturnGetAuthenticatedUserModel(userManagementService: Mock&lt;IUserManagementService:101&gt;, environmentManager: Mock&lt;IEnvironmentManager:39&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:111&gt;, userManager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLink3d4c9300-6c2a-425a-97d2-0d030c601df2&quot;, CreationDate = 2023-07-07T16:17:12.2908213, CustomerGuid = 1f092111-51b6-4024-bccc-c71878dd4432, DeactivatedSubscriptions = [65d394c2-4b6e-49e4-a206-43e6188b1c23, 5754433b-5847-44d5-a973-c0ba87dcbe56, ca5410e8-49a7-45a3-bb69-fc6b6a283f32], Email = &quot;Email2dab8e81-9a05-485b-8bf7-4947ecd2cfe9&quot;, ... })" time="0.0013892" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheGetAuthenticatedUserAsyncFunction+WhenUserIsFound.ReturnGetAuthenticatedUserModel" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheGetAuthenticatedUserAsyncFunction+WhenUserIsFound.ReturnGetAuthenticatedUserModel(userManagementService: Mock&lt;IUserManagementService:103&gt;, environmentManager: Mock&lt;IEnvironmentManager:41&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:113&gt;, userManager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLink02498709-d7ed-4974-a512-21b2d0995c06&quot;, CreationDate = 2023-11-11T22:56:05.8822560, CustomerGuid = dd4880ba-7df0-42e7-a152-35a739862246, DeactivatedSubscriptions = [6f8cc9ce-cd37-40c9-b9d5-80b059c9732c, 2ed15c38-6d8f-4305-bddb-93d0e9719836, 04c21a0f-ee9c-4e7d-893e-853ef5c7f4da], Email = &quot;Email19f5fcad-c90e-4f1f-843d-690a020f5a8c&quot;, ... })" time="0.0185236" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheGetAuthenticatedUserAsyncFunction+WhenUserIsFound.ReturnGetAuthenticatedUserModel" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheGetAuthenticatedUserAsyncFunction+WhenUserIsFound.ReturnGetAuthenticatedUserModel(userManagementService: Mock&lt;IUserManagementService:106&gt;, environmentManager: Mock&lt;IEnvironmentManager:42&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:115&gt;, userManager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLink42de0c78-16eb-451f-b976-d4fe4d63b4ed&quot;, CreationDate = 2024-10-06T00:53:08.9010396, CustomerGuid = cfd00889-dc81-490c-96d7-0750ac8382ec, DeactivatedSubscriptions = [e16aa7d2-2325-4a04-bebe-e8f34bbf8651, aa4ec280-ee20-444a-9610-433a0bcc84c2, 280e510e-e091-4ac7-bfef-f3abe5684a5a], Email = &quot;Email32dd6fdd-0ee0-43d1-916f-b5176bb6f156&quot;, ... })" time="0.0011879" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheGetAuthenticatedUserAsyncFunction+WhenUserIsFound.ReturnGetAuthenticatedUserModel" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheGetAuthenticatedUserAsyncFunction+WhenUserIsFound.ReturnGetAuthenticatedUserModel(userManagementService: Mock&lt;IUserManagementService:109&gt;, environmentManager: Mock&lt;IEnvironmentManager:45&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:116&gt;, userManager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLink80425a7c-78e2-4e6b-bccc-5809f6681f1b&quot;, CreationDate = 2024-01-22T01:16:24.7104775, CustomerGuid = f863f778-dd8c-4f07-bbc1-0fd6778f42ad, DeactivatedSubscriptions = [00000000-0000-0000-0000-000000000003], Email = &quot;Email97fafcbb-fe29-4335-a9b5-72c68ddb1f12&quot;, ... })" time="0.0276050" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheGetAuthenticatedUserAsyncFunction+WhenUserIsFound.ReturnGetAuthenticatedUserModel" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheGetAuthenticatedUserAsyncFunction+WhenUserIsFound.ReturnGetAuthenticatedUserModel(userManagementService: Mock&lt;IUserManagementService:111&gt;, environmentManager: Mock&lt;IEnvironmentManager:47&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:117&gt;, userManager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLink1469fdfa-f252-4c0d-800e-696fc7be52d0&quot;, CreationDate = 2024-06-08T06:03:48.2852842, CustomerGuid = 649eb018-4db7-4583-a097-f5633014f127, DeactivatedSubscriptions = [d547db1e-ff3e-49f1-86ec-8748f52b3473, b63f7e9f-17d4-43f8-a4f7-9b381d898362, 10b8c1d3-efbb-465c-9e15-295517889b24], Email = &quot;Email60cdad9b-c42f-4345-bb36-499359fbdb15&quot;, ... })" time="0.0014395" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheGetAuthenticatedUserAsyncFunction+WhenUserIsFound.ReturnGetAuthenticatedUserModel" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheGetAuthenticatedUserAsyncFunction+WhenUserIsFound.ReturnGetAuthenticatedUserModel(userManagementService: Mock&lt;IUserManagementService:113&gt;, environmentManager: Mock&lt;IEnvironmentManager:48&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:118&gt;, userManager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLink9bfcbc08-192a-4c83-aaae-ab497c2c6af8&quot;, CreationDate = 2021-11-16T20:49:58.2999347, CustomerGuid = 219abc7b-8aaf-4803-b886-f24147cb137e, DeactivatedSubscriptions = [fb44632f-5933-4642-ae1c-fbf068b7b29a, 665ca63a-44e5-47cc-846b-874ffa2bd0a1, b9495366-3639-4eb4-b7c0-12631979276a], Email = &quot;Emailb7624bc8-ab22-4502-b468-8184f4eb790a&quot;, ... })" time="0.0012533" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenTheUserHasRolesInEnvironmentsOfTheSubscription.ReturnOperationSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenTheUserHasRolesInEnvironmentsOfTheSubscription.ReturnOperationSuccessResult(userManagementService: Mock&lt;IUserManagementService:116&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:83&gt;, manager: UserManager { })" time="0.0425581" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.UpdatesUser" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.UpdatesUser(environmentManager: Mock&lt;IEnvironmentManager:36&gt;, userManagementService: Mock&lt;IUserManagementService:97&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:53&gt;, environmentRepository: Mock&lt;IEnvironmentsRepository:25&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink1b509aeb-8c00-4c29-ac02-04b9ae477bd2&quot;, CreationDate = 2025-07-04T17:20:25.5122679, CustomerGuid = 55c14d2d-435a-441b-9fe6-6fead2ec3d59, DeactivatedSubscriptions = [7af8ac66-d08a-4216-8989-dea2a7f5d118, 6ebded81-5ee3-41f0-b926-976d6af0a0be, e6232652-8e77-4255-b33b-c3a61ca3ce01], Email = &quot;Email395c84f7-d3d7-4295-8804-7d990ad6039e&quot;, ... }, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [54c8aa18-0a0b-494e-a489-4d9aec016209, 13dbe6b6-520f-4b6a-861c-425378e84264, 95d72fc8-6718-4239-a297-d47857553413], UserEmails = [&quot;47f0d63b-94fb-4b98-9428-3461781f5225&quot;, &quot;394bfd31-cbbb-4144-841d-588f6c3b2a77&quot;, &quot;0316ad6b-b253-49f8-9252-044a682a485e&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLinkaf5c01b9-33e8-4278-bb1c-5440697259ef&quot;, CreationDate = 2022-08-20T02:20:49.8611227, CustomerGuid = 55c14d2d-435a-441b-9fe6-6fead2ec3d59, DeactivatedSubscriptions = [e1de99d2-5675-4f7d-99f2-1e88e4f34421, f6bac10a-0aeb-4a03-966f-04c61e8ccea8, 8280ef78-47af-4644-abd7-ff6e19927f2f], Email = &quot;Emailf674e9ae-765c-4e83-9636-16cb5e98cab4&quot;, ... })" time="0.0471225" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.UpdatesUser" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.UpdatesUser(environmentManager: Mock&lt;IEnvironmentManager:38&gt;, userManagementService: Mock&lt;IUserManagementService:100&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:56&gt;, environmentRepository: Mock&lt;IEnvironmentsRepository:27&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink7cd13f9a-0160-4bd1-b6ed-e9344e79d0f9&quot;, CreationDate = 2024-09-05T11:08:10.0975608, CustomerGuid = 99d7bf05-003e-4a63-bc6a-e043353ad87d, DeactivatedSubscriptions = [8a009d79-4c26-493c-9021-00be49b04407, 6e5897a0-93bd-481c-8648-cc1c7ef1c4c3, f5e4e3a7-440e-44aa-bf20-f7881405a110], Email = &quot;Email14fcb838-84b8-42d8-9cbf-83e88bffd8f2&quot;, ... }, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [13ab03d7-df35-488a-9410-2f1de459d673, d614ea69-8bdc-4684-a7f2-82cda601ead4, b583d15a-d6bb-44f1-8213-ccbd1fb71c93], UserEmails = [&quot;b60572dd-c4c7-4653-aa89-d52f8cd384e6&quot;, &quot;174d0def-8ad0-46b4-8c88-98ab1539b1a7&quot;, &quot;b5ee45f1-5535-4a12-b343-8da162eced98&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink7265f6a2-d4a2-41ab-9bf4-ed6c07a22532&quot;, CreationDate = 2025-03-23T13:56:26.3007472, CustomerGuid = 99d7bf05-003e-4a63-bc6a-e043353ad87d, DeactivatedSubscriptions = [aae668b3-e73a-4d5c-9b6f-1e76d36cd60e, 9b81f36d-80c2-4696-ac95-bf9662e0ec97, 8f10f6fa-2862-4097-a26b-9da3bd3a3ad7], Email = &quot;Email0ae6e081-4bc7-454e-8374-d177d3685f41&quot;, ... })" time="0.0090533" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.UpdatesUser" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.UpdatesUser(environmentManager: Mock&lt;IEnvironmentManager:40&gt;, userManagementService: Mock&lt;IUserManagementService:104&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:58&gt;, environmentRepository: Mock&lt;IEnvironmentsRepository:28&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLinkbdec957f-cb5a-4a1a-80ee-4a6ccf232602&quot;, CreationDate = 2022-08-15T16:23:21.6599180, CustomerGuid = 05fb12bf-4e3c-47da-801f-36f97f38a5ef, DeactivatedSubscriptions = [787a6117-afd4-4a9e-bef1-68007ec9574d, 60c8e6a5-6d92-420c-b5a8-c65f2430a624, 48ebca4e-cc3d-4b9e-8e31-b79b04c38b1a], Email = &quot;Emaile30241c4-762a-4b3e-b339-6cbdbb58ed9c&quot;, ... }, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [84b3b401-f42e-4ce0-b317-3440c0d43c75, f60f9559-8cf5-4480-8be5-0f4691050f66, 60e7d651-2c89-4dee-b0b0-39107212d2bd], UserEmails = [&quot;17b3c4c4-fdf9-4461-9cd7-6db7d52cad5b&quot;, &quot;00d6c362-ef6a-4437-8b37-0e2c74138723&quot;, &quot;b6c9f7ef-9076-45cd-9c52-025610a50cc4&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLinkc2033c66-6a81-4f65-b59d-6c53584801b8&quot;, CreationDate = 2024-09-05T16:42:36.4238657, CustomerGuid = 05fb12bf-4e3c-47da-801f-36f97f38a5ef, DeactivatedSubscriptions = [50535c9b-ceed-4d9e-a90e-6c20855d8edb, 9603abf9-a612-40aa-b781-c1b009cf1d58, 87b09efd-6d48-4271-be52-7c3144f336c3], Email = &quot;Email9ebcbae5-2278-4c8f-b4d3-c200fe89235d&quot;, ... })" time="0.0194077" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.UpdatesUser" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.UpdatesUser(environmentManager: Mock&lt;IEnvironmentManager:44&gt;, userManagementService: Mock&lt;IUserManagementService:108&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:62&gt;, environmentRepository: Mock&lt;IEnvironmentsRepository:29&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink2b7b6286-793a-41c9-8cf1-4680588bce29&quot;, CreationDate = 2023-07-02T11:55:13.1460829, CustomerGuid = 00519f07-7406-4cb3-b7c9-20b1172f3229, DeactivatedSubscriptions = [db14e7af-a67e-4a13-9b0a-1ad42314953c, d1ea3a2d-fb21-4844-918f-dfc90274c212, 4f265630-afc5-4d77-929d-4b88499867c0], Email = &quot;Emailcbaba9ec-3ad6-4011-bfb7-a2d782e648ef&quot;, ... }, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [17f0146c-f29a-41a4-bb64-89efe7427def, 7ff8920d-11ab-47c9-95ec-26430b4815ff], UserEmails = [&quot;f7689e5c-1095-4d47-af65-5eaffdb3aeb7&quot;, &quot;f3759859-0257-4663-a37b-fccf63ad8019&quot;, &quot;6f760aac-63ed-4cc0-9ea6-9a37ee008b9a&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink3f1b8ffe-779b-4ea7-a10e-f90b2fb3a1fb&quot;, CreationDate = 2023-09-04T21:18:46.9222582, CustomerGuid = 00519f07-7406-4cb3-b7c9-20b1172f3229, DeactivatedSubscriptions = [f8f28189-f9a6-4780-b1e9-994f1209ef7f, f2a600ad-3f96-4bb1-8bb7-9cf34d84a05e, d904fb7f-f85f-4c81-8cdd-968fbe2f516a], Email = &quot;Email53b69016-dfd8-4f53-b11c-0212a16a6540&quot;, ... })" time="0.0539026" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteSAORAllRolesAndCurrentUserIsSAAndDeleteCurrentOrCurrentUserIsNotSA+WhenThereAreAdditionalSA.RemoveSubscriptionRoleAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteSAORAllRolesAndCurrentUserIsSAAndDeleteCurrentOrCurrentUserIsNotSA+WhenThereAreAdditionalSA.RemoveSubscriptionRoleAndReturnsSuccessResult(isAuthUserSubscriptionAdministrator: True, roleIdentifier: SubscriptionAdministrator, updateCurrentUser: True, additionalUserModel: UserModel { AvatarLink = &quot;AvatarLink6865d23d-ea45-451d-ad3c-9deb6c75d6f5&quot;, CreationDate = 2023-07-19T15:20:16.6927968, CustomerGuid = 8ff9c3ae-cd33-4bde-80f8-713f61bc7db8, DeactivatedSubscriptions = [9a004c24-ed9f-4cb0-ba81-ad0b6da987de, d7831652-c209-4598-b0cb-f5d7ac31d3f6, f4c5ab03-0461-4981-8be6-f95e319038ca], Email = &quot;Emailcdb6a240-584e-4efb-8972-9a5bd824e1c7&quot;, ... }, userManagementService: Mock&lt;IUserManagementService:121&gt;, manager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLinka4526aab-a5f0-41ed-a7d6-ed27b7cf7aa6&quot;, CreationDate = 2023-10-23T19:34:01.3237410, CustomerGuid = bee81de2-e8de-4d21-b271-3c21d54aa535, DeactivatedSubscriptions = [aae2f249-e8eb-443d-9e80-4fe6493f74a5, e2d2400b-9707-4b4f-8129-b1329525b52b, 07d508ba-70b3-4716-a6b2-ff43d52741bf], Email = &quot;Emaildc589d17-07ce-41aa-97bb-dd3ea8c48acf&quot;, ... }, userId: &quot;userId7599a749-edb7-4769-abcf-411a00033df6&quot;)" time="0.0587563" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteSAORAllRolesAndCurrentUserIsSAAndDeleteCurrentOrCurrentUserIsNotSA+WhenThereAreAdditionalSA.RemoveSubscriptionRoleAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteSAORAllRolesAndCurrentUserIsSAAndDeleteCurrentOrCurrentUserIsNotSA+WhenThereAreAdditionalSA.RemoveSubscriptionRoleAndReturnsSuccessResult(isAuthUserSubscriptionAdministrator: True, roleIdentifier: null, updateCurrentUser: True, additionalUserModel: UserModel { AvatarLink = &quot;AvatarLinka53254cf-6072-44c5-94f6-09cb1c11ee44&quot;, CreationDate = 2023-09-11T08:17:15.8844596, CustomerGuid = dd3ba8e0-f941-4e92-9a4a-d0f060fbf2a6, DeactivatedSubscriptions = [b90493e7-2d79-47d8-9e79-b5c0acec336a, f506b86f-fac7-4020-80a2-31a0a77250c0, 6f6b3f03-41e8-413e-9756-89ead104188f], Email = &quot;Email84432cb9-3ac0-432a-8aa8-66d228fe4732&quot;, ... }, userManagementService: Mock&lt;IUserManagementService:124&gt;, manager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLinkb3678e5d-11c7-4030-a698-c7e1743c2f3c&quot;, CreationDate = 2025-05-20T21:32:39.6619078, CustomerGuid = f3193788-cc11-41aa-bbcb-87e828c885f2, DeactivatedSubscriptions = [ae03366e-4a96-4db3-9335-296b867f416d, 8a2f71e3-6a17-4990-bb10-7217dbc330bb, c622def0-dd85-4a8b-b773-972fae0f376f], Email = &quot;Email0d8e8f00-8c16-4522-83ba-4e410e03e39c&quot;, ... }, userId: &quot;userIdc85fe5c2-7d7e-45d4-8227-606662a19b55&quot;)" time="0.0053362" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTheUserDoesHasTheRole.AddsNewRolesAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTheUserDoesHasTheRole.AddsNewRolesAndReturnsSuccessResult(userManagementService: Mock&lt;IUserManagementService:123&gt;, manager: UserManager { }, subscriptionIds: [3034c15a-cdd8-4c2f-9e39-f6954f149e8f, 6e7041cc-b200-4e97-a221-b58318a06f0d, 39f44bfa-471d-4d0d-b12f-50b609395261], firstName: &quot;firstName949ab340-ced8-4f5c-8049-9abe546cc45b&quot;, lastName: &quot;lastName96e8e020-a6db-488e-a2bf-2fb8450ba747&quot;, userId: &quot;userId9c975401-8e70-448c-af80-520278432243&quot;)" time="0.0892001" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.UpdatesUser" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.UpdatesUser(environmentManager: Mock&lt;IEnvironmentManager:46&gt;, userManagementService: Mock&lt;IUserManagementService:110&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:65&gt;, environmentRepository: Mock&lt;IEnvironmentsRepository:30&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink440f6242-5ed5-4390-b0ec-7aa7d4b3eb6d&quot;, CreationDate = 2022-03-12T22:07:06.2417871, CustomerGuid = 2f811840-f1e6-409d-8df6-5ab1b21a5b82, DeactivatedSubscriptions = [bf016016-c46e-4e56-9a11-04ffec723ca5, 596a8767-e3c2-4266-b2d0-d7d9b3b0ce34, bb80dc4a-ebdf-43b1-a94b-5ce4c857a3e1], Email = &quot;Email81b2d63f-0685-4085-840e-ccd22a16ea4b&quot;, ... }, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }], SubscriptionIds = [d3cb42d8-467d-4fea-82db-65ee140e8b7d, e6fbbac1-19e3-4f3a-a62a-adc0ea058606, 6f0f1356-7eee-46df-8f37-52c31bd7949f], UserEmails = [&quot;295a81f6-d994-4319-9dcb-1916fadb0473&quot;, &quot;ed7cd976-aa9b-417a-9df8-ce35402398d1&quot;, &quot;b161bd51-25ab-4dde-a4fe-c4e70216fffd&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink884f7f8e-2062-4900-87e6-8123c349ca1b&quot;, CreationDate = 2023-07-29T15:52:07.8763031, CustomerGuid = 2f811840-f1e6-409d-8df6-5ab1b21a5b82, DeactivatedSubscriptions = [8026c594-9748-4e3f-b263-4c7c785fc9d2, cc663ffe-d672-4a02-a781-e81c929e89a7, 7d588f56-f71f-4a64-8c58-bd6056942523], Email = &quot;Emaila8500aab-97f6-40a2-89e0-59dd9381ac52&quot;, ... })" time="0.0081769" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteSAORAllRolesAndCurrentUserIsSAAndDeleteCurrentOrCurrentUserIsNotSA+WhenThereAreAdditionalSA.RemoveSubscriptionRoleAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteSAORAllRolesAndCurrentUserIsSAAndDeleteCurrentOrCurrentUserIsNotSA+WhenThereAreAdditionalSA.RemoveSubscriptionRoleAndReturnsSuccessResult(isAuthUserSubscriptionAdministrator: False, roleIdentifier: SubscriptionAdministrator, updateCurrentUser: False, additionalUserModel: UserModel { AvatarLink = &quot;AvatarLinkecce7524-8036-4874-bbae-0edcb2435de8&quot;, CreationDate = 2023-08-05T13:14:48.1673769, CustomerGuid = c1cfe2e9-9716-43f8-8b57-63b208160385, DeactivatedSubscriptions = [c168f3d9-08bd-4701-8783-f748185a7305, 04a33f95-73ea-480f-b9bf-05124bb27643, f6cd8333-b0db-4d30-8f89-0cf5c2c91b0f], Email = &quot;Email08a1f9c3-e59f-4286-a429-0a9b244a572a&quot;, ... }, userManagementService: Mock&lt;IUserManagementService:125&gt;, manager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLinkb7786599-8e03-4680-930b-582a99e71c88&quot;, CreationDate = 2023-10-25T21:35:06.7241646, CustomerGuid = 0709df54-39f6-41d8-97c6-b3b20ff52763, DeactivatedSubscriptions = [3db1cc67-791f-4745-8da5-1a2a5e0b034f, 6c7c5260-6387-4b1e-bdfb-88ec8b9489c1, 831573fe-662e-456e-b8ee-6bfe1282d9c5], Email = &quot;Email2075fd4e-e09b-4c9b-a7c4-0d330470233f&quot;, ... }, userId: &quot;userIde86a1c72-81d6-4e49-93d8-f8667073c6ab&quot;)" time="0.0038260" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteSAORAllRolesAndCurrentUserIsSAAndDeleteCurrentOrCurrentUserIsNotSA+WhenThereAreAdditionalSA.RemoveSubscriptionRoleAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteSAORAllRolesAndCurrentUserIsSAAndDeleteCurrentOrCurrentUserIsNotSA+WhenThereAreAdditionalSA.RemoveSubscriptionRoleAndReturnsSuccessResult(isAuthUserSubscriptionAdministrator: False, roleIdentifier: null, updateCurrentUser: False, additionalUserModel: UserModel { AvatarLink = &quot;AvatarLink7f68ba6e-f18b-4c3e-bf47-9389ef862422&quot;, CreationDate = 2024-03-23T21:17:42.7153580, CustomerGuid = 00fdf2ee-dd3e-452c-a595-a5d198bf641b, DeactivatedSubscriptions = [302f48d0-4709-433b-b88c-85f616da79be, f2fe0a1b-05b5-44ce-b1b3-a580f76255c1, 01904725-4b3e-4340-a0f1-0a7405eed691], Email = &quot;Emaild094d0fa-bf5a-4c0e-a5a1-b1659e3be87a&quot;, ... }, userManagementService: Mock&lt;IUserManagementService:126&gt;, manager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLink8117d811-724e-4792-b0eb-14eee33e0f97&quot;, CreationDate = 2025-01-30T20:03:59.4895260, CustomerGuid = 7547592c-947e-4158-ba32-aeb934fa7f5e, DeactivatedSubscriptions = [284eda7c-6d7a-4766-b69b-fef8f05a0790, 480687e7-32e4-4df3-83fe-0ad670bee4e4, fef9a8eb-e159-406e-aed3-2c70e34fbf3d], Email = &quot;Email4bbc52e5-243c-4f8a-acc1-cddaf1d8b3f3&quot;, ... }, userId: &quot;userId7f12760d-15ad-408f-b6c2-702d819d123b&quot;)" time="0.0042635" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.UpdatesUser" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.UpdatesUser(environmentManager: Mock&lt;IEnvironmentManager:50&gt;, userManagementService: Mock&lt;IUserManagementService:115&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:68&gt;, environmentRepository: Mock&lt;IEnvironmentsRepository:32&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink77a14529-5cc5-47d8-aaec-94f5632eacdc&quot;, CreationDate = 2023-04-05T18:18:33.9925961, CustomerGuid = a8705c6b-d1fd-4a5e-81e4-3cbb37333842, DeactivatedSubscriptions = [be860aca-7989-45a6-8832-d2d2fbe09d3a, ffb6102a-cf9b-43f2-a176-291c17166309, 8b96b585-4cd3-493d-8de0-ca8e75bf8596], Email = &quot;Email0e37312a-34c6-49c1-a231-b08d16dc7f3a&quot;, ... }, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }], SubscriptionIds = [2defa7dd-207f-41ed-9c8d-1436e0280df9, 58b699a0-b250-4326-8a0d-9d43565a509f, 50f37c9b-7bc9-4b7b-a307-7afb793f851f], UserEmails = [&quot;8fc48870-fa74-4d95-85f9-b07093d2319b&quot;, &quot;29dd77eb-107a-49d4-a58f-f91da2d7c492&quot;, &quot;a5057edf-0336-4dd8-a65c-9a8b4f511c91&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink983b19f1-b20c-4ff1-9ab9-e24ffbf7dd51&quot;, CreationDate = 2023-01-25T20:38:19.2809341, CustomerGuid = a8705c6b-d1fd-4a5e-81e4-3cbb37333842, DeactivatedSubscriptions = [d729721b-c228-4dc7-962e-0a73adf8d513, 86385d22-7448-4f59-9f74-0cc4885cce59, 2cc4f306-acd9-44a1-9961-e34af2751b74], Email = &quot;Email63abae8a-c86d-43c4-9992-16c70a01ce3c&quot;, ... })" time="0.0165954" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.UpdatesUser" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNotNull.UpdatesUser(environmentManager: Mock&lt;IEnvironmentManager:52&gt;, userManagementService: Mock&lt;IUserManagementService:117&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:70&gt;, environmentRepository: Mock&lt;IEnvironmentsRepository:33&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink1514ec3f-50a1-47eb-9b39-9783b66c7852&quot;, CreationDate = 2024-08-27T22:57:21.7790026, CustomerGuid = f7610c3f-1fad-4802-9016-8192c9ea6552, DeactivatedSubscriptions = [38f1cefc-d018-44e9-bd61-95f581c6b766, 95644c8d-a5be-4b86-9f16-ea01df7264e5, 227e7462-5e44-41fc-ae20-bbfd7ba85e43], Email = &quot;Emaile8cdbe9e-33c9-4b2e-a31b-25778333bb82&quot;, ... }, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [8f837697-9641-4f18-b5ff-897879065e4d, 3edc435f-39a8-4333-8e42-5289d8903969, 1fe457f6-6582-4a07-a58f-ad5c25d504b1], UserEmails = [&quot;1526cded-ba19-427f-94ab-702def1ccba2&quot;, &quot;bd43ccca-da3c-4f90-b300-6f4c0323ae0e&quot;, &quot;06b39943-788e-49f2-8330-5e05f0e1b0a5&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink46ec0c11-274b-4125-8a31-3ed0fb2709f3&quot;, CreationDate = 2025-01-28T23:35:36.2532011, CustomerGuid = f7610c3f-1fad-4802-9016-8192c9ea6552, DeactivatedSubscriptions = [a610fa02-fa6a-4462-ac32-f6c02de64844, f311a0c7-38f8-4223-b1ef-876ff4b98850, e1084c0c-fef0-414c-b77b-db190b652110], Email = &quot;Emaila356b9ba-2ba9-4500-9b0f-367582e64f7a&quot;, ... })" time="0.0089474" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenFailedDeleteUserBecauseNotFound.ReturnsEntityNotFoundResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenFailedDeleteUserBecauseNotFound.ReturnsEntityNotFoundResult(userManagementService: Mock&lt;IUserManagementService:127&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:95&gt;, manager: UserManager { }, userId: &quot;userId26fbf40d-bb36-4df1-91c2-fd2358a32626&quot;, authenticatedUserId: &quot;authenticatedUserIdfef50952-bc08-404c-880d-8db3420&quot;...)" time="0.0057108" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsNotFound+WhenFailedToGetUserBecauseServiceReturnsNull.ReturnsEntityNotFoundErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsNotFound+WhenFailedToGetUserBecauseServiceReturnsNull.ReturnsEntityNotFoundErrorResult(userManagementService: Mock&lt;IUserManagementService:128&gt;, manager: UserManager { }, userId: &quot;userIdc9dfe335-5b73-43f1-ada0-07d2645d9a83&quot;, authenticatedUserId: &quot;authenticatedUserId7975143e-208e-49f7-ba5f-44aecb8&quot;...)" time="0.0028155" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTryToDeleteTheLastSubscriptionAdministrator.ReturnsOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTryToDeleteTheLastSubscriptionAdministrator.ReturnsOperationIsNotValidResult(isCurrentUserSubscriptionAdministrator: False, authUserId: &quot;authUserId6184b15f-66e7-4a2f-b4e1-254e9f4e76df&quot;, userId: &quot;userIdcfe94d60-2638-4e35-95e3-85a2ed72730f&quot;, userManagementService: Mock&lt;IUserManagementService:130&gt;, manager: UserManager { }, subscriptionIds: [aa3a294f-bd04-4054-915d-1c119620e88f, a5cf517a-36ee-4217-8a9f-bdb1171f8c92, e2c64776-0a9a-4e47-9fe2-8ff6a273b0de], firstName: &quot;firstName1a62138d-c8d6-46e6-863c-ebe30deec096&quot;, lastName: &quot;lastName2ab4c01e-136d-49c3-a250-71b3f9a7cc97&quot;)" time="0.0118881" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTryToDeleteTheLastSubscriptionAdministrator.ReturnsOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTryToDeleteTheLastSubscriptionAdministrator.ReturnsOperationIsNotValidResult(isCurrentUserSubscriptionAdministrator: True, authUserId: &quot;userId&quot;, userId: &quot;userId&quot;, userManagementService: Mock&lt;IUserManagementService:131&gt;, manager: UserManager { }, subscriptionIds: [344906e2-2395-4b6b-8e04-f3cfb4377d95, 4a5f078a-3ed4-4c72-80fb-c212f17f55a6, 5c89b926-a4e4-4bf5-aa88-502492bdffa0], firstName: &quot;firstName3bbc2071-3cc1-4710-b780-ad770221fe6a&quot;, lastName: &quot;lastName34e41220-2ea5-43a0-b7d6-9d9edc6661a3&quot;)" time="0.0013923" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToUpdateUserBecauseServiceReturnsFailed+WhenEnvironmentRolesContainNewEnvironmentAndUpdatedRoleForExistingEnvironment.AddsNewEnvironmentRoleAndUpdatesExistingRoleAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToUpdateUserBecauseServiceReturnsFailed+WhenEnvironmentRolesContainNewEnvironmentAndUpdatedRoleForExistingEnvironment.AddsNewEnvironmentRoleAndUpdatesExistingRoleAndReturnsSuccessResult(environmentManager: Mock&lt;IEnvironmentManager:62&gt;, userManagementService: Mock&lt;IUserManagementService:133&gt;, manager: UserManager { }, subscriptionIds: [9d4d3637-b903-421f-b5c4-14cba635fa48, 369d253b-2585-48d7-8cc2-6fc2c0e33ce0, c64fa6fd-ea68-4c2d-ad21-7f08f559d0d4], firstName: &quot;firstNameebf10be6-4274-4c60-8061-70970837f7ac&quot;, lastName: &quot;lastName990d9a95-a17e-41ec-bd4b-92d9b977aec8&quot;, userId: &quot;userId5b61d918-4297-4493-ac75-9fa5b234c023&quot;)" time="0.0668981" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToUpdateUserBecauseServiceReturnsFailed+WhenEnvironmentRolesContainEnvironmentWhichUserDidNotHaveBefore.AddsNewEnvironmentRoleAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToUpdateUserBecauseServiceReturnsFailed+WhenEnvironmentRolesContainEnvironmentWhichUserDidNotHaveBefore.AddsNewEnvironmentRoleAndReturnsSuccessResult(environmentManager: Mock&lt;IEnvironmentManager:65&gt;, userManagementService: Mock&lt;IUserManagementService:140&gt;, manager: UserManager { }, subscriptionIds: [d33188f5-8ec7-425d-82f6-9d22f4d60180, 90428ba4-823d-4bc0-9775-c03142318d7d, 3053e54a-388e-4f79-9eb1-cea0874ecb33], firstName: &quot;firstName2fa9f48b-41a5-4d33-a647-e314b365d4ec&quot;, lastName: &quot;lastNameabe65fbb-e826-4d77-a854-259826b6d331&quot;, userId: &quot;userId3ba3d74e-e692-4d54-b6c2-f68d34a86000&quot;)" time="0.0203516" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheCheckIfSubscriptionsExistFunction+WhenSubscriptionDoesNotExist.TheResultShouldBeFalse" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheCheckIfSubscriptionsExistFunction+WhenSubscriptionDoesNotExist.TheResultShouldBeFalse(subscriptionIdsRepositoryMocked: Mock&lt;ISubscriptionsRepository:86&gt;, invitationsManager: UserInvitationsManager { })" time="0.0018891" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteNotSAOrCurrentUserIsSAAndDeleteAnother.RemoveSubscriptionRoleAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteNotSAOrCurrentUserIsSAAndDeleteAnother.RemoveSubscriptionRoleAndReturnsSuccessResult(isAuthUserSubscriptionAdministrator: True, roleIdentifier: TemplateDesigner, updateCurrentUser: False, userManagementService: Mock&lt;IUserManagementService:141&gt;, manager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLink4e5b0ca3-f273-4e69-8b6b-8924a47ae293&quot;, CreationDate = 2023-01-05T10:37:57.8816597, CustomerGuid = e754a7bf-d53e-42fc-9c5f-49d7253093d9, DeactivatedSubscriptions = [54611f12-f773-47d8-b3a7-b0023862dc23, 293fa302-5943-4cf3-9737-83e1c7722525, 53a46290-c5b1-4468-a4da-7a401fe5469b], Email = &quot;Email6f8f654c-8812-484c-8418-2e7345d8c29d&quot;, ... }, userId: &quot;userId6f3fa323-b440-47f1-8d0a-de3bb6cf2155&quot;)" time="0.0097891" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteNotSAOrCurrentUserIsSAAndDeleteAnother.RemoveSubscriptionRoleAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteNotSAOrCurrentUserIsSAAndDeleteAnother.RemoveSubscriptionRoleAndReturnsSuccessResult(isAuthUserSubscriptionAdministrator: True, roleIdentifier: SubscriptionAdministrator, updateCurrentUser: False, userManagementService: Mock&lt;IUserManagementService:143&gt;, manager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLink5e2e9687-9f8b-4a08-9828-f614d9c9d962&quot;, CreationDate = 2022-07-29T12:17:12.8233421, CustomerGuid = ccb96ae9-562d-4d62-b624-344bc107f9b6, DeactivatedSubscriptions = [1b2b235f-83b9-4eaf-b841-ed9d4eaac8dc, cc84bdd5-3ac6-482a-92e5-985fe0efcca6, 418f7081-899c-4342-bdd2-95b0ea669020], Email = &quot;Email72b6efec-1142-435e-bf32-b1292b2221e8&quot;, ... }, userId: &quot;userId2b5b54c4-3ee3-442a-af63-c738f9025742&quot;)" time="0.0034007" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteNotSAOrCurrentUserIsSAAndDeleteAnother.RemoveSubscriptionRoleAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteNotSAOrCurrentUserIsSAAndDeleteAnother.RemoveSubscriptionRoleAndReturnsSuccessResult(isAuthUserSubscriptionAdministrator: True, roleIdentifier: SubscriptionAdministrator, updateCurrentUser: False, userManagementService: Mock&lt;IUserManagementService:144&gt;, manager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLink5f283a14-3863-4187-8db2-f37883029a2d&quot;, CreationDate = 2024-03-17T11:57:44.4361023, CustomerGuid = 7377fd8b-90f0-49ca-b23f-8e911933c8a1, DeactivatedSubscriptions = [3cb6564e-8d58-432b-9393-36d4fa497188, 988cc558-ae79-45df-a0a8-f307539db26c, 012faa60-e5d8-4f0e-9295-06559644a46f], Email = &quot;Email8f9d1156-e15d-4645-adfd-bff2538fe475&quot;, ... }, userId: &quot;userIdf61e296f-a173-4213-b187-def393d1456c&quot;)" time="0.0405331" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteNotSAOrCurrentUserIsSAAndDeleteAnother.RemoveSubscriptionRoleAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteNotSAOrCurrentUserIsSAAndDeleteAnother.RemoveSubscriptionRoleAndReturnsSuccessResult(isAuthUserSubscriptionAdministrator: True, roleIdentifier: null, updateCurrentUser: False, userManagementService: Mock&lt;IUserManagementService:145&gt;, manager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLink9ea85455-7a93-4e6c-80e0-1338277118ce&quot;, CreationDate = 2024-01-22T04:51:19.3072635, CustomerGuid = 8fcad80e-7aa6-4d19-86ad-b571f740e5ab, DeactivatedSubscriptions = [350e0144-3e9b-459b-a6d5-e5daadeba5d7, 80a72aee-8a8d-4e9b-ae45-64602383e0b4, b2310dc2-34ec-45e3-bcf2-6a6406308dc7], Email = &quot;Email6f1d61f4-ab7c-41e3-a5e9-2e3cfed27d49&quot;, ... }, userId: &quot;userIda41f066c-6598-4303-88f7-e8c6fe3e2ed3&quot;)" time="0.0032454" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenProvidedEnvironmentsAreNotBelongToAnySubscription.BelongingOfEnvironmentsIsChecked" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenProvidedEnvironmentsAreNotBelongToAnySubscription.BelongingOfEnvironmentsIsChecked(environmentManagerResult: EntityNotFoundResult`1 { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, expectedResult: EntityNotFoundResult { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, environmentManager: Mock&lt;IEnvironmentManager:72&gt;, model: UserEnvironmentsModel { EnvironmentRoles = [[578a9333-818a-405e-9282-e68e18a06f21] = [EA, EU, CA], [84244ff7-dd3b-43ca-9ea2-34c080f47dce] = [EA, EU, CA], [a2747876-a0d5-414c-96c3-34e1134c3634] = [EA, EU, CA]] }, manager: UserManager { }, userId: &quot;userId9773c284-52a1-46ee-bf74-fa94da74d05c&quot;)" time="0.0031295" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenProvidedEnvironmentsAreNotBelongToAnySubscription.BelongingOfEnvironmentsIsChecked" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenProvidedEnvironmentsAreNotBelongToAnySubscription.BelongingOfEnvironmentsIsChecked(environmentManagerResult: SuccessResult`1 { IsError = False, IsSuccess = True }, expectedResult: OperationIsNotValidResult { ErrorMessage = &quot;Environment doesn't belong to a subscription.&quot;, IsError = True, IsSuccess = False }, environmentManager: Mock&lt;IEnvironmentManager:72&gt;, model: UserEnvironmentsModel { EnvironmentRoles = [[578a9333-818a-405e-9282-e68e18a06f21] = [EA, EU, CA], [84244ff7-dd3b-43ca-9ea2-34c080f47dce] = [EA, EU, CA], [a2747876-a0d5-414c-96c3-34e1134c3634] = [EA, EU, CA]] }, manager: UserManager { }, userId: &quot;userId9773c284-52a1-46ee-bf74-fa94da74d05c&quot;)" time="0.0010598" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteNotSAOrCurrentUserIsSAAndDeleteAnother.RemoveSubscriptionRoleAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteNotSAOrCurrentUserIsSAAndDeleteAnother.RemoveSubscriptionRoleAndReturnsSuccessResult(isAuthUserSubscriptionAdministrator: True, roleIdentifier: TemplateDesigner, updateCurrentUser: False, userManagementService: Mock&lt;IUserManagementService:146&gt;, manager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLinkfd6b7d72-6ffd-4eef-b8c6-60d148cd37ed&quot;, CreationDate = 2023-06-26T02:54:51.0724219, CustomerGuid = b2d6ae4e-8e88-49fd-858e-da543c897a43, DeactivatedSubscriptions = [eb5f278e-839b-4f24-8d95-bf96fcabd6fb, 4681dd37-678e-4f3d-b2ee-4f5717567134, 6ec5241e-f462-4a10-ba62-b78ab10ac2b0], Email = &quot;Email7054a8c8-7366-4503-9ef2-7838b6df548b&quot;, ... }, userId: &quot;userId9e373462-94cc-4931-b385-3939066c94c5&quot;)" time="0.0032323" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsNotFound+WhenUserIdIsNotFoundDuringGetting.ReturnsEntityNotFoundErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsNotFound+WhenUserIdIsNotFoundDuringGetting.ReturnsEntityNotFoundErrorResult(userManagementService: Mock&lt;IUserManagementService:149&gt;, manager: UserManager { }, userId: &quot;userIda9762489-63c3-4f28-9803-e81028370397&quot;, subscriptionRole: SubscriptionAdministrator, authenticatedUserId: &quot;authenticatedUserId6a439c78-9e25-4315-8b19-3b8281b&quot;...)" time="0.0122778" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNull.TheStatusShouldEqualsFailure" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsTheSame+WhenUserInvitationResultModelUserIsNull.TheStatusShouldEqualsFailure(environmentManager: Mock&lt;IEnvironmentManager:74&gt;, userManagementService: Mock&lt;IUserManagementService:151&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:93&gt;, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [dd8ab41f-c3f4-4c15-acc6-e1741786cbaa, 2f95d0df-1707-4aa1-98e4-1b3238b4aa1c, aa17ee7c-0d17-4f3a-8065-de5305f1df68], UserEmails = [&quot;ff8a600f-928c-4241-84ad-b91910690cbf&quot;, &quot;a0a328cb-850c-4380-b03a-24c65f4bcc15&quot;, &quot;f526768b-df98-4432-b6bd-aa32fef71403&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink4c2de370-77ab-425c-b606-0c55fedee54b&quot;, CreationDate = 2021-11-19T09:23:05.6968658, CustomerGuid = c57463e5-8cbc-4cc5-979e-5dbde325f643, DeactivatedSubscriptions = [09d07843-79af-4240-81db-e38b8387e5ce, a73dcd59-e58c-46aa-9eb7-b67e7d89c840, bc33625e-6e3d-4b9f-b12c-94aef429e018], Email = &quot;Emailb755f26c-edd0-49f6-be72-415b9439fa5f&quot;, ... })" time="0.0062982" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheCheckIfSubscriptionsExistFunction+WhenSubscriptionDoesExist.TheResultShouldBeTrue" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheCheckIfSubscriptionsExistFunction+WhenSubscriptionDoesExist.TheResultShouldBeTrue(subscriptionIdsRepositoryMocked: Mock&lt;ISubscriptionsRepository:94&gt;, subscription: Subscription { Customer = Customer { BillingContactEmail = &quot;BillingContactEmailadbdb64a-7ced-480e-be64-1ac2b32&quot;..., ExactName = &quot;ExactName9246373b-1d12-47a9-92a5-d261f6b83ea5&quot;, Guid = dc75f509-397c-4ac0-a9e7-583070cd1771, Id = 39, SalesForceName = &quot;SalesForceName2f91c4c9-1ba5-4886-9a5f-05f30e923cad&quot;, ... }, EndDate = Tuesday, 7 November 2023, Environments = [Environment { ... }, Environment { ... }, Environment { ... }], Guid = 35a4dd5e-e645-4fea-aa13-944a7269a864, HasContentAdministrators = True, ... }, invitationsManager: UserInvitationsManager { })" time="0.0012400" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserExists.ReturnsCorrectUpdateResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserExists.ReturnsCorrectUpdateResult(updateUserResult: Ok, authenticatedUser: Mock&lt;IAuthenticatedUser:154&gt;.Object, expectedResultType: typeof(CHILI.GraFx.Platform.Core.Models.Results.SuccessResult), userId: &quot;userIdc0e29196-4f82-4b30-ab75-f17800fead5f&quot;, userManagementService: Mock&lt;IUserManagementService:157&gt;, updateModel: UpdateUserModel { FirstName = &quot;FirstNamee6d3490d-b34b-47c5-b748-aa9ca11e3722&quot;, LastName = &quot;LastNamec48d15be-08c3-4f42-a489-c4bb266b78cc&quot; }, manager: UserManager { })" time="0.0229487" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheInvitingUserIsChiliAdmin+WhenTheExistingUserModelIsNull.TheStatusShouldEqualsSuccess" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheInvitingUserIsChiliAdmin+WhenTheExistingUserModelIsNull.TheStatusShouldEqualsSuccess(environmentManager: Mock&lt;IEnvironmentManager:79&gt;, userManagementService: Mock&lt;IUserManagementService:159&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:96&gt;, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [849bdcb2-dfdf-4844-a7fb-b317342c94e2, 7f7901bf-d22b-4de0-8e07-169dea4dde71, aa557464-8572-4138-9747-5ffd922e6b1a], UserEmails = [&quot;6f1bdddc-6415-42cc-b7e0-222ac0086f2f&quot;, &quot;26df5b89-55c1-4577-b281-f872c952e64e&quot;, &quot;f91dc76b-0685-4da8-80e5-9ed82ae6c5c6&quot;] }, invitationsManager: UserInvitationsManager { }, customerGuid: 793ca208-6f0e-4a09-8986-ae847d4b6c8b, invitingUser: UserModel { AvatarLink = &quot;AvatarLinke45ac663-5bb0-4a16-a779-9f2b649f5d09&quot;, CreationDate = 2024-06-21T23:54:17.0354597, CustomerGuid = null, DeactivatedSubscriptions = [2285b970-e1bc-48fe-b72c-6d58a055e3b0, 80e19b4c-7978-4014-9953-ec98ccff00ab, 1c134acb-bc08-4955-b42b-dbdee87a9832], Email = &quot;Emailfa2f6687-c4a3-4048-8f8c-69fdafdfc2c4&quot;, ... })" time="0.0327383" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserExists.ReturnsCorrectUpdateResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserExists.ReturnsCorrectUpdateResult(updateUserResult: NotFound, authenticatedUser: Mock&lt;IAuthenticatedUser:154&gt;.Object, expectedResultType: typeof(CHILI.GraFx.Platform.Core.Models.Results.ErrorResults.EntityNotFoundResult), userId: &quot;userIdc0e29196-4f82-4b30-ab75-f17800fead5f&quot;, userManagementService: Mock&lt;IUserManagementService:157&gt;, updateModel: UpdateUserModel { FirstName = &quot;FirstNamee6d3490d-b34b-47c5-b748-aa9ca11e3722&quot;, LastName = &quot;LastNamec48d15be-08c3-4f42-a489-c4bb266b78cc&quot; }, manager: UserManager { })" time="0.0316011" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheInvitingUserIsChiliAdmin+WhenTheExistingUserModelIsNull.TheStatusShouldEqualsSuccess" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheInvitingUserIsChiliAdmin+WhenTheExistingUserModelIsNull.TheStatusShouldEqualsSuccess(environmentManager: Mock&lt;IEnvironmentManager:80&gt;, userManagementService: Mock&lt;IUserManagementService:160&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:97&gt;, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [b4ae7f9f-0b62-46e9-8d52-df53d5f7b045, 3cb4e6e3-8213-4084-a4b8-d9276ad91e7b, 05161503-f93c-4fdf-a9c8-7ea756742190], UserEmails = [&quot;6833edf5-92b2-41f5-a8cb-b397889cd354&quot;, &quot;23148256-819a-4a34-a07e-370200306d4b&quot;, &quot;17bd68ee-c702-48e4-9935-19b29de98203&quot;] }, invitationsManager: UserInvitationsManager { }, customerGuid: db5aee16-2434-47e8-8d05-1d5440f7f5a8, invitingUser: UserModel { AvatarLink = &quot;AvatarLink55fe9bcf-b9af-43c3-82b3-3b9e2fc15c22&quot;, CreationDate = 2024-03-14T08:56:54.5475302, CustomerGuid = 0450bf0e-5e53-4913-8a76-98bf2b087c2e, DeactivatedSubscriptions = [349cbe35-c266-4e3d-a094-463fa96f4795, 23b7d893-25d2-4f00-b1a5-6e7bd107fb0a, a8da6980-1693-4b15-b5ca-48da180c0d61], Email = &quot;Email77cc27a6-b9f9-4e92-8259-326c9951a9f6&quot;, ... })" time="0.0019692" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserExists.ReturnsCorrectUpdateResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserExists.ReturnsCorrectUpdateResult(updateUserResult: Ok, authenticatedUser: Mock&lt;IAuthenticatedUser:155&gt;.Object, expectedResultType: typeof(CHILI.GraFx.Platform.Core.Models.Results.SuccessResult), userId: &quot;simple_dimple_id&quot;, userManagementService: Mock&lt;IUserManagementService:157&gt;, updateModel: UpdateUserModel { FirstName = &quot;FirstNamee6d3490d-b34b-47c5-b748-aa9ca11e3722&quot;, LastName = &quot;LastNamec48d15be-08c3-4f42-a489-c4bb266b78cc&quot; }, manager: UserManager { })" time="0.0025808" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserExists.ReturnsCorrectUpdateResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserExists.ReturnsCorrectUpdateResult(updateUserResult: Ok, authenticatedUser: Mock&lt;IAuthenticatedUser:156&gt;.Object, expectedResultType: typeof(CHILI.GraFx.Platform.Core.Models.Results.SuccessResult), userId: &quot;userIdc0e29196-4f82-4b30-ab75-f17800fead5f&quot;, userManagementService: Mock&lt;IUserManagementService:157&gt;, updateModel: UpdateUserModel { FirstName = &quot;FirstNamee6d3490d-b34b-47c5-b748-aa9ca11e3722&quot;, LastName = &quot;LastNamec48d15be-08c3-4f42-a489-c4bb266b78cc&quot; }, manager: UserManager { })" time="0.0211844" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserExists.ReturnsCorrectUpdateResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserExists.ReturnsCorrectUpdateResult(updateUserResult: Ok, authenticatedUser: Mock&lt;IAuthenticatedUser:159&gt;.Object, expectedResultType: typeof(CHILI.GraFx.Platform.Core.Models.Results.ErrorResults.OperationIsNotValidResult), userId: &quot;userIdc0e29196-4f82-4b30-ab75-f17800fead5f&quot;, userManagementService: Mock&lt;IUserManagementService:157&gt;, updateModel: UpdateUserModel { FirstName = &quot;FirstNamee6d3490d-b34b-47c5-b748-aa9ca11e3722&quot;, LastName = &quot;LastNamec48d15be-08c3-4f42-a489-c4bb266b78cc&quot; }, manager: UserManager { })" time="0.0499903" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserExists.ReturnsCorrectUpdateResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserExists.ReturnsCorrectUpdateResult(updateUserResult: Ok, authenticatedUser: Mock&lt;IAuthenticatedUser:157&gt;.Object, expectedResultType: typeof(CHILI.GraFx.Platform.Core.Models.Results.ErrorResults.OperationIsNotValidResult), userId: &quot;userIdc0e29196-4f82-4b30-ab75-f17800fead5f&quot;, userManagementService: Mock&lt;IUserManagementService:157&gt;, updateModel: UpdateUserModel { FirstName = &quot;FirstNamee6d3490d-b34b-47c5-b748-aa9ca11e3722&quot;, LastName = &quot;LastNamec48d15be-08c3-4f42-a489-c4bb266b78cc&quot; }, manager: UserManager { })" time="0.0360105" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserExists.ReturnsCorrectUpdateResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserExists.ReturnsCorrectUpdateResult(updateUserResult: Failed, authenticatedUser: Mock&lt;IAuthenticatedUser:156&gt;.Object, expectedResultType: typeof(CHILI.GraFx.Platform.Core.Models.Results.ErrorResults.ServiceErrorResult), userId: &quot;userIdc0e29196-4f82-4b30-ab75-f17800fead5f&quot;, userManagementService: Mock&lt;IUserManagementService:157&gt;, updateModel: UpdateUserModel { FirstName = &quot;FirstNamee6d3490d-b34b-47c5-b748-aa9ca11e3722&quot;, LastName = &quot;LastNamec48d15be-08c3-4f42-a489-c4bb266b78cc&quot; }, manager: UserManager { })" time="0.0035911" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserExists.ReturnsCorrectUpdateResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserExists.ReturnsCorrectUpdateResult(updateUserResult: Failed, authenticatedUser: Mock&lt;IAuthenticatedUser:160&gt;.Object, expectedResultType: typeof(CHILI.GraFx.Platform.Core.Models.Results.ErrorResults.OperationIsNotValidResult), userId: &quot;userIdc0e29196-4f82-4b30-ab75-f17800fead5f&quot;, userManagementService: Mock&lt;IUserManagementService:157&gt;, updateModel: UpdateUserModel { FirstName = &quot;FirstNamee6d3490d-b34b-47c5-b748-aa9ca11e3722&quot;, LastName = &quot;LastNamec48d15be-08c3-4f42-a489-c4bb266b78cc&quot; }, manager: UserManager { })" time="0.0036724" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsNotFound+WhenFailedToGetUserBecauseServiceThrowsIdentityServerError.DoesNotUpdateRolesAndReturnsServiceErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsNotFound+WhenFailedToGetUserBecauseServiceThrowsIdentityServerError.DoesNotUpdateRolesAndReturnsServiceErrorResult(userManagementService: Mock&lt;IUserManagementService:163&gt;, manager: UserManager { }, userId: &quot;userId32ce8c89-c77a-480f-a91f-39401accc453&quot;, subscriptionRole: SubscriptionAdministrator, authenticatedUserId: &quot;authenticatedUserIdfa70dbb1-b33c-41e2-98bc-01a347c&quot;...)" time="0.0032130" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheGetAuthenticatedUserAsyncFunction+WhenUserIsNotFound.ReturnsEntityNotFoundErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheGetAuthenticatedUserAsyncFunction+WhenUserIsNotFound.ReturnsEntityNotFoundErrorResult(userManagementService: Mock&lt;IUserManagementService:164&gt;, authenticatedUser: Mock&lt;IAuthenticatedUser:172&gt;, userManager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLinkd13aedcf-5538-427a-8f5d-5fe7da088a0b&quot;, CreationDate = 2025-05-07T10:39:54.8438648, CustomerGuid = 2ab03784-bcf6-4c7f-ac91-5399b3cc55d3, DeactivatedSubscriptions = [57bd6563-32f0-4d94-bc81-ed0f6f9b791c, b8aaef9d-2463-40bd-a87e-1d47b53f3512, 94381b3b-29b6-4e04-9128-85d8b455d591], Email = &quot;Email71658d6e-cfb7-49c5-83bc-d7231adea7ce&quot;, ... })" time="0.0022621" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsNotFound+WhenFailedToGetUserBecauseServiceThrowsIdentityServerError.ReturnsServiceErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsNotFound+WhenFailedToGetUserBecauseServiceThrowsIdentityServerError.ReturnsServiceErrorResult(userManagementService: Mock&lt;IUserManagementService:175&gt;, manager: UserManager { }, userId: &quot;userId77c76390-7b00-456f-9c2b-f1e52d72d6d1&quot;, authenticatedUserId: &quot;authenticatedUserIdba54655c-598f-4527-bdf8-61d81e0&quot;...)" time="0.0029147" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenTheSubscriptionDoesNotSupportTheContentAdministratorRoleWhenNotAssigningTheContentAdministratorRole.ReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenTheSubscriptionDoesNotSupportTheContentAdministratorRoleWhenNotAssigningTheContentAdministratorRole.ReturnsSuccessResult(userManagementService: Mock&lt;IUserManagementService:179&gt;, environmentManager: Mock&lt;IEnvironmentManager:88&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:111&gt;, manager: UserManager { }, subscriptionIds: [8d438dfd-b19a-4997-a8ec-d34843f5168e, 940a4ccc-353d-420f-8c53-0b99bb5761b6, 4097beca-6650-430f-847f-b051715a5fb1], userId: &quot;userIdd9c0a3bb-9180-494f-bdb2-76a129b2f21f&quot;)" time="0.0063297" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenUserIdIsNotFound.ReturnsEntityNotFoundErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenUserIdIsNotFound.ReturnsEntityNotFoundErrorResult(userManagementService: Mock&lt;IUserManagementService:190&gt;, model: UserSubscriptionRolesModel { SubscriptionRoles = [SA, TD, SA] }, manager: UserManager { }, userId: &quot;userId1a23a9da-2908-40a3-baef-87ac500f99f0&quot;)" time="0.0029904" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheCreationOfTheUserSucceeds.TheStatusShouldEqualsSuccess" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheCreationOfTheUserSucceeds.TheStatusShouldEqualsSuccess(environmentManager: Mock&lt;IEnvironmentManager:92&gt;, userManagementService: Mock&lt;IUserManagementService:193&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:113&gt;, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [6b779928-ab48-43ee-baee-2f43a263c6d9, 2b719f2e-d47d-44a0-bc78-9bcc988efb3f, abb39704-df40-4eaa-aad6-a3b9f4cf37da], UserEmails = [&quot;b426a08f-a4e0-4a15-9010-f113df55a6b9&quot;, &quot;d1624416-4d35-46f1-9f23-33465b708dcc&quot;, &quot;8dbfc2fb-551c-476e-b3b0-a3941cf7733c&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink3fd2937c-fa50-4a3c-9d74-0964f9ee118a&quot;, CreationDate = 2022-12-26T16:47:00.1848199, CustomerGuid = d76e65d0-e9a6-4e3b-b0cc-2d717a2c4559, DeactivatedSubscriptions = [f1021618-4c4f-4a00-bc3a-0862c2d91e17, 4ca7b1a9-724e-4e5e-b8d7-9434e5769379, 9fe509b5-6b25-4353-88f4-37d852a913c4], Email = &quot;Emaile3f09df0-9889-4c41-94bc-1c5fc9d765c9&quot;, ... })" time="0.0071833" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTheUserDoesNotHasTheRole.AddsNewRolesAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTheUserDoesNotHasTheRole.AddsNewRolesAndReturnsSuccessResult(userManagementService: Mock&lt;IUserManagementService:194&gt;, manager: UserManager { }, subscriptionIds: [127d6cd3-dda9-4640-bfa2-98baf8f5fc75, fec5ce05-e16a-42b6-bec2-5c4809f7ad77, c285a0d5-f50a-4713-a329-6eca66c6b911], firstName: &quot;firstNameeeb740fb-15bb-4869-a337-b8d35a671011&quot;, lastName: &quot;lastName45b548af-e710-4e42-84fd-d670d74fc790&quot;, userId: &quot;userIde93b1b3f-c4a2-4782-99c4-8d03e37bf5d8&quot;)" time="0.0721540" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+Always.DoesNotChangeNonSubscriptionRolesDuringUpdate" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+Always.DoesNotChangeNonSubscriptionRolesDuringUpdate(userManagementService: Mock&lt;IUserManagementService:197&gt;, manager: UserManager { }, subscriptionIds: [426cfde1-672a-44a9-8911-b343b7d063b2, 0d5832d6-7ebb-4653-9c70-e0d1ef191a53, cafdab55-75e6-48c2-aaee-3a818f750d2c], firstName: &quot;firstNameb4e98577-479a-4f92-a1a4-06820515856e&quot;, lastName: &quot;lastNamee106ca0d-0532-4213-a854-f796164eceaa&quot;, userId: &quot;userId6d3d5747-c6bc-4a76-88bb-5b7c70341a74&quot;)" time="0.0530605" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+Always.DoesNotFailWhenNoTemplateDesignerSeatsAreAvailableButWhenTheTdRoleIsNotUsed" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+Always.DoesNotFailWhenNoTemplateDesignerSeatsAreAvailableButWhenTheTdRoleIsNotUsed(userManagementService: Mock&lt;IUserManagementService:199&gt;, manager: UserManager { }, subscriptionIds: [be44004c-c6a4-4858-bbea-7d08fd342383, 14b5f15a-1dfc-4c0c-85b5-fd731aa459e4, 6acfaff6-b7ee-42e0-be95-2acda09553fd], firstName: &quot;firstName25669c31-4617-456e-8750-4b30b1efd763&quot;, lastName: &quot;lastName5b974f42-2c1d-49b4-bbb9-bfe7ab6d27bc&quot;, userId: &quot;userIdf1d96d49-290c-44c3-abe6-6d611a3b5b71&quot;)" time="0.0254927" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenUserIdIsNotFoundDuringUpdate.ReturnsEntityNotFoundErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenUserIdIsNotFoundDuringUpdate.ReturnsEntityNotFoundErrorResult(userManagementService: Mock&lt;IUserManagementService:202&gt;, manager: UserManager { }, subscriptionIds: [e71f7b94-ff95-4ac8-9b51-0371791d3502, 81f0c01d-71dc-4d70-a57f-a0a9894be318, 17566248-dc57-4e0d-ab19-a56e89d24505], userId: &quot;userIdb923cd97-e00c-41cd-92d0-f7d89900bc4c&quot;)" time="0.0126686" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenTheSubscriptionDoesNotSupportTheContentAdministratorRoleWhenAssigningTheContentAdministratorRole.ReturnsOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenTheSubscriptionDoesNotSupportTheContentAdministratorRoleWhenAssigningTheContentAdministratorRole.ReturnsOperationIsNotValidResult(userManagementService: Mock&lt;IUserManagementService:203&gt;, environmentManager: Mock&lt;IEnvironmentManager:99&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:120&gt;, manager: UserManager { }, subscriptionIds: [1979cd04-871c-46bb-8341-acc9b184cd4f, d24131b9-548f-4063-8f88-37ef3f7b0f6b, a34ad472-06d5-4fb0-a184-922d9eed2b3c], userId: &quot;userIde3e8bf4b-b509-47ab-a062-ffed1d7cfe2e&quot;)" time="0.0070163" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsNotFound+WhenUserIdIsNotFoundDuringUpdate.ReturnsEntityNotFoundErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsNotFound+WhenUserIdIsNotFoundDuringUpdate.ReturnsEntityNotFoundErrorResult(userManagementService: Mock&lt;IUserManagementService:204&gt;, manager: UserManager { }, userId: &quot;userId293cc8c3-250b-438c-b1e0-e9ae1f409a26&quot;, authenticatedUserId: &quot;authenticatedUserIdeb079080-79cf-4a63-987b-22dc370&quot;..., userModel: UserModel { AvatarLink = &quot;AvatarLink2d8189eb-c794-4b6e-b44a-f7dd4f556b40&quot;, CreationDate = 2022-10-12T01:25:27.0421620, CustomerGuid = 058aa898-ea30-49c8-945c-42d4cb453fe9, DeactivatedSubscriptions = [b8840cc4-2709-4fc2-bcef-5a233888e7ea, b91f3baf-a555-4aeb-ba13-8694b08df7f7, 500ac7fe-44f2-481e-93cb-1868241ec609], Email = &quot;Emailb62676a7-13b1-4516-bcf4-27b44e83425d&quot;, ... })" time="0.0044996" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToUpdateUserBecauseServiceReturnsFailed+Always.DoesNotChangeNonEnvironmentRolesDuringUpdate" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToUpdateUserBecauseServiceReturnsFailed+Always.DoesNotChangeNonEnvironmentRolesDuringUpdate(environmentManager: Mock&lt;IEnvironmentManager:101&gt;, userManagementService: Mock&lt;IUserManagementService:213&gt;, manager: UserManager { }, subscriptionIds: [df9bc643-b4de-4b54-84fd-c30bebdbedee, 4d4d2f03-b24d-47ee-8161-3db7c7e4dbb6, 003395a4-cf41-42c8-bef2-e5fb7b0b06c5], firstName: &quot;firstName469e292d-ff25-4a61-80bf-6713ded4e7ee&quot;, lastName: &quot;lastNamebe7e2bc6-470b-4ca3-8dd3-13d6b86b3ebf&quot;, userId: &quot;userId4b576800-5196-43ba-bce9-aa5801e9a3f4&quot;)" time="0.0191746" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenUserDoesNotHaveRoleToDelete.ReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenUserDoesNotHaveRoleToDelete.ReturnsSuccessResult(isAuthUserSubscriptionAdministrator: True, roleIdentifier: TemplateDesigner, userManagementService: Mock&lt;IUserManagementService:215&gt;, manager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLinka093656b-56e4-44a9-9eb8-300fc93c2f71&quot;, CreationDate = 2023-09-16T11:53:23.5099255, CustomerGuid = e087600a-1857-4fde-a38c-0e15296dec45, DeactivatedSubscriptions = [b96cbec5-3641-47b7-81aa-15b818338091, bcd503b4-e505-43cd-be12-d948b92cfe17, bd6c2a00-42ab-4334-9ae1-ae6447de37ab], Email = &quot;Email008c4f15-7a92-43d7-bc33-2e95e4bfd13d&quot;, ... }, userId: &quot;userIddc01d24d-9940-4d8d-96c8-f8b1e9f09d80&quot;)" time="0.0048170" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenUserDoesNotHaveRoleToDelete.ReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenUserDoesNotHaveRoleToDelete.ReturnsSuccessResult(isAuthUserSubscriptionAdministrator: True, roleIdentifier: null, userManagementService: Mock&lt;IUserManagementService:216&gt;, manager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLink3c7a601a-6651-44a8-b162-8d322c8d1f31&quot;, CreationDate = 2023-03-13T03:25:51.3570489, CustomerGuid = 72d560c7-0e3e-4f85-98f1-f4695a7c4437, DeactivatedSubscriptions = [865fdf91-abca-4d7f-a393-99022b13878e, 818fa324-e03c-4f99-a4db-6d3ea0472747, d1b51cc1-080c-440f-aaa8-ae72dd9a50b3], Email = &quot;Email785af957-78cc-4dec-96c3-4a470d987cd4&quot;, ... }, userId: &quot;userId2fa11d4e-de91-4b42-acb7-619cbd85c2d6&quot;)" time="0.0094518" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenUserDoesNotHaveRoleToDelete.ReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenUserDoesNotHaveRoleToDelete.ReturnsSuccessResult(isAuthUserSubscriptionAdministrator: True, roleIdentifier: SubscriptionAdministrator, userManagementService: Mock&lt;IUserManagementService:217&gt;, manager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLink0c9c03e3-c005-4291-aa08-a252e5d7d279&quot;, CreationDate = 2022-02-13T05:28:48.0456184, CustomerGuid = d6e494c8-0ade-4d7f-8858-bf1488d8c011, DeactivatedSubscriptions = [d9840c91-a991-468c-815c-23cdef80ca41, 1dbbaadf-0452-4dd4-bb94-96bc0bb7b7e2, 288a6e2d-d066-4749-9b95-83db306fcf77], Email = &quot;Emailf6a789ca-610a-4cc8-aef0-71c965aa6ce0&quot;, ... }, userId: &quot;userId87f55689-f400-43e1-b719-2dc979155ae7&quot;)" time="0.0005301" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenFailedToGetUserBecauseServiceThrowsIdentityServerError.DoesNotUpdateRolesAndReturnsServiceErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenFailedToGetUserBecauseServiceThrowsIdentityServerError.DoesNotUpdateRolesAndReturnsServiceErrorResult(userManagementService: Mock&lt;IUserManagementService:219&gt;, model: UserSubscriptionRolesModel { SubscriptionRoles = [SA, TD, SA] }, manager: UserManager { }, userId: &quot;userId858c7093-543c-4c9d-a27b-8ddabf30b2a7&quot;)" time="0.0065900" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenEnvironmentsAreDuplicated.TheUserManagementServiceIsCalledWithoutDuplicatedEnvironments" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenEnvironmentsAreDuplicated.TheUserManagementServiceIsCalledWithoutDuplicatedEnvironments(environmentManager: Mock&lt;IEnvironmentManager:107&gt;, userManagementService: Mock&lt;IUserManagementService:222&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:130&gt;, invitationsManager: UserInvitationsManager { }, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [5291617b-8461-4318-ac70-5e2c2438a962, cc0b48b6-a8ef-435f-9dcd-bb6b7156e19a, 60afaa2f-4184-4b39-aec5-9181f495a309], UserEmails = [&quot;21806271-61ed-4d1f-a84b-c9bbe39e6dda&quot;, &quot;a68b37d0-3c71-4f00-911e-c9ba5f44ab6d&quot;, &quot;96b90d2f-93eb-41c0-a617-7281a2fb61e5&quot;] }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink4157c0a6-7e62-460c-a05c-185d46d7f249&quot;, CreationDate = 2022-08-30T12:50:37.2334551, CustomerGuid = d440662e-407b-4bef-9b76-92b7e1b02281, DeactivatedSubscriptions = [d2395aeb-8ffa-4817-ab96-ebbde78381b6, 5099d9ad-e7d4-4b99-982a-0357c17492ce, b6906ff9-d3aa-4b72-bc06-8a550156341e], Email = &quot;Emaila13f2341-c964-4033-bc75-a2fb4a87e644&quot;, ... })" time="0.0634743" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNotNull+WhenUserIsChiliAdmin.ReturnOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNotNull+WhenUserIsChiliAdmin.ReturnOperationIsNotValidResult(userModel: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [f167f0c2-a4b2-4d8a-afca-ffab25e61b62, cbea7314-ce85-4a99-be6f-63a3cd4f952d, 8b6f4a63-a872-4494-98ad-73326d0af330], UserEmails = [&quot;f3492c77-01ed-45c5-ac84-7ba4822fb6e2&quot;, &quot;d26da11b-ea7a-4f10-b711-c907b620ce4d&quot;, &quot;cffc4442-4d36-4236-ab59-2dd71e81321a&quot;] }, environmentManager: Mock&lt;IEnvironmentManager:106&gt;, userManagementService: Mock&lt;IUserManagementService:220&gt;, subscriptionRepository: Mock&lt;ISubscriptionsRepository:128&gt;, subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Friday, 20 October 2023, Environments = [...], Guid = e26b3b39-eb25-461f-84e7-c1ea5f4cdaf6, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Sunday, 21 January 2024, Environments = [...], Guid = 0b304588-1c1b-4030-92b4-48900a022dac, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Thursday, 10 March 2022, Environments = [...], Guid = 3fbfd45f-aa8f-4660-b8ea-7bff84585ff1, HasContentAdministrators = True, ... }], invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink5ff1a983-0102-42f2-9f05-621551b6a462&quot;, CreationDate = 2024-09-14T16:05:24.7502557, CustomerGuid = ddaa6870-53f2-46a1-9619-d0d85900db20, DeactivatedSubscriptions = [5c340a71-7dd7-42ed-8e33-b8d19ccea676, ff355a99-6038-40ac-ac2e-a3bf92bb533a, d9cb5937-7574-4c2d-ae43-a7a67639dc64], Email = &quot;Email773494c6-6305-474f-84ee-801fe32398ea&quot;, ... })" time="0.0162853" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNotNull+WhenUserIsChiliAdmin.ReturnOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNotNull+WhenUserIsChiliAdmin.ReturnOperationIsNotValidResult(userModel: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [b751e6c4-a0bd-424c-9853-605ffa2444aa, d9d58d29-5899-46f0-b128-7e08c311d49d, c585a674-a8f0-4df1-b4d7-375986dd0f70], UserEmails = [&quot;bb4f60d0-1a32-4197-bc1f-6d93c22e4d87&quot;, &quot;ce11aa62-3fc0-45da-9bd4-6860c75d0c92&quot;, &quot;d5e9e85e-983e-4128-beab-58cc154c8c9b&quot;] }, environmentManager: Mock&lt;IEnvironmentManager:108&gt;, userManagementService: Mock&lt;IUserManagementService:224&gt;, subscriptionRepository: Mock&lt;ISubscriptionsRepository:132&gt;, subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Tuesday, 26 November 2024, Environments = [...], Guid = 7cabef8c-b540-4996-a071-497087c69e7a, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Friday, 30 December 2022, Environments = [...], Guid = 7cf5936b-8aff-4275-a111-b2e0429d5a3e, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Friday, 9 December 2022, Environments = [...], Guid = c469f0fb-2de3-4041-bad2-48135f21d720, HasContentAdministrators = True, ... }], invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLinkde5b63cb-b6ca-4935-9480-c9af461b23f2&quot;, CreationDate = 2021-09-09T23:46:16.9172040, CustomerGuid = null, DeactivatedSubscriptions = [9b3508a2-5604-4638-8edb-314b524d5d7e, b30a76f7-6a6d-478e-88a7-0bcc4d4e36b9, 55a980fb-8519-4fa7-81d7-a4a3292e8939], Email = &quot;Emaild9dc96ac-6153-48dc-aa58-63cb7a66da32&quot;, ... })" time="0.0026185" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenFailedDeleteUserBecauseFailed.ReturnsServiceErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenFailedDeleteUserBecauseFailed.ReturnsServiceErrorResult(userManagementService: Mock&lt;IUserManagementService:240&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:179&gt;, manager: UserManager { }, userId: &quot;userId35284ebb-d2e9-4a49-9d66-9057692b58b0&quot;, authenticatedUserId: &quot;authenticatedUserId91ff1c87-338f-43dd-96bc-e3a3d0b&quot;...)" time="0.0133661" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsNotTheSame.TheStatusShouldEqualsFailure" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsNotTheSame.TheStatusShouldEqualsFailure(userModelCustomerGuid: fef0a40e-baac-4970-b92f-de3fb81fea2a, environmentManager: Mock&lt;IEnvironmentManager:117&gt;, userManagementService: Mock&lt;IUserManagementService:242&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:134&gt;, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [4578a2e1-863a-4ad4-acd6-400cfd0dbd28, 2ade9942-35a8-48a6-af27-a543907402fb, da67abcf-e07f-48b5-951f-1774ce4369bf], UserEmails = [&quot;f73cd4f8-547c-4fab-bc93-f587ad428ccf&quot;, &quot;d54b42aa-a47e-4334-8594-b996677636d5&quot;, &quot;813ab89c-6239-42ea-822f-3b5e655128f7&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLinkef59d51c-ede5-46f3-8e5f-04fb2bae05b7&quot;, CreationDate = 2023-01-26T19:41:28.4570677, CustomerGuid = 23e9f4b2-1fb2-461d-a395-5b985b077b7c, DeactivatedSubscriptions = [c4263455-fd8f-454c-a2fd-81fe87e0eb65, ca6d6565-08f3-42ce-84f6-ed919acc7c53, af3e122c-88ee-4519-a1d6-245f3535366a], Email = &quot;Email6946cdd2-d2cd-43c7-9fb2-1e6e4c841a1e&quot;, ... })" time="0.0118485" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsNotTheSame.TheStatusShouldEqualsFailure" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheUserCustomerGuidIsNotTheSame.TheStatusShouldEqualsFailure(userModelCustomerGuid: null, environmentManager: Mock&lt;IEnvironmentManager:118&gt;, userManagementService: Mock&lt;IUserManagementService:243&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:135&gt;, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [bd9837e1-d249-433a-93d8-f8a1f6ed4d51, 066890c1-047b-4054-84b7-d6456e300062, fcfcc989-6f88-4c9f-8ad5-1633d7fad4c3], UserEmails = [&quot;56ec1607-70bc-4067-ad8e-62ec7689a6d5&quot;, &quot;993a26f0-f9aa-445d-b044-9dec46360add&quot;, &quot;7fc1f308-ef25-465b-9a34-810fc7231b87&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLinkf8f52b76-9150-4691-9a43-b97d018dd001&quot;, CreationDate = 2022-01-20T19:25:03.1413869, CustomerGuid = 08e1b027-efb9-4fdd-b90a-e7544c4d622c, DeactivatedSubscriptions = [1bad5c25-968e-41f9-8859-1fa810fd9e75, 89104410-2722-4f28-827c-06de8a94158b, 04e4afe8-4c6b-47ed-9c2b-43f68a830a0c], Email = &quot;Email7400ed41-32d6-404f-a651-332db1c26186&quot;, ... })" time="0.0021196" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToGetUserBecauseServiceThrowsIdentityServerError.DoesNotUpdateRolesAndReturnsServiceErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToGetUserBecauseServiceThrowsIdentityServerError.DoesNotUpdateRolesAndReturnsServiceErrorResult(environmentManager: Mock&lt;IEnvironmentManager:121&gt;, userManagementService: Mock&lt;IUserManagementService:250&gt;, model: UserEnvironmentsModel { EnvironmentRoles = [[74f57c02-7298-42e8-b873-594206c960fd] = [EA, EU, CA], [4b3fa17e-a511-48b6-b057-4cff0521c136] = [EA, EU, CA], [6c10528a-e159-4f97-9488-b0ddbf9ddf0e] = [EA, EU, CA]] }, manager: UserManager { }, userId: &quot;userIddc832ea9-b890-4da1-84f0-f5a46d1e8f32&quot;)" time="0.0041978" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenTheUserIsDeactivatedInSubscriptionAndHasRolesInOtherSubscriptions.SubscriptionIsDeletedFromSubscriptionIdsAndDeactivatedSubscriptions" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenTheUserIsDeactivatedInSubscriptionAndHasRolesInOtherSubscriptions.SubscriptionIsDeletedFromSubscriptionIdsAndDeactivatedSubscriptions(userManagementService: Mock&lt;IUserManagementService:251&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:184&gt;, manager: UserManager { })" time="0.0081293" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenTheSubscriptionSupportsTheContentAdministratorRoleWhenAssigningTheContentAdministratorRole.ReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenTheSubscriptionSupportsTheContentAdministratorRoleWhenAssigningTheContentAdministratorRole.ReturnsSuccessResult(userManagementService: Mock&lt;IUserManagementService:256&gt;, environmentManager: Mock&lt;IEnvironmentManager:125&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:139&gt;, manager: UserManager { }, subscriptionIds: [ea9bb972-0b89-454c-900c-4bde52e81c7e, b12bafe7-8ef0-49f5-98bc-8ff33275b29d, c1f62882-a623-4ded-9b14-aec1e60cce59], userId: &quot;userId48f05a75-7a7b-4144-877a-5fe5f3c70cb0&quot;)" time="0.0176774" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenEnvironmentRoleIdentifierIsNotValid.ThrowNotSupportedException" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenEnvironmentRoleIdentifierIsNotValid.ThrowNotSupportedException(environmentManager: Mock&lt;IEnvironmentManager:127&gt;, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [9072c405-20d8-4f82-9188-431edbf3a36e, 289c8943-4480-456c-9007-83718f25a393, c64ef65a-8655-40ee-b6f1-28da421adde4], UserEmails = [&quot;bfb38129-44db-4691-bb7a-d53c3726c2f0&quot;, &quot;2d5d97b5-9c21-4aaa-89a7-47d4a09cd3c9&quot;, &quot;11848784-81e5-4388-9db4-fdfdc0f8d3a1&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLinkad664e14-d7c3-4669-ba81-9dc2385ce9c4&quot;, CreationDate = 2024-07-03T13:03:20.4924293, CustomerGuid = 268fd55e-f5e2-46cb-bf29-bee6fa47cd77, DeactivatedSubscriptions = [031fdc9b-cd71-47fa-8299-235ebc3938e1, 5ddfbbe5-436f-4ef2-b7b0-85026fbbc198, d36f0c13-c0fb-4834-9d08-fa5b365fde53], Email = &quot;Email15af571a-504c-4009-aaa8-690a5f71caee&quot;, ... })" time="0.0043631" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheIdOfTheUserMatchesTheIdOfTheAuthenticatedUser.ReturnOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheIdOfTheUserMatchesTheIdOfTheAuthenticatedUser.ReturnOperationIsNotValidResult(manager: UserManager { })" time="0.0011749" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsNotFound+WhenFailedToUpdateUserBecauseServiceReturnsFailed.ReturnsServiceErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsNotFound+WhenFailedToUpdateUserBecauseServiceReturnsFailed.ReturnsServiceErrorResult(userManagementService: Mock&lt;IUserManagementService:270&gt;, manager: UserManager { }, userId: &quot;userId3e615936-0a60-45c9-8d95-cad51379b723&quot;, authenticatedUserId: &quot;authenticatedUserId20d9f4b8-22d9-435c-b447-7281d79&quot;..., userModel: UserModel { AvatarLink = &quot;AvatarLink6b65befc-8291-4a41-aaa6-ebff1128669f&quot;, CreationDate = 2023-10-28T15:14:16.4062483, CustomerGuid = 5ce61727-e43d-465a-b141-6aa16096abf8, DeactivatedSubscriptions = [0b4365ae-ed18-4877-9cf2-f0d190f27926, 6dcec370-4338-4261-90e4-103c305dcd52, 65b2c2a9-bda9-430f-ad08-bf40efb8d4d3], Email = &quot;Emailf5ac4ee5-02e5-4fdb-9575-ff14b1ab21e0&quot;, ... })" time="0.0109146" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheInvitingUserIsChiliAdmin+WhenTheExistingUserModelIsNotNull.TheStatusShouldEqualsSuccess" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheInvitingUserIsChiliAdmin+WhenTheExistingUserModelIsNotNull.TheStatusShouldEqualsSuccess(environmentManager: Mock&lt;IEnvironmentManager:129&gt;, userManagementService: Mock&lt;IUserManagementService:266&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:143&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink82d1f4b9-0e68-4951-9d23-8bb5b911f868&quot;, CreationDate = 2024-11-11T19:12:58.9476795, CustomerGuid = null, DeactivatedSubscriptions = [ebb96dc5-e8d2-418d-9126-df600f533056, 746ada12-e90f-4473-8316-299ed9d3441a, cf846963-7bb7-465d-a57e-3111e1b9ce4f], Email = &quot;Email4584455c-92a4-4091-bb9f-03d31c8ca998&quot;, ... }, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [07386e8a-b2c0-4e64-bc65-5d2ba3380b5a, 0892f4d1-974a-446b-9e66-7478380018f2, c87cb990-980e-411b-9f53-498dd92cf9a2], UserEmails = [&quot;c32ceadb-c55c-47e5-b578-f5332767dbb2&quot;, &quot;4c3811d1-e494-4b16-a351-6c294f05e7c4&quot;, &quot;52fcc0ee-6b2c-44af-9299-d037129fb4fa&quot;] }, invitationsManager: UserInvitationsManager { }, customerGuid: 4c64983b-aeec-4a58-b1d9-16bd33d6576b, invitingUser: UserModel { AvatarLink = &quot;AvatarLink02b65166-3a7e-4835-9ae6-4bdf03d62324&quot;, CreationDate = 2024-06-25T12:05:44.3002456, CustomerGuid = null, DeactivatedSubscriptions = [1e270f29-1c79-4289-8675-7db8825b9b56, e17a9ffc-fb97-4e2c-ac7a-2f669e01d7d2, b75974e2-3980-4b59-a122-554a75837d08], Email = &quot;Emaila094f73d-711f-44c4-be1a-41164eb55d90&quot;, ... })" time="0.0489159" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheInvitingUserIsChiliAdmin+WhenTheExistingUserModelIsNotNull.TheStatusShouldEqualsSuccess" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheUserAlreadyExists+WhenTheInvitingUserIsChiliAdmin+WhenTheExistingUserModelIsNotNull.TheStatusShouldEqualsSuccess(environmentManager: Mock&lt;IEnvironmentManager:135&gt;, userManagementService: Mock&lt;IUserManagementService:273&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:147&gt;, userModel: UserModel { AvatarLink = &quot;AvatarLink2153c480-c8ee-4bcf-bfcb-07c7d8efa057&quot;, CreationDate = 2022-05-25T10:27:17.2998623, CustomerGuid = 9cfe467b-896d-413f-a090-3edac4300709, DeactivatedSubscriptions = [587e949f-2934-4ec1-8742-0e6f895f362e, 973fc9c8-8db9-43b3-9070-59cebc09ca42, e5244888-498a-4cb5-8280-894017885138], Email = &quot;Emailb2662894-255c-4311-b555-4c2202f99288&quot;, ... }, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [9cbdba45-e29f-4e12-989c-298b435acdde, c44ad872-16dd-4d01-8d52-df9b553285a2, af807c90-5447-4947-99f0-93bdf95823af], UserEmails = [&quot;5ccfff4d-3d10-451d-bdfa-bb0d271e20a0&quot;, &quot;71a0224e-16cc-415e-83fd-9d79b3c7972a&quot;, &quot;c1a378fc-868e-470e-9c7b-7dc0947ce8b6&quot;] }, invitationsManager: UserInvitationsManager { }, customerGuid: d088df46-dafe-4ceb-901d-1c578e8bc38a, invitingUser: UserModel { AvatarLink = &quot;AvatarLink0d99138a-0822-44c1-98b0-a22abdf38116&quot;, CreationDate = 2024-09-10T13:25:50.6276990, CustomerGuid = 50cec391-cc07-412c-919b-f12b8f844aa9, DeactivatedSubscriptions = [5207f987-6108-4f33-aae1-96f1c1fa4cbb, 85727e59-7f35-4c08-ba8d-2912499a870c, d39cc4a4-fafc-4b40-849e-f88e0eb0033f], Email = &quot;Emailba3d35db-52c1-404d-b8b8-133041c14d5b&quot;, ... })" time="0.0020890" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenFailedToUpdateUserBecauseServiceReturnsFailed.ReturnsServiceErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenFailedToUpdateUserBecauseServiceReturnsFailed.ReturnsServiceErrorResult(userManagementService: Mock&lt;IUserManagementService:274&gt;, model: UserSubscriptionRolesModel { SubscriptionRoles = [SA, TD, SA] }, manager: UserManager { }, subscriptionId: 1d56cc58-5f35-497f-a1af-396c39ccbb04, userId: &quot;userId94dde97c-6a13-4aca-9769-2878e20dbd24&quot;)" time="0.0047283" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheCreationOfTheUserSucceeds+WhenSendingPasswordResetEmailFailed.TheStatusShouldEqualsSendingPasswordResetEmailFailure" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenTheCreationOfTheUserSucceeds+WhenSendingPasswordResetEmailFailed.TheStatusShouldEqualsSendingPasswordResetEmailFailure(environmentManager: Mock&lt;IEnvironmentManager:138&gt;, userManagementService: Mock&lt;IUserManagementService:275&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:150&gt;, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [062fd46c-6967-4987-95b9-b3d12535e6d9, ec2f9889-bd5e-43c2-be29-6f7c7583b76c, 8acfaf4f-6df5-405c-b6fa-aba48e4a31a1], UserEmails = [&quot;04ad8717-79ba-4cae-ac1f-8585915c4cb1&quot;, &quot;7136dcb6-a594-40dd-ac35-4f72e77626a6&quot;, &quot;e8ea6c48-618b-4468-bcf4-a0faa087e89d&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLinke3a1d37f-21b0-4b3f-a84f-d927a95da451&quot;, CreationDate = 2022-09-14T21:55:17.3505046, CustomerGuid = 877c9eab-99f4-4777-bc5f-83fe57fc18ea, DeactivatedSubscriptions = [0735f384-2812-4344-a2a7-5c7b065a8d7e, 94888972-01fd-45e5-92b0-10b8e154f0a6, b31bbfaf-3e11-49e4-a3c3-1f4e7d29e5c6], Email = &quot;Emailb9f31adc-dc9f-4999-914f-aa242ed161aa&quot;, ... })" time="0.0059228" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenUserIdIsNotFound.ReturnsEntityNotFoundErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenUserIdIsNotFound.ReturnsEntityNotFoundErrorResult(environmentManager: Mock&lt;IEnvironmentManager:139&gt;, userManagementService: Mock&lt;IUserManagementService:277&gt;, model: UserEnvironmentsModel { EnvironmentRoles = [[0c8fc365-3913-4e76-8806-a6e550ffd769] = [EA, EU, CA], [990ccab5-6279-4c5c-8a75-09ca7c464fa0] = [EA, EU, CA], [ac441cf1-6d37-4465-8c90-b4ad85ce62b1] = [EA, EU, CA]] }, manager: UserManager { }, userId: &quot;userId76a2d39f-8a18-4e24-bdd1-4d7c391eb1e9&quot;)" time="0.0039668" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToUpdateUserBecauseServiceReturnsFailed+WhenEnvironmentRolesContainEmptyRoleForExistingEnvironment.RemovesExistingEnvironmentRoleAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToUpdateUserBecauseServiceReturnsFailed+WhenEnvironmentRolesContainEmptyRoleForExistingEnvironment.RemovesExistingEnvironmentRoleAndReturnsSuccessResult(environmentManager: Mock&lt;IEnvironmentManager:140&gt;, userManagementService: Mock&lt;IUserManagementService:279&gt;, manager: UserManager { }, subscriptionIds: [edaf4baf-7497-44d2-bd32-ff376be1482b, ea4fcd90-2e8d-49c9-a848-ba0a0d912af3, 22c86efd-8a02-4a94-af34-88ba9e23d451], firstName: &quot;firstNameaabc7154-015a-4250-b715-b81aff664a64&quot;, lastName: &quot;lastName0241711f-1215-454e-89cd-4e8bd290edd6&quot;, userId: &quot;userIddaafb2b8-307a-49a0-bbf9-711c47185b14&quot;)" time="0.0084410" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenUserIsNotIncludedInProvidedSubscription.DoesNotUpdateRolesAndReturnsOperationIsNotValidErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenUserIsNotIncludedInProvidedSubscription.DoesNotUpdateRolesAndReturnsOperationIsNotValidErrorResult(userManagementService: Mock&lt;IUserManagementService:290&gt;, manager: UserManager { }, userId: &quot;userId15b4305f-f0e8-4e38-aeb8-a0daf6aa39ee&quot;)" time="0.0034057" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenNoMoreTemplateDesignerSeatsAvailableAndAssigningATemplateDesignerSeatRole.DoesNotUpdateRolesAndReturnsOperationIsNotValidErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenNoMoreTemplateDesignerSeatsAvailableAndAssigningATemplateDesignerSeatRole.DoesNotUpdateRolesAndReturnsOperationIsNotValidErrorResult(userManagementService: Mock&lt;IUserManagementService:291&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:157&gt;, subscriptionIds: [55f11939-8014-4ddd-bd63-10855c469a1c, 2a441331-a8d6-4a16-a10f-d0804fcb6941, b0ba8e25-b4fb-402b-a0ff-a5b363a018ed], manager: UserManager { }, userId: &quot;userId53469da2-cdac-4318-9c78-d5de4cc6da60&quot;)" time="0.0134283" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenFailedToUpdateUserBecauseServiceReturnsFailed.ReturnsServiceErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenFailedToUpdateUserBecauseServiceReturnsFailed.ReturnsServiceErrorResult(userManagementService: Mock&lt;IUserManagementService:293&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:211&gt;, manager: UserManager { }, userId: &quot;userId1730c7d6-ce83-4538-b0e5-ef1b2179a675&quot;, authenticatedUserId: &quot;authenticatedUserId7721299b-76ea-4a34-a6bb-d7b74c0&quot;...)" time="0.0038041" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNull.ReturnOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNull.ReturnOperationIsNotValidResult(userModel: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [3ad4f39d-e77d-4380-b0c0-314d052f31b5, 8d6619de-94d7-4a5b-b2de-4edf713200dc, 2f5ec10d-a838-487c-805a-c363acf859bb], UserEmails = [&quot;b8eeb3b2-afce-434b-bdfc-1998669ea1e0&quot;, &quot;65f5b49d-11e4-4f37-b835-bc0ec56c1a73&quot;, &quot;f7573f65-4a47-4b19-a0ac-fa7bc16f889a&quot;] }, environmentManager: Mock&lt;IEnvironmentManager:122&gt;, environmentRepository: Mock&lt;IEnvironmentsRepository:87&gt;, subscriptionRepository: Mock&lt;ISubscriptionsRepository:137&gt;, environments: [Environment { BackOfficeUri = http://ca63038f-ba7e-497a-be22-3e9927009e99/, DisplayName = &quot;DisplayNamefc20e985-6791-4747-adfc-15c33848b439&quot;, EnvironmentSize = 53, Guid = 09bc5a93-8150-42c4-8d17-1e3719b577fc, Id = 145, ... }, Environment { BackOfficeUri = http://a7bbbbc2-f24f-49af-b8f3-e507a11609b2/, DisplayName = &quot;DisplayName6ef7fd3c-f8a0-4566-af55-44391300f6fe&quot;, EnvironmentSize = 2799, Guid = 09796e32-decb-4b94-b20c-72fa4997999c, Id = 90, ... }, Environment { BackOfficeUri = http://e1bdef62-0d26-4872-9677-cff005f4374b/, DisplayName = &quot;DisplayNamedfc537f3-3b12-4415-9fba-6e8c85b8d92e&quot;, EnvironmentSize = 19996, Guid = 29dd4c2d-e4d9-4bd3-bf43-8d5cd07bd71b, Id = 19091, ... }], invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink1fb1b9c0-97bc-4a89-be73-1bfbcf64d5ae&quot;, CreationDate = 2024-03-19T15:39:40.6969561, CustomerGuid = f7019969-b6b8-4210-a84a-a24fc5b52269, DeactivatedSubscriptions = [313c53d0-b058-41e2-b0b6-f3c18fde0f84, bb094aa0-639e-410e-9910-b6cb79302b91, cf2b3467-9b67-45bb-8668-b12c7db326f4], Email = &quot;Email89953f24-4ef6-4b14-ae24-662bf499e430&quot;, ... })" time="0.0055816" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNull.ReturnOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNull.ReturnOperationIsNotValidResult(userModel: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [720d2b91-4b70-4c8f-9bf7-f6875307673f, 00a9f3c2-561b-49b9-994f-9b3e5b021931, 3d937011-f52e-46d1-a9d9-ce458fa08743], UserEmails = [&quot;964d7dbd-e2eb-4b2c-a62e-18e2da4a0e57&quot;, &quot;9355ed2a-c576-44eb-8c04-31cf384626b0&quot;, &quot;4935a24d-18c7-431b-b4c2-71d9c28ffc4f&quot;] }, environmentManager: Mock&lt;IEnvironmentManager:126&gt;, environmentRepository: Mock&lt;IEnvironmentsRepository:88&gt;, subscriptionRepository: Mock&lt;ISubscriptionsRepository:140&gt;, environments: [Environment { BackOfficeUri = http://13e56c6b-c0e7-4300-ad11-1aba9fe15d1e/, DisplayName = &quot;DisplayName4d864210-1c38-4b18-afe2-fc8e1592666d&quot;, EnvironmentSize = 137, Guid = bd9a6920-bef0-4db0-8d6b-b14f9e776607, Id = 51, ... }, Environment { BackOfficeUri = http://7aa18f0b-58f7-413a-b680-4bb9eb501311/, DisplayName = &quot;DisplayName852a21e2-e174-4aa2-8a4a-92dec8ceff9b&quot;, EnvironmentSize = 10512, Guid = 92d08eac-9d17-4cb8-97b9-8903f98a48b6, Id = 75, ... }, Environment { BackOfficeUri = http://9b0885e4-232b-4200-a456-c071b6716316/, DisplayName = &quot;DisplayNameb250d75e-dd03-41d5-8f6b-bf96939bca08&quot;, EnvironmentSize = 26621, Guid = 9001e741-7856-49d3-97e6-9b4d6ddbdb6d, Id = 21529, ... }], invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink248e7cf5-41a3-44db-9a4c-0cde1c5c8d0d&quot;, CreationDate = 2024-05-20T05:11:32.9585945, CustomerGuid = null, DeactivatedSubscriptions = [f41e1be5-09e6-4ef6-a195-bb3ff039caa3, 878886f1-decd-4d81-9713-8cf131ec839e, cd64cf39-9dcd-4200-8932-35cf9d077ab3], Email = &quot;Emailbf52e9db-29fc-451b-8d1b-2de9ff107f34&quot;, ... })" time="0.0014402" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNull.ReturnOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNull.ReturnOperationIsNotValidResult(userModel: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [2022c14a-23da-4df9-8e38-66de001bb3f2, 7b33c3ca-fc12-459e-a77e-411efd07baf6, efce10a8-a0a8-473d-9e1e-aa8de579bed2], UserEmails = [&quot;55bdcf50-ccdd-4a15-9f4a-a27f38bb9d0a&quot;, &quot;fd7aac28-214e-4e25-8f0f-342f7c0dce0d&quot;, &quot;f7683cde-117e-4a3e-80a1-ed90e267272a&quot;] }, environmentManager: Mock&lt;IEnvironmentManager:128&gt;, environmentRepository: Mock&lt;IEnvironmentsRepository:91&gt;, subscriptionRepository: Mock&lt;ISubscriptionsRepository:142&gt;, environments: [Environment { BackOfficeUri = http://54f122a7-3045-4766-93dd-1530ca50c832/, DisplayName = &quot;DisplayName2ad1770b-ada6-4a2d-9d5f-eb692de13889&quot;, EnvironmentSize = 11751, Guid = dc2d3fd6-86c9-4978-b4f6-a87488f50cec, Id = 15356, ... }, Environment { BackOfficeUri = http://474c624d-5115-4285-83d9-d9f21fb5c65c/, DisplayName = &quot;DisplayNamedecd23a9-5eb9-4b39-b9d3-3f4ac6f67bd3&quot;, EnvironmentSize = 7278, Guid = 08a05fb7-2d1f-4900-9921-61cf70f2e889, Id = 24480, ... }, Environment { BackOfficeUri = http://267257b0-f1fa-4ec7-88e8-d5ad59e89af7/, DisplayName = &quot;DisplayNamef47194eb-b92f-4a9d-b3bd-65dbcdb88640&quot;, EnvironmentSize = 1331, Guid = 59d395c3-4a3a-49d0-966c-6c3349c33c06, Id = 10554, ... }], invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink7e282a56-a4b3-41d8-8ca3-4d9c6f1ff883&quot;, CreationDate = 2024-05-15T03:47:08.9011545, CustomerGuid = 0b94b41d-a3fc-476e-9bbb-6a0172699004, DeactivatedSubscriptions = [ae3bfc4e-26bb-415e-8e40-a573127d5a17, 397431d0-9dc3-4215-800f-65c153d1d6cb, f11770b2-119e-400f-87bb-7964673b2aa8], Email = &quot;Email6686fdfb-a4fd-40af-9891-9acea3cd5a82&quot;, ... })" time="0.0013754" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNull.ReturnOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNull.ReturnOperationIsNotValidResult(userModel: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [ad2fb331-05c7-4164-b521-75bd9c0bab59, b69bc5c0-2072-48e1-8dcd-45c60368bde4, f68b7ed2-796c-4d42-9898-ed96b0fae4f3], UserEmails = [&quot;f1508184-e684-4529-b700-c085fa6e193c&quot;, &quot;c2d96dc5-058a-4aac-81fb-b26135363560&quot;, &quot;52e21a55-40d1-416b-8d7d-a5b34730550e&quot;] }, environmentManager: Mock&lt;IEnvironmentManager:136&gt;, environmentRepository: Mock&lt;IEnvironmentsRepository:96&gt;, subscriptionRepository: Mock&lt;ISubscriptionsRepository:148&gt;, environments: [Environment { BackOfficeUri = http://a81494fb-34a5-4571-948c-6e07bd321474/, DisplayName = &quot;DisplayName0003b029-227b-43bf-892c-9061e345c195&quot;, EnvironmentSize = 2923, Guid = 09f36ddd-daa5-4f29-b747-182d9b8a393d, Id = 12029, ... }, Environment { BackOfficeUri = http://9c9d054b-02eb-4516-b9e1-b23e748a4a1b/, DisplayName = &quot;DisplayName3f070827-48dc-4ea4-9ca2-05b53c7a02b5&quot;, EnvironmentSize = 12735, Guid = 278cce2b-ced7-468a-bbae-d87431f334e3, Id = 16103, ... }, Environment { BackOfficeUri = http://a2cd28c2-695e-4b2d-aebf-7b7235d40c93/, DisplayName = &quot;DisplayName4592aae7-6fb7-49df-a932-ed77847621b3&quot;, EnvironmentSize = 5213, Guid = b1070d32-6e4c-4a72-8bb7-a148f707133d, Id = 12225, ... }], invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink9c65d28f-54fe-4246-a878-6ee33b5593ee&quot;, CreationDate = 2022-11-12T14:27:20.4974796, CustomerGuid = null, DeactivatedSubscriptions = [06f23d98-7be7-4d74-a681-62d424d3fbd5, f127b357-66e8-4dbe-83ee-06b4fe6b4cf0, f31256bc-567b-4218-9835-0d6d06c7fc2e], Email = &quot;Emaildc991d13-17e9-4c26-8e43-91e7e0926204&quot;, ... })" time="0.0014177" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNull.ReturnOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNull.ReturnOperationIsNotValidResult(userModel: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [a5d67b3d-99e7-4d8d-b55e-5cfbe5ad8167, 557771a7-b722-4e8a-be94-59e489663971, 3fe52d47-85a2-4008-bdbe-ae1252ca031b], UserEmails = [&quot;9bb84d39-5a1b-464a-9cb8-9022835d2715&quot;, &quot;06c945ee-370d-4404-9be5-1d638af77027&quot;, &quot;61770444-3391-45c1-891f-c3750d6e6050&quot;] }, environmentManager: Mock&lt;IEnvironmentManager:141&gt;, environmentRepository: Mock&lt;IEnvironmentsRepository:98&gt;, subscriptionRepository: Mock&lt;ISubscriptionsRepository:154&gt;, environments: [Environment { BackOfficeUri = http://fa547995-1eff-47e0-9191-dbda4ab815a0/, DisplayName = &quot;DisplayNamea5453794-7ddc-43e1-a6fd-ff6762c8ad5c&quot;, EnvironmentSize = 151, Guid = bec77bf3-ab58-4e24-a3bc-da84750961c8, Id = 63, ... }, Environment { BackOfficeUri = http://20522383-8924-463d-84bb-bc48d59ce66e/, DisplayName = &quot;DisplayNameecd908e5-d6b7-441d-b5c5-10950bba184e&quot;, EnvironmentSize = 5319, Guid = 57911a24-ab3d-4c9a-b896-a71df53ce31c, Id = 19, ... }, Environment { BackOfficeUri = http://50e17524-3aa9-4f35-8856-6c1bc2a4ffcb/, DisplayName = &quot;DisplayNamebb60e501-363f-4f32-862d-0c497a8eb628&quot;, EnvironmentSize = 25703, Guid = 01cc51d9-e350-4776-85c6-6eb5679e38a6, Id = 20753, ... }], invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink172056da-b2a4-4a02-a36c-9bcebfd14a1b&quot;, CreationDate = 2024-08-24T12:18:48.5142220, CustomerGuid = null, DeactivatedSubscriptions = [64d93b7e-859c-4f6e-a768-a096729fd6f3, ad465b26-23a3-4672-8dd1-ed5b8e1333e8, 3a505e15-c01d-470c-9850-139aeddb594a], Email = &quot;Emailf327bb33-d0cf-477e-b096-53eb2b3f1cb0&quot;, ... })" time="0.0020359" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenUserIdIsNotFoundDuringUpdate.ReturnsEntityNotFoundErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenUserIdIsNotFoundDuringUpdate.ReturnsEntityNotFoundErrorResult(userManagementService: Mock&lt;IUserManagementService:297&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:212&gt;, manager: UserManager { }, userId: &quot;userIdd1b75e04-4e1b-4df7-9b64-85262e963acc&quot;, authenticatedUserId: &quot;authenticatedUserId2c165c7c-08fc-492b-a676-194cdd7&quot;...)" time="0.0103714" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTryToDeleteNotTheLastSubscriptionAdministrator.AddsNewRolesAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTryToDeleteNotTheLastSubscriptionAdministrator.AddsNewRolesAndReturnsSuccessResult(isCurrentUserSubscriptionAdministrator: False, authUserId: &quot;authUserId14bdafcb-4353-4d5b-86b5-000812d5a1ce&quot;, userId: &quot;userId89e6c1dc-49f8-4386-b218-f2fc158b54d1&quot;, userManagementService: Mock&lt;IUserManagementService:300&gt;, manager: UserManager { }, subscriptionIds: [a8b2b772-0bae-4cef-99e0-e7de8284064f, 81dd0e7d-60f2-4787-b87d-dce815c2fbae, 51b6976e-ed06-4fec-85c7-87c544de93a5], firstName: &quot;firstName88fab3db-dccd-418c-be35-adc3f3233b8c&quot;, lastName: &quot;lastNamef73e3f8e-c4a0-4995-b429-235a0c7249de&quot;)" time="0.0181317" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTryToDeleteNotTheLastSubscriptionAdministrator.AddsNewRolesAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTryToDeleteNotTheLastSubscriptionAdministrator.AddsNewRolesAndReturnsSuccessResult(isCurrentUserSubscriptionAdministrator: True, authUserId: &quot;authUserIdc5a7397a-f319-42b6-a9c5-51599201e72c&quot;, userId: &quot;userIdb1fbae73-69fd-4e51-9644-b2a142d0520e&quot;, userManagementService: Mock&lt;IUserManagementService:301&gt;, manager: UserManager { }, subscriptionIds: [45c4bcf4-f0b7-43b8-96c9-30b8c61631fc, 07cea865-c533-4741-a077-1a9d64a404a7, fb33c207-20fa-4841-80bc-9fb13f5b8ffc], firstName: &quot;firstNamefca3eb19-7f92-44c6-b4d3-4301a018656a&quot;, lastName: &quot;lastNameef4b89d6-178c-4598-b8cc-dcdf9ec4355a&quot;)" time="0.0059401" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenOneUserIsSuccessfullyCreatedAndOneNot.TheStatusesShouldEqualsSuccessAndFailure" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenOneUserIsSuccessfullyCreatedAndOneNot.TheStatusesShouldEqualsSuccessAndFailure(environmentManager: Mock&lt;IEnvironmentManager:149&gt;, userManagementService: Mock&lt;IUserManagementService:302&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:165&gt;, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [a6c5e67b-1885-4d51-85c3-1ae130485f80, 7737d61e-67a8-43db-a68b-aa235b215611, 97f4866b-7834-4921-8aa6-31e67c81d538], UserEmails = [&quot;60c19ef2-277d-492d-8774-bd6521c84ced&quot;, &quot;8859a711-ed83-4cd1-9a1c-f27b948bb3d2&quot;, &quot;bc2c3182-a96e-4583-8e3e-143ffa262132&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLinka33f8699-37f9-4efe-a632-1f393923b4ab&quot;, CreationDate = 2025-03-02T22:33:34.0607579, CustomerGuid = dec3b8e2-b582-4ba9-bae9-c8c43b0907c9, DeactivatedSubscriptions = [8fe230d5-9b26-41ef-98ef-223681ece35d, f00d917b-97fa-4dd3-8343-b3a0ee82d89a, f8b365e1-cd8e-4030-aa25-81b265254677], Email = &quot;Email0e2c20f9-4d74-496d-a28a-85c4db79db81&quot;, ... })" time="0.0281261" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTryToDeleteNotTheLastSubscriptionAdministrator.AddsNewRolesAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTryToDeleteNotTheLastSubscriptionAdministrator.AddsNewRolesAndReturnsSuccessResult(isCurrentUserSubscriptionAdministrator: True, authUserId: &quot;userId&quot;, userId: &quot;userId&quot;, userManagementService: Mock&lt;IUserManagementService:303&gt;, manager: UserManager { }, subscriptionIds: [90401793-ae5a-4a18-93c0-a7868a820991, 846d7183-6518-47d0-acea-e5eea099f030, 963c3d42-1c6d-4f3e-85b9-2a16d04d1c90], firstName: &quot;firstNamef2ffa513-9388-42c2-a4ea-9f9b2506a46f&quot;, lastName: &quot;lastNameb77b8cb8-a7b1-45dc-9475-d31c104b1e49&quot;)" time="0.0056214" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserDoesNotExistOrServiceThrowsAnError.ReturnsFailedUpdateResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserDoesNotExistOrServiceThrowsAnError.ReturnsFailedUpdateResult(expectedResultType: typeof(CHILI.GraFx.Platform.Core.Models.Results.ErrorResults.EntityNotFoundResult), authenticatedUser: Mock&lt;IAuthenticatedUser:308&gt;, userId: &quot;userId5926ed83-d042-48e4-89a4-86a7c892ac2e&quot;, updateModel: UpdateUserModel { FirstName = &quot;FirstNameb85abf16-4bfa-4f7c-af14-532017e3b966&quot;, LastName = &quot;LastName25a8bbf5-6310-4bfc-b87f-3adf11655f44&quot; }, manager: UserManager { })" time="0.0033050" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserDoesNotExistOrServiceThrowsAnError.ReturnsFailedUpdateResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpdateUserAsyncMethod+WhenRequestedUserDoesNotExistOrServiceThrowsAnError.ReturnsFailedUpdateResult(expectedResultType: typeof(CHILI.GraFx.Platform.Core.Models.Results.ErrorResults.ServiceErrorResult), authenticatedUser: Mock&lt;IAuthenticatedUser:309&gt;, userId: &quot;userId81f7c131-cd96-46f4-8046-fe7c23a3b843&quot;, updateModel: UpdateUserModel { FirstName = &quot;FirstNamebe31aca9-a800-448a-8f99-4c425da6fe06&quot;, LastName = &quot;LastName7f5b7de4-76d0-4eab-b350-108062c778fe&quot; }, manager: UserManager { })" time="0.0010326" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTryToAddTemplateDesignerRoleWhenMaxTemplateDesignerSeatsIsZero.AddsNewRolesAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheUpsertUserSubscriptionRolesAsyncFunction+WhenTryToAddTemplateDesignerRoleWhenMaxTemplateDesignerSeatsIsZero.AddsNewRolesAndReturnsSuccessResult(userId: &quot;userId8023ff99-7c52-4282-af4a-58daa124af50&quot;, userManagementService: Mock&lt;IUserManagementService:314&gt;, subscriptionRepository: Mock&lt;ISubscriptionsRepository:169&gt;, manager: UserManager { }, subscriptionIds: [2b3620f8-eec7-4277-be8d-2f150efcae67, 572d8848-e86f-42d5-b822-0d10f0b30a4d, 59692262-ffc2-4e12-88cb-b55e9319e75b], firstName: &quot;firstName64661376-4f8d-4ee5-8b04-6511c6cbe95d&quot;, lastName: &quot;lastNamee1f0d3d6-1b39-427b-8f8d-a0d1aeb53ce5&quot;)" time="0.0204013" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenEnvironemntRoleIsForbiddenInSubscription.OperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenEnvironemntRoleIsForbiddenInSubscription.OperationIsNotValidResult(environmentManager: Mock&lt;IEnvironmentManager:160&gt;, userManagementService: Mock&lt;IUserManagementService:315&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:170&gt;, environmentRepository: Mock&lt;IEnvironmentsRepository:105&gt;, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [66b07f5d-b39f-47b5-8351-9111a6c9e19d, c436d1e2-5c78-45b8-904c-c22b8dd313ff, 28a13635-1bda-49d5-8549-cf01e881e006], UserEmails = [&quot;44a191bc-3022-48a7-a155-8211ce7e1081&quot;, &quot;861d6dd2-599f-40c6-b556-4c99a847fc61&quot;, &quot;865cf698-b13d-4f5f-92e9-2a3218e1af85&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink826b4a6b-620e-4c72-ace5-2d75d5c22252&quot;, CreationDate = 2021-10-07T07:05:35.8466582, CustomerGuid = aebdd1ce-cda5-470d-b8f4-1c5bf21c0bea, DeactivatedSubscriptions = [17c5de58-bdc1-43dd-b84b-3174c1c31a3a, 0c9f005d-bda5-43fe-92c3-ef8a8548e58d, 19f47a9c-4740-49e7-8969-26a9cf488ad3], Email = &quot;Email770607d8-eb69-433b-971c-b72053e92978&quot;, ... })" time="0.0064883" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenEnvironemntRoleIsForbiddenInSubscription.OperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenEnvironemntRoleIsForbiddenInSubscription.OperationIsNotValidResult(environmentManager: Mock&lt;IEnvironmentManager:161&gt;, userManagementService: Mock&lt;IUserManagementService:316&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:171&gt;, environmentRepository: Mock&lt;IEnvironmentsRepository:106&gt;, model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [be319b85-4019-4dcd-bc3d-7dd389c8f1ce, 41c7abb8-9c83-4545-9e99-be2978789f32, 6b67c790-ccbb-4dc7-9e48-521b585ad066], UserEmails = [&quot;7c059f10-e7e6-41cd-9f1f-7194e312a948&quot;, &quot;b093be48-f250-4e11-b815-bca99c6114cd&quot;, &quot;980f67cc-df56-46b4-a05d-2bd87bf3b3ee&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink2b7cc8c2-266d-4045-816b-9511e902d5aa&quot;, CreationDate = 2022-04-07T10:37:15.2294117, CustomerGuid = b4a8926a-c9ee-4768-aacf-7da18470cd7a, DeactivatedSubscriptions = [a61f004c-7b33-4449-af46-fef02f8e8370, ec25c278-1fcb-425f-bbb3-8285d9350107, c1f068a6-783f-4bc4-8c70-52f3e46dcb3f], Email = &quot;Email7e6ad75d-e3be-4c9f-9e48-d849178dac1a&quot;, ... })" time="0.0018051" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToUpdateUserBecauseServiceReturnsFailed.ReturnsServiceErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToUpdateUserBecauseServiceReturnsFailed.ReturnsServiceErrorResult(userManagementService: Mock&lt;IUserManagementService:317&gt;, environmentManager: Mock&lt;IEnvironmentManager:164&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:172&gt;, model: UserEnvironmentsModel { EnvironmentRoles = [[a5cec5e3-f035-4168-9d6b-4c806f230455] = [EA, EU, CA], [34435c90-d118-4e93-848d-b3df21e4eaaa] = [EA, EU, CA], [279bc751-2f0d-404d-8e73-cde450bd4eaf] = [EA, EU, CA]] }, manager: UserManager { }, subscriptionId: f7f5f47a-6efd-4644-8deb-8162528eccaa, userId: &quot;userId1fa7c348-f2f4-4489-bc60-340e198f583a&quot;)" time="0.0132200" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenProvidedEnvironmentsAreNotBelongToAnySubscription.BelongingOfEnvironmentsIsChecked" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenProvidedEnvironmentsAreNotBelongToAnySubscription.BelongingOfEnvironmentsIsChecked(environmentManagerResult: EntityNotFoundResult`1 { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, expectedResult: EntityNotFoundResult`1 { ErrorMessage = &quot;&quot;, IsError = True, IsSuccess = False }, environmentManager: Mock&lt;IEnvironmentManager:165&gt;, inviteUsersModel: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [604e77a7-55c4-40a7-9c68-b8df25e595b7, 1464f529-a025-4f92-9c70-45908b184795, 266dcf02-ac15-487c-9471-b54af8cfbf71], UserEmails = [&quot;a831f4b8-1a91-4c04-a7d9-83c930fd5fab&quot;, &quot;6dfd60d2-00d4-4795-bc20-b8fce02b1013&quot;, &quot;8a664caf-9dfc-44f9-85e7-246087112e8c&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink47c4f36e-2a90-45cf-8ead-52f6dc55260a&quot;, CreationDate = 2022-04-14T05:31:46.9313591, CustomerGuid = 3414700b-b482-4afe-b5d4-db9cb3b61083, DeactivatedSubscriptions = [2f7368da-23bc-45b4-b348-8779f1ac086d, 718720c5-f79c-44c6-bad6-f41b36fac9c7, e7f0fdb7-d2d9-4f6f-846d-3e4dea6cf194], Email = &quot;Email6014594e-43e7-4470-9363-9c2540e6e7b1&quot;, ... })" time="0.0110981" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenProvidedEnvironmentsAreNotBelongToAnySubscription.BelongingOfEnvironmentsIsChecked" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenProvidedEnvironmentsAreNotBelongToAnySubscription.BelongingOfEnvironmentsIsChecked(environmentManagerResult: SuccessResult`1 { IsError = False, IsSuccess = True }, expectedResult: OperationIsNotValidResult`1 { ErrorMessage = &quot;Environment doesn't belong to a subscription.&quot;, IsError = True, IsSuccess = False }, environmentManager: Mock&lt;IEnvironmentManager:165&gt;, inviteUsersModel: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [604e77a7-55c4-40a7-9c68-b8df25e595b7, 1464f529-a025-4f92-9c70-45908b184795, 266dcf02-ac15-487c-9471-b54af8cfbf71], UserEmails = [&quot;a831f4b8-1a91-4c04-a7d9-83c930fd5fab&quot;, &quot;6dfd60d2-00d4-4795-bc20-b8fce02b1013&quot;, &quot;8a664caf-9dfc-44f9-85e7-246087112e8c&quot;] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink47c4f36e-2a90-45cf-8ead-52f6dc55260a&quot;, CreationDate = 2022-04-14T05:31:46.9313591, CustomerGuid = 3414700b-b482-4afe-b5d4-db9cb3b61083, DeactivatedSubscriptions = [2f7368da-23bc-45b4-b348-8779f1ac086d, 718720c5-f79c-44c6-bad6-f41b36fac9c7, e7f0fdb7-d2d9-4f6f-846d-3e4dea6cf194], Email = &quot;Email6014594e-43e7-4470-9363-9c2540e6e7b1&quot;, ... })" time="0.0015476" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteSAORAllRolesAndCurrentUserIsSAAndDeleteCurrentOrCurrentUserIsNotSA+WhenThereAreNoAdditionalSA.ReturnOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteSAORAllRolesAndCurrentUserIsSAAndDeleteCurrentOrCurrentUserIsNotSA+WhenThereAreNoAdditionalSA.ReturnOperationIsNotValidResult(isAuthUserSubscriptionAdministrator: True, roleIdentifier: SubscriptionAdministrator, updateCurrentUser: True, userManagementService: Mock&lt;IUserManagementService:323&gt;, manager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLinkd0d55401-0f09-4618-a8d2-f3574e779b08&quot;, CreationDate = 2024-02-06T09:01:50.4160303, CustomerGuid = 78a089b7-9164-490b-a14f-1bd6fa6875f2, DeactivatedSubscriptions = [27ed6be4-510f-4436-926b-6243e9204ecd, bb976950-2e96-45e7-ba19-4ce344a0909e, a10c6dce-adae-437f-bbad-34d1ba81a68c], Email = &quot;Emailb91de233-5b42-43da-9b12-c244ea6d41cf&quot;, ... }, userId: &quot;userId3fd50e4b-555a-4046-8295-27554ef897bc&quot;)" time="0.0091736" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteSAORAllRolesAndCurrentUserIsSAAndDeleteCurrentOrCurrentUserIsNotSA+WhenThereAreNoAdditionalSA.ReturnOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteSAORAllRolesAndCurrentUserIsSAAndDeleteCurrentOrCurrentUserIsNotSA+WhenThereAreNoAdditionalSA.ReturnOperationIsNotValidResult(isAuthUserSubscriptionAdministrator: True, roleIdentifier: null, updateCurrentUser: True, userManagementService: Mock&lt;IUserManagementService:325&gt;, manager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLink0c15ccb4-9e02-48b0-9d68-920d5da4c484&quot;, CreationDate = 2023-07-25T16:54:08.8527677, CustomerGuid = aec1a74c-4d24-4323-a8f2-4ebfdda57892, DeactivatedSubscriptions = [f9be9b73-d874-47d6-a1d4-79ac181aadc2, 16292506-c37e-4730-87ca-dda99ada7a88, 74c78cf5-6894-4746-9f8e-15a80da9ceeb], Email = &quot;Emailabc60430-9b79-4e2b-a6fc-6bce806b30e7&quot;, ... }, userId: &quot;userIdfca8cd0c-1579-45f2-b2df-65e31ec579f0&quot;)" time="0.0007559" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteSAORAllRolesAndCurrentUserIsSAAndDeleteCurrentOrCurrentUserIsNotSA+WhenThereAreNoAdditionalSA.ReturnOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteSAORAllRolesAndCurrentUserIsSAAndDeleteCurrentOrCurrentUserIsNotSA+WhenThereAreNoAdditionalSA.ReturnOperationIsNotValidResult(isAuthUserSubscriptionAdministrator: False, roleIdentifier: SubscriptionAdministrator, updateCurrentUser: False, userManagementService: Mock&lt;IUserManagementService:327&gt;, manager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLinke1c57a02-aed8-48e3-86d1-f52b2d4fb023&quot;, CreationDate = 2025-04-01T02:03:56.5025965, CustomerGuid = 7cde5cf1-9d9e-4abf-9649-4095d6d5b017, DeactivatedSubscriptions = [64315ed5-f212-4c16-93b7-40bd91cec7ef, e479243d-d556-4aa4-9d7a-ba7429889fd6, c743b323-f2f2-42e2-bd0f-9911909936e8], Email = &quot;Email8550c056-9c35-4ee9-b80a-a85b7da692b0&quot;, ... }, userId: &quot;userId87c09d81-0074-4d0e-bf06-a52ef5f0ee9a&quot;)" time="0.0007218" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteSAORAllRolesAndCurrentUserIsSAAndDeleteCurrentOrCurrentUserIsNotSA+WhenThereAreNoAdditionalSA.ReturnOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteSubscriptionRoleAsyncFunction+WhenUserIdIsFound+WhenDeleteSAORAllRolesAndCurrentUserIsSAAndDeleteCurrentOrCurrentUserIsNotSA+WhenThereAreNoAdditionalSA.ReturnOperationIsNotValidResult(isAuthUserSubscriptionAdministrator: False, roleIdentifier: null, updateCurrentUser: False, userManagementService: Mock&lt;IUserManagementService:328&gt;, manager: UserManager { }, userModel: UserModel { AvatarLink = &quot;AvatarLink0fde29b8-bd5c-4fb0-844b-d1c0287118f1&quot;, CreationDate = 2022-06-29T14:15:01.4246019, CustomerGuid = 49a6a0d4-77b5-4b1f-a8d1-ee7986b158ea, DeactivatedSubscriptions = [9c18fdec-4b66-4f69-bb0b-d445b8cc0f7e, 63779b72-3a1b-4c1e-b450-59494407edd0, e3a18f77-3e91-4daf-8961-74eaafb77cc0], Email = &quot;Email04c2c34f-019a-404f-a10f-84f01364dc4b&quot;, ... }, userId: &quot;userId9be2bb35-0271-4c0a-8d11-5eaed7ee0b93&quot;)" time="0.0006881" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenEmailsAreDuplicated.TheResultShouldContainUniqueEmail" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenEmailsAreDuplicated.TheResultShouldContainUniqueEmail(userManagementService: Mock&lt;IUserManagementService:362&gt;, subscriptionsRepository: Mock&lt;ISubscriptionsRepository:197&gt;, model: InviteUsersModel { Environments = null, SubscriptionIds = [86e5ff62-5760-4b19-99cb-09581753bce5, 183c3d7c-1088-4c15-84c8-16110767b9fa, a69c7e02-538b-4edc-a388-d35f680a04a5], UserEmails = [&quot;ed0d7ac4-7b4a-482c-ac70-b85859d7c804&quot;, &quot;3560b611-72cc-433d-b2e3-eebff300aa56&quot;, &quot;d47187df-8119-4c90-93f9-232dec61f890&quot;, &quot;ed0d7ac4-7b4a-482c-ac70-b85859d7c804&quot;, &quot;3560b611-72cc-433d-b2e3-eebff300aa56&quot;, ...] }, invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink5bc9c41d-d91a-43cf-88ed-607fca38eb04&quot;, CreationDate = 2023-07-24T07:28:02.4157249, CustomerGuid = 8b3554e5-ab43-48c5-813f-68d2895d77b6, DeactivatedSubscriptions = [c8c37f86-0cdc-442d-a56f-df369006f787, bad06f82-10b9-4b13-80ee-c64deae54691, a67ff3e7-2a06-42ec-8c4c-17b6c911f331], Email = &quot;Emailbbcd5037-dbc1-4a55-9e56-fb6b6595860b&quot;, ... })" time="0.0134150" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNotNull+WhenUserIsEAOrSA.ReturnOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNotNull+WhenUserIsEAOrSA.ReturnOperationIsNotValidResult(userModel: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [544660ac-4b1b-4682-8b16-af20435c575c, d1896ac9-82ae-43c6-ad24-60261c094e38, 32dcffb9-1f2f-48ae-85f6-cfd618842066], UserEmails = [&quot;15cde7c4-f481-4add-bd65-bfeb75306647&quot;, &quot;5675d9d1-ebc9-4497-84cd-d8b6a177f559&quot;, &quot;b793f4d3-df81-4a4e-b1f1-b467a740565b&quot;] }, environmentManager: Mock&lt;IEnvironmentManager:177&gt;, userManagementService: Mock&lt;IUserManagementService:345&gt;, subscriptionRepository: Mock&lt;ISubscriptionsRepository:191&gt;, subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Thursday, 17 March 2022, Environments = [...], Guid = 033344a3-ffaf-4721-a55e-bf9457d752d3, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Thursday, 30 November 2023, Environments = [...], Guid = 8853b714-eefa-4dbc-a953-d0418424441d, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Friday, 28 March 2025, Environments = [...], Guid = 60b8bee8-468a-463a-bbc8-9d59adb7dd41, HasContentAdministrators = True, ... }], invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink7f48ea43-f956-4da5-8827-bedb86d7960c&quot;, CreationDate = 2021-09-04T01:58:54.5830007, CustomerGuid = 738d3678-da12-4335-b1c9-01d14c5291bd, DeactivatedSubscriptions = [664164f5-1209-47ed-82da-b38044480f59, 1ba94e9f-084e-445d-b957-2863113eae1c, 4ec95a9f-b96c-43ab-8708-7c549c9cdbfc], Email = &quot;Emailf773e9f5-664c-4da0-b8bc-3b97215bb891&quot;, ... })" time="0.0123255" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNotNull+WhenUserIsEAOrSA.ReturnOperationIsNotValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserInvitationsManagerTests+TheInviteUsersAsyncFunction+WhenCustomerGuidIsNotNull+WhenUserIsEAOrSA.ReturnOperationIsNotValidResult(userModel: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [6376077f-7cfb-47af-82fb-e17e27ad3ad6, d06480a6-f991-486b-891d-d9f4a972d9bb, 0f299add-43f0-4bd4-b0f2-83787f38320c], UserEmails = [&quot;339790d9-dada-4d73-b5c1-7a3a6940b71d&quot;, &quot;28810b55-e47b-4db8-bf90-1906cf21d767&quot;, &quot;adb0786d-cbb7-4808-aefb-4226a7b12a26&quot;] }, environmentManager: Mock&lt;IEnvironmentManager:178&gt;, userManagementService: Mock&lt;IUserManagementService:347&gt;, subscriptionRepository: Mock&lt;ISubscriptionsRepository:194&gt;, subscriptions: [Subscription { Customer = Customer { ... }, EndDate = Monday, 9 August 2021, Environments = [...], Guid = 0c1d0960-0a27-4696-ac0f-1252acf923a9, HasContentAdministrators = True, ... }, Subscription { Customer = Customer { ... }, EndDate = Saturday, 12 February 2022, Environments = [...], Guid = a383fb05-8191-4948-91f1-872863eb6fa7, HasContentAdministrators = False, ... }, Subscription { Customer = Customer { ... }, EndDate = Sunday, 12 February 2023, Environments = [...], Guid = 880fb905-d697-439b-a4ed-0897da42f77d, HasContentAdministrators = True, ... }], invitationsManager: UserInvitationsManager { }, invitingUser: UserModel { AvatarLink = &quot;AvatarLink577f05e0-3274-48b6-a2b2-6a487bb15908&quot;, CreationDate = 2023-03-21T05:22:42.2329511, CustomerGuid = e90e7b78-1ecc-4f81-90da-f57ab3976d1a, DeactivatedSubscriptions = [b4521a31-c24f-45d2-9e09-3dfe5391e143, b3eb5c4c-7805-4441-9060-52ba252e9566, 69a71e5b-ae78-4b6e-b40a-f53e403a906a], Email = &quot;Email14c593b7-0738-4e3d-9c5f-39c11aaa5e5b&quot;, ... })" time="0.0029391" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToUpdateUserBecauseServiceReturnsFailed+WhenEnvironmentRolesContainEnvironmentWithTheSameRoleAsBefore.UpdatesEnvironmentRolesWithTheSameInfoAndReturnsSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenFailedToUpdateUserBecauseServiceReturnsFailed+WhenEnvironmentRolesContainEnvironmentWithTheSameRoleAsBefore.UpdatesEnvironmentRolesWithTheSameInfoAndReturnsSuccessResult(environmentManager: Mock&lt;IEnvironmentManager:180&gt;, userManagementService: Mock&lt;IUserManagementService:372&gt;, manager: UserManager { }, subscriptionIds: [2f6b9272-3b8b-4506-ad47-6a02f8fabb96, 71582068-6a74-4c7d-9cfb-3f8cc3a2eea6, 3f2bd6fd-6df0-4dcf-a4a2-df8470519996], firstName: &quot;firstName07ffaefa-e8c4-44e0-b24d-d2790992ee36&quot;, lastName: &quot;lastNamefa320803-ed60-4941-b500-8162bb1d1be4&quot;, userId: &quot;userId11dc253a-6fbe-41a6-a49e-6f5ee8c3af3d&quot;)" time="0.0106753" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenUserIdIsNotFoundDuringUpdate.ReturnsEntityNotFoundErrorResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+UpsertUserEnvironmentRolesAsyncMethod+WhenUserIdIsNotFoundDuringUpdate.ReturnsEntityNotFoundErrorResult(environmentManager: Mock&lt;IEnvironmentManager:187&gt;, userManagementService: Mock&lt;IUserManagementService:394&gt;, manager: UserManager { }, subscriptionIds: [65a18be3-7d9f-485a-9f82-7008c43b3101, e66f7895-53c2-406d-ac71-ebeb4a13b9d5, 75e63ba4-a6a9-41ad-b80f-00a470dc2b55], userId: &quot;userId0d676679-f5fa-4f25-afbf-f1edd9af3e4d&quot;)" time="0.0059809" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services.UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenTheUserHasRolesInOtherSubscriptions.ReturnOperationSuccessResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Services" method="UserManagerTests+TheDeleteUserFromSubscriptionAsyncFunction+WhenTheUserIsFound+WhenTheUserHasRolesInOtherSubscriptions.ReturnOperationSuccessResult(userManagementService: Mock&lt;IUserManagementService:423&gt;, subscriptionManager: Mock&lt;ISubscriptionManager:257&gt;, manager: UserManager { })" time="0.0122466" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="37" passed="37" failed="0" skipped="0" name="Test collection for CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" time="0.279">
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.UserAccessibleSubscriptionsModelValidatorTests+TheValidateFunction+IfEmailIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="UserAccessibleSubscriptionsModelValidatorTests+TheValidateFunction+IfEmailIsInvalid.ShouldReturnInvalidResult(model: UserAccessibleSubscriptionsModel { UserEmail = &quot;UserEmail79079b2e-2e80-466f-8bfd-84fe09f9f348&quot; }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }])" time="0.1123150" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.MarkUserMigratedModelValidatorTests+TheValidateFunction+IfEmailIsEmpty.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="MarkUserMigratedModelValidatorTests+TheValidateFunction+IfEmailIsEmpty.ShouldReturnInvalidResult(model: MarkUserMigratedModel { UserEmail = &quot;&quot; }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }])" time="0.0237639" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.MarkUserMigratedModelValidatorTests+TheValidateFunction+IfEmailIsWhiteSpace.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="MarkUserMigratedModelValidatorTests+TheValidateFunction+IfEmailIsWhiteSpace.ShouldReturnInvalidResult(model: MarkUserMigratedModel { UserEmail = &quot; &quot; }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }])" time="0.0012639" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.AddUserModelValidatorTests+TheValidateFunction+IfEmailIsWhiteSpace.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="AddUserModelValidatorTests+TheValidateFunction+IfEmailIsWhiteSpace.ShouldReturnInvalidResult(model: AddUserModel { CustomerGuid = ce87a523-d855-4e2f-9acb-fe7ef8286cc1, Email = &quot; &quot;, FirstName = &quot;FirstName86d58cee-df2d-456f-9750-c64e2f89dc72&quot;, LastName = &quot;LastName3ba9f43d-3ca8-4fef-b7b8-3d3fd4adcd83&quot;, SubscriptionIds = [73ffe070-b7b6-4dbc-afff-dd6f391a648b, 903368b3-b0f7-4072-b6b9-856bd5b264cb, 09bec27e-f45d-4cdc-8ff0-0489c540a918] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.FirstName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.LastName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Email, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Email, HasAsyncCondition = False, ... }])" time="0.0048747" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.UserEnvironmentsModelValidatorTests+TheValidateMethod+IfModelIsValid.ShouldReturnValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="UserEnvironmentsModelValidatorTests+TheValidateMethod+IfModelIsValid.ShouldReturnValidResult(model: UserEnvironmentsModel { EnvironmentRoles = [[b7e4c171-6cc1-4063-9aff-70a6d763e714] = [EA], [c001152d-6093-40aa-9247-edd7e88cb8a7] = [EU]] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.EnvironmentRoles, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.EnvironmentRoles, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.EnvironmentRoles, HasAsyncCondition = False, ... }])" time="0.0189394" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.UserEnvironmentsModelValidatorTests+TheValidateMethod+IfEnvironmentRolesAreEmpty.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="UserEnvironmentsModelValidatorTests+TheValidateMethod+IfEnvironmentRolesAreEmpty.ShouldReturnInvalidResult(model: UserEnvironmentsModel { EnvironmentRoles = [] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.EnvironmentRoles, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.EnvironmentRoles, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.EnvironmentRoles, HasAsyncCondition = False, ... }])" time="0.0013106" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.AddUserModelValidatorTests+TheValidateFunction+IfEmailIsEmpty.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="AddUserModelValidatorTests+TheValidateFunction+IfEmailIsEmpty.ShouldReturnInvalidResult(model: AddUserModel { CustomerGuid = 91aad401-2a1f-4121-b4c6-68adfc0f3583, Email = &quot;&quot;, FirstName = &quot;FirstNamed8b56f54-9b3b-4f3c-ade0-514e002d8177&quot;, LastName = &quot;LastName0b33bd4e-c6cc-4dbd-8839-ea771eb400c1&quot;, SubscriptionIds = [2d9c8258-d3ee-4f00-a8b2-cca15a2549d7, 53b03998-5cd8-48c2-8433-f0bb54a8d425, 660666be-0c3d-481c-ad76-150518916923] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.FirstName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.LastName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Email, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Email, HasAsyncCondition = False, ... }])" time="0.0012658" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.UserEnvironmentsModelValidatorTests+TheValidateMethod+IfModelHaveBothEUAndEARolesForTheSameEnvironment.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="UserEnvironmentsModelValidatorTests+TheValidateMethod+IfModelHaveBothEUAndEARolesForTheSameEnvironment.ShouldReturnInvalidResult(model: UserEnvironmentsModel { EnvironmentRoles = [[0cc58d9f-e7d5-4cde-86af-017d484b90a5] = [EA, EU], [1e338bbb-77e2-46b9-90ce-9c855ebf40db] = [EA, EU]] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.EnvironmentRoles, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.EnvironmentRoles, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.EnvironmentRoles, HasAsyncCondition = False, ... }])" time="0.0013329" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.AddUserModelValidatorTests+TheValidateFunction+IfEmailIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="AddUserModelValidatorTests+TheValidateFunction+IfEmailIsInvalid.ShouldReturnInvalidResult(model: AddUserModel { CustomerGuid = dd896cf0-ed24-4200-a172-36d724f913ff, Email = &quot;Email5ecebc65-c25d-45e4-8de9-69a48f31c5ae&quot;, FirstName = &quot;FirstNamea9825ccc-ee28-4434-b493-83c7a981454d&quot;, LastName = &quot;LastName39471e50-4845-425e-b4d1-ce1cc4bd66b0&quot;, SubscriptionIds = [5fbfeb39-366d-4089-af5c-30c10de4c0cc, 8f2a57fb-bdd1-421f-8f63-f238b1a9a742, 2b01e303-f524-442b-9913-731a5964fece] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.FirstName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.LastName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Email, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Email, HasAsyncCondition = False, ... }])" time="0.0013320" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.UserAccessibleSubscriptionsModelValidatorTests+TheValidateFunction+IfEmailIsValid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="UserAccessibleSubscriptionsModelValidatorTests+TheValidateFunction+IfEmailIsValid.ShouldReturnInvalidResult(model: UserAccessibleSubscriptionsModel { UserEmail = &quot;1b6730e5-6901-48f9-888b-59cdb93bc0cf@example.com&quot; }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }])" time="0.0013865" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.MarkUserMigratedModelValidatorTests+TheValidateFunction+IfEmailIsNull.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="MarkUserMigratedModelValidatorTests+TheValidateFunction+IfEmailIsNull.ShouldReturnInvalidResult(model: MarkUserMigratedModel { UserEmail = null }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }])" time="0.0013525" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.MarkUserMigratedModelValidatorTests+TheValidateFunction+IfEmailIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="MarkUserMigratedModelValidatorTests+TheValidateFunction+IfEmailIsInvalid.ShouldReturnInvalidResult(model: MarkUserMigratedModel { UserEmail = &quot;UserEmail657cca39-0e76-4113-9a2c-b7b611b040b7&quot; }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }])" time="0.0013599" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.MarkUserMigratedModelValidatorTests+TheValidateFunction+IfEmailIsValid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="MarkUserMigratedModelValidatorTests+TheValidateFunction+IfEmailIsValid.ShouldReturnInvalidResult(model: MarkUserMigratedModel { UserEmail = &quot;5dcd5b09-c44a-4323-8b9e-eb7716a38c1e@example.com&quot; }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }])" time="0.0012698" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult(model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [17c13348-e1a2-46e1-b7ed-f47d52a7e290, 31c9e3f7-8ec4-49c1-870d-c1959c34ed5b, 4408f571-da03-4c35-849f-f21df12e7ced], UserEmails = [] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, Filter = null, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, Filter = null, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Environments, Filter = null, ... }, ...])" time="0.0018349" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult(model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [5b08d4d7-00c7-4757-8a0b-aae5086a1a67, 2bd2969a-e4f4-4d15-926e-3f2fa7d5ee4f, 77a7ad0e-fdf3-40e5-aee4-b5b07a40ed0b], UserEmails = [null] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, Filter = null, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, Filter = null, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Environments, Filter = null, ... }, ...])" time="0.0268612" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult(model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [f11b83d0-2499-4748-bbb8-712651f4450d, 6221537e-06e2-46b8-a854-4e4ae6d9d774, 254abe41-295b-4d2b-828b-688f3864286f], UserEmails = [&quot;&quot;] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, Filter = null, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, Filter = null, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Environments, Filter = null, ... }, ...])" time="0.0001084" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult(model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [78631a85-65f8-407e-b304-c4dd2c3a6405, a1ec10dc-65d5-4cd5-be1b-ef23e276dce7, f90ddddf-b18f-402d-891a-65cfb6d3d4ea], UserEmails = [&quot; &quot;] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, Filter = null, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, Filter = null, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Environments, Filter = null, ... }, ...])" time="0.0000447" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult(model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [d7111240-da61-4f2e-974d-2dda2ab74315, e158b454-7dae-423b-bd68-46a0d6e7bc59, b39ff968-8df2-4a46-9d28-fe4a280ad6ef], UserEmails = [&quot;920129d7-b0b1-41df-8e78-39c3059e050d&quot;, &quot;df105a7f-ac2c-4774-b2d8-d87a5df3063e&quot;, &quot;d5afd14c-a9d9-47ac-a6a2-9f486842e048&quot;] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, Filter = null, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, Filter = null, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Environments, Filter = null, ... }, ...])" time="0.0000936" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult(model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [9522db2e-02f9-4b10-ba00-36a3d7991a52, b2f0b67d-fd59-4e1b-acbb-5c6a84af61a1, 12a0a664-55ea-42df-9d05-5fdf48ebba15], UserEmails = [&quot;8bd9b5f5-ac43-4636-bfa9-80c5de64a733@example.org&quot;, &quot;dcb88876-390f-46ab-a347-4f17354e2003@example.net&quot;, &quot;b23c595d-d4a0-41e0-97f9-0d2aa0245d69@example.com&quot;, &quot;5d0a0db8-5823-4435-9fb4-d580397c2fc0@example.org&quot;, &quot;0cf66406-d340-46bc-902e-b0a7dce45e04@example.com&quot;, ...] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, Filter = null, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, Filter = null, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Environments, Filter = null, ... }, ...])" time="0.0610737" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult(model: InviteUsersModel { Environments = null, SubscriptionIds = [f2c1f941-ae92-4902-ad96-28bbb5ced694, 936429ec-7e34-4511-9e20-2cfcce9a1e98, f65b9ae0-1b7c-41ef-a1ed-477eef29ea07], UserEmails = [&quot;a9b1e592-cb85-4397-9fd5-f7c4d1ea8c78&quot;, &quot;8f014253-4885-46c2-84f0-5644c7fc927d&quot;, &quot;31d92c78-07fd-4b3b-9d8d-c792a5ee1aa6&quot;] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, Filter = null, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, Filter = null, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Environments, Filter = null, ... }, ...])" time="0.0000742" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult(model: InviteUsersModel { Environments = [null], SubscriptionIds = [d0b22032-9f60-451f-afa3-90ecdb5cb66f, 72e97bdb-54a9-4766-af92-45ad221499e2, a94acabd-876f-4835-b961-04271026328e], UserEmails = [&quot;2f717495-58d3-4d07-a9a9-2d7326844b9c@example.com&quot;, &quot;37fb8028-5937-4e49-bb63-a5e2195ec1e3@example.org&quot;, &quot;7ff6e51f-b6aa-4b5f-98e1-126046dcb062@example.net&quot;] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, Filter = null, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, Filter = null, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Environments, Filter = null, ... }, ...])" time="0.0001928" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult(model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [], UserEmails = [&quot;0bf1c050-60cc-4354-826b-7a1eb343b6b6@example.net&quot;, &quot;73ed250f-0280-4ecd-9808-74f28a0e2dcd@example.org&quot;, &quot;87127d16-880d-4893-98de-3074e18e2a40@example.com&quot;] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, Filter = null, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, Filter = null, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Environments, Filter = null, ... }, ...])" time="0.0000877" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult(model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = null, UserEmails = [&quot;7f4f044b-6a1c-4b24-8aef-466c01feb08a@example.net&quot;, &quot;8c813643-c9b1-4b79-b1d5-e2a770adcf79@example.org&quot;, &quot;852d74cf-12d4-48a3-b19e-5ffb341dd2e4@example.com&quot;] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, Filter = null, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, Filter = null, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Environments, Filter = null, ... }, ...])" time="0.0000515" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.UserEnvironmentsModelValidatorTests+TheValidateMethod+IfEnvironmentRolesHaveDuplicatedRoles.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="UserEnvironmentsModelValidatorTests+TheValidateMethod+IfEnvironmentRolesHaveDuplicatedRoles.ShouldReturnInvalidResult(model: UserEnvironmentsModel { EnvironmentRoles = [[d96353a3-b48e-418c-84fb-86c4483cd16f] = [EA, EA], [8f056d04-9d21-4697-a6d9-a8e4d38192a0] = [EA, EA]] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.EnvironmentRoles, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.EnvironmentRoles, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.EnvironmentRoles, HasAsyncCondition = False, ... }])" time="0.0012331" result="Pass">
        <traits />
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.UserAccessibleSubscriptionsModelValidatorTests+TheValidateFunction+IfEmailIsNull.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="UserAccessibleSubscriptionsModelValidatorTests+TheValidateFunction+IfEmailIsNull.ShouldReturnInvalidResult(model: UserAccessibleSubscriptionsModel { UserEmail = null }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }])" time="0.0012818" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.UserAccessibleSubscriptionsModelValidatorTests+TheValidateFunction+IfEmailIsWhiteSpace.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="UserAccessibleSubscriptionsModelValidatorTests+TheValidateFunction+IfEmailIsWhiteSpace.ShouldReturnInvalidResult(model: UserAccessibleSubscriptionsModel { UserEmail = &quot; &quot; }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }])" time="0.0013728" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.AddUserModelValidatorTests+TheValidateFunction+IfLastNameIsNull.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="AddUserModelValidatorTests+TheValidateFunction+IfLastNameIsNull.ShouldReturnInvalidResult(model: AddUserModel { CustomerGuid = 21e46106-f6ca-4bc3-a79f-11dc50b2b871, Email = &quot;d67ddb21-7a6a-475c-8c55-c48436373c1c@example.net&quot;, FirstName = &quot;FirstName5a265b82-6a70-4bb1-aed7-99dcc1ba0c34&quot;, LastName = null, SubscriptionIds = [bd25a079-0803-410f-9419-0db9703107be, 7ebadf7b-dfd5-4224-9452-3a4ea0b9f682, 6c6231c1-0115-4f30-9086-66cfac0af45c] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.FirstName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.LastName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Email, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Email, HasAsyncCondition = False, ... }])" time="0.0012324" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.AddUserModelValidatorTests+TheValidateFunction+IfFirstNameIsNull.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="AddUserModelValidatorTests+TheValidateFunction+IfFirstNameIsNull.ShouldReturnInvalidResult(model: AddUserModel { CustomerGuid = 8df198a7-d4d4-4746-8eb1-acb22f373a21, Email = &quot;41932816-d1ff-41f6-96ed-4ad8dd94de9e@example.org&quot;, FirstName = null, LastName = &quot;LastName9fb8c2f8-b37e-4a8a-a41c-699561a29d38&quot;, SubscriptionIds = [c2973e7c-ea67-449a-89e2-cb49c278d0a9, f3a7b303-9c2b-45ca-be14-ca4267b8114e, f089549c-c445-4d68-9a5c-8cf6fa6aa6c2] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.FirstName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.LastName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Email, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Email, HasAsyncCondition = False, ... }])" time="0.0012110" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.UserUpdateModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="UserUpdateModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult(model: UpdateUserModel { FirstName = null, LastName = null }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.FirstName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.LastName, HasAsyncCondition = False, ... }])" time="0.0020376" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.UserUpdateModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="UserUpdateModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult(model: UpdateUserModel { FirstName = &quot; &quot;, LastName = &quot;LastNamed91b9ca2-225b-4f5b-bcff-f912e6ef83e8&quot; }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.FirstName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.LastName, HasAsyncCondition = False, ... }])" time="0.0008741" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.UserUpdateModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="UserUpdateModelValidatorTests+TheValidateFunction+IfDataIsInvalid.ShouldReturnInvalidResult(model: UpdateUserModel { FirstName = &quot;FirstNamee6ced1bd-d440-4e37-98e6-7d87d69af6ac&quot;, LastName = &quot; &quot; }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.FirstName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.LastName, HasAsyncCondition = False, ... }])" time="0.0001798" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.AddUserModelValidatorTests+TheValidateFunction+IfAllIsValid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="AddUserModelValidatorTests+TheValidateFunction+IfAllIsValid.ShouldReturnInvalidResult(model: AddUserModel { CustomerGuid = 9b230dfd-5afc-4a5e-8e55-608208a0f301, Email = &quot;9ac394ac-00ae-4492-b0ab-ebf5e4495a06@example.org&quot;, FirstName = &quot;FirstName699a151c-a464-4dde-bc6f-c0ab386a3d18&quot;, LastName = &quot;LastName48d776a5-3753-48ce-ac87-e16ee0ba0d4e&quot;, SubscriptionIds = [8787db93-433f-40d7-b1f3-437537904fb0, 0fd8f0db-c64b-4ad3-bf8a-212275f52c87, ea431b95-71cf-4fd2-ac70-ad2b6b9c3364] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.FirstName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.LastName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Email, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Email, HasAsyncCondition = False, ... }])" time="0.0012103" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.AddUserModelValidatorTests+TheValidateFunction+IfEmailIsNull.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="AddUserModelValidatorTests+TheValidateFunction+IfEmailIsNull.ShouldReturnInvalidResult(model: AddUserModel { CustomerGuid = a946fae4-1a0e-4713-b529-9371da09ea07, Email = null, FirstName = &quot;FirstName02e5fb21-63cc-4bb9-9438-5a24510a4019&quot;, LastName = &quot;LastNameba2a0606-74d1-4dac-97e7-17ce5a53751e&quot;, SubscriptionIds = [0a6403e9-6ef6-44dd-9466-8a0515db4957, 3aa20bc0-d71e-4b3f-8cd0-06b5260760c4, 72eb18ed-9b2a-4b6d-81c0-069dd0a06c4e] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.FirstName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.LastName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Email, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Email, HasAsyncCondition = False, ... }])" time="0.0012125" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.UserUpdateModelValidatorTests+TheValidateFunction+IfDataIsValid.ShouldReturnValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="UserUpdateModelValidatorTests+TheValidateFunction+IfDataIsValid.ShouldReturnValidResult(model: UpdateUserModel { FirstName = &quot;FirstName832d69c9-8d69-4ca8-9ce4-888a3b709345&quot;, LastName = &quot;LastNamea7ae6c55-f365-4255-93bf-134325be57be&quot; }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.FirstName, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.LastName, HasAsyncCondition = False, ... }])" time="0.0012120" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.UserAccessibleSubscriptionsModelValidatorTests+TheValidateFunction+IfEmailIsEmpty.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="UserAccessibleSubscriptionsModelValidatorTests+TheValidateFunction+IfEmailIsEmpty.ShouldReturnInvalidResult(model: UserAccessibleSubscriptionsModel { UserEmail = &quot;&quot; }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmail, HasAsyncCondition = False, ... }])" time="0.0012995" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsValid.ShouldReturnValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsValid.ShouldReturnValidResult(model: InviteUsersModel { Environments = [EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }, EnvironmentRoleModel { ... }], SubscriptionIds = [da0b9f22-bfdb-43ac-aab2-237c428d9b7a, c8baa1cf-443d-4925-977d-7c5ed2dd4d78, 22e0aec4-2aae-4c4e-bd3c-47526d3835ef], UserEmails = [&quot;ead54411-dd6d-49e9-ae73-8f6bd1678cf5@example.net&quot;, &quot;4f19c217-9c83-46f6-ac62-7ea1d1bb898f@example.com&quot;, &quot;467cb42b-1a28-4b5e-b77e-eb55b826928f@example.org&quot;] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, Filter = null, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, Filter = null, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Environments, Filter = null, ... }, ...])" time="0.0019878" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators.InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsValid.ShouldReturnValidResult" type="CHILI.GraFx.Platform.API.Tests.Modules.UserManagement.Validators" method="InviteUsersModelValidatorTests+TheValidateFunction+IfDataIsValid.ShouldReturnValidResult(model: InviteUsersModel { Environments = [], SubscriptionIds = [7b346448-ad49-4215-bc81-6cd690b9f204, 886c1121-3175-4ba8-a89c-fac4367032c3, 1c1d589f-b826-4a2c-99f9-ec2989ea71b7], UserEmails = [&quot;ede973fd-a611-4683-88b3-339225d205bf@example.com&quot;, &quot;b2d0a817-c911-4582-a6f6-09d54dc88756@example.net&quot;, &quot;58049997-0f0d-4ff6-beb6-50745f16d975@example.org&quot;] }, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.UserEmails, Filter = null, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, HasAsyncCondition = False, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.SubscriptionIds, Filter = null, ... }, CollectionPropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = model =&gt; model.Environments, Filter = null, ... }, ...])" time="0.0000954" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
          <trait name="Feature" value="User Management API" />
        </traits>
      </test>
    </collection>
    <collection total="13" passed="13" failed="0" skipped="0" name="Test collection for CHILI.GraFx.Platform.API.Tests.Shared.Validators" time="0.055">
      <test name="CHILI.GraFx.Platform.API.Tests.Shared.Validators.DateRangeStringValidatorTests+TheValidateMethod+IfBothDatesAreValid.ShouldReturnValidResult" type="CHILI.GraFx.Platform.API.Tests.Shared.Validators" method="DateRangeStringValidatorTests+TheValidateMethod+IfBothDatesAreValid.ShouldReturnValidResult(dateTimeProvider: Mock&lt;IDateTimeProvider:153&gt;, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item1, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item2, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange, HasAsyncCondition = False, ... }])" time="0.0468458" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Shared.Validators.DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfAnyDateIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Shared.Validators" method="DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfAnyDateIsInvalid.ShouldReturnInvalidResult(startDate: null, endDate: &quot;2002-11-11&quot;, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item1, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item2, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange, HasAsyncCondition = False, ... }])" time="0.0029178" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Shared.Validators.DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfAnyDateIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Shared.Validators" method="DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfAnyDateIsInvalid.ShouldReturnInvalidResult(startDate: &quot;2002-11-11&quot;, endDate: null, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item1, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item2, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange, HasAsyncCondition = False, ... }])" time="0.0001009" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Shared.Validators.DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfAnyDateIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Shared.Validators" method="DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfAnyDateIsInvalid.ShouldReturnInvalidResult(startDate: &quot;&quot;, endDate: &quot;2002-11-11&quot;, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item1, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item2, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange, HasAsyncCondition = False, ... }])" time="0.0000308" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Shared.Validators.DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfAnyDateIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Shared.Validators" method="DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfAnyDateIsInvalid.ShouldReturnInvalidResult(startDate: &quot;2002-11-11&quot;, endDate: &quot;&quot;, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item1, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item2, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange, HasAsyncCondition = False, ... }])" time="0.0001042" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Shared.Validators.DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfAnyDateIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Shared.Validators" method="DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfAnyDateIsInvalid.ShouldReturnInvalidResult(startDate: &quot;2002-11-11&quot;, endDate: &quot; &quot;, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item1, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item2, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange, HasAsyncCondition = False, ... }])" time="0.0000486" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Shared.Validators.DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfAnyDateIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Shared.Validators" method="DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfAnyDateIsInvalid.ShouldReturnInvalidResult(startDate: &quot;2002_11_11&quot;, endDate: &quot;2002-12-11&quot;, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item1, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item2, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange, HasAsyncCondition = False, ... }])" time="0.0000303" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Shared.Validators.DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfAnyDateIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Shared.Validators" method="DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfAnyDateIsInvalid.ShouldReturnInvalidResult(startDate: &quot;2002-11-11&quot;, endDate: &quot;11-12-2002&quot;, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item1, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item2, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange, HasAsyncCondition = False, ... }])" time="0.0000720" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Shared.Validators.DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfAnyDateIsInvalid.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Shared.Validators" method="DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfAnyDateIsInvalid.ShouldReturnInvalidResult(startDate: &quot;2002-30-11&quot;, endDate: &quot;2003-01-01&quot;, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item1, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item2, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange, HasAsyncCondition = False, ... }])" time="0.0000535" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Shared.Validators.DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfStartDateIsHigherThanEndDate.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Shared.Validators" method="DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfStartDateIsHigherThanEndDate.ShouldReturnInvalidResult(startDate: &quot;2003-11-11&quot;, endDate: &quot;2002-12-11&quot;, dateTimeProvider: Mock&lt;IDateTimeProvider:434&gt;, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item1, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item2, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange, HasAsyncCondition = False, ... }])" time="0.0017474" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Shared.Validators.DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfStartDateIsHigherThanEndDate.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Shared.Validators" method="DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfStartDateIsHigherThanEndDate.ShouldReturnInvalidResult(startDate: &quot;2002-12-11&quot;, endDate: &quot;2002-11-11&quot;, dateTimeProvider: Mock&lt;IDateTimeProvider:435&gt;, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item1, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item2, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange, HasAsyncCondition = False, ... }])" time="0.0001033" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Shared.Validators.DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfStartDateIsInTheFuture.ShouldReturnInvalidResult" type="CHILI.GraFx.Platform.API.Tests.Shared.Validators" method="DateRangeStringValidatorTests+TheValidateMethod+IfDateRangeIsInvalid+IfStartDateIsInTheFuture.ShouldReturnInvalidResult(dateTimeProvider: Mock&lt;IDateTimeProvider:445&gt;, validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item1, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item2, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange, HasAsyncCondition = False, ... }])" time="0.0016046" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
        </traits>
      </test>
      <test name="CHILI.GraFx.Platform.API.Tests.Shared.Validators.DateRangeStringValidatorTests+TheValidateMethod+IfBothDatesAreNull.ShouldReturnValidResult" type="CHILI.GraFx.Platform.API.Tests.Shared.Validators" method="DateRangeStringValidatorTests+TheValidateMethod+IfBothDatesAreNull.ShouldReturnValidResult(validator: [PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item1, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange.Item2, HasAsyncCondition = False, ... }, PropertyRule`2 { CascadeMode = Stop, Components = [...], Current = RuleComponent`2 { ... }, Expression = dateRange =&gt; dateRange, HasAsyncCondition = False, ... }])" time="0.0012099" result="Pass">
        <traits>
          <trait name="Type" value="Unit Test" />
        </traits>
      </test>
    </collection>
  </assembly>
</assemblies>
